%{
declare namespace xml="http://www.w3.org/XML/1998/namespace";

declare namespace fn="http://www.w3.org/2004/07/xpath-functions";
declare namespace op="http://www.w3.org/2004/07/xpath-operators";

declare namespace err="http://www.w3.org/2004/07/xqt-errors";

declare namespace fn-bea="http://www.bea.com/xquery/xquery-functions";
declare namespace op-bea="http://www.bea.com/xquery/xquery-operators";
declare namespace dt-bea="http://www.bea.com/xquery/xquery-datatypes";

declare namespace var-bea="http://www.bea.com/xquery/xquery-variables";

declare namespace xf-aug02="http://www.w3.org/2002/08/xquery-functions";
declare namespace op-aug02="http://www.w3.org/2002/08/xquery-operators";

declare namespace xs="http://www.w3.org/2001/XMLSchema";
declare namespace xsd="http://www.w3.org/2001/XMLSchema";
declare namespace xdt="http://www.w3.org/2004/07/xpath-datatypes";
declare namespace local="http://www.w3.org/2004/07/xquery-local-functions";

declare default function namespace "http://www.w3.org/2004/07/xpath-functions";
%}

DEFINE COLLATION "http://www.w3.org/2002/08/query-operators/collation/codepoint"
IMPLEMENTED BY "weblogic.xml.query.runtime.collation.CodepointCollator"

DEFINE COLLATION "http://www.xqrl.com/xquery/collation/de"
IMPLEMENTED BY "weblogic.xml.query.runtime.collation.CollatorDE"

(: xqrl specific functions and operators :)

DEFINE INTERNAL FUNCTION %{ op-bea:cache($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

(: just to test :)
DEFINE INTERNAL FUNCTION %{ op-bea:compute-key($input1 as item()*, $input2 as item()*) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.cache.ComputeKey"

DEFINE BUILTIN FUNCTION %{ fn-bea:integer-sequence($arg as node()*) as xs:integer* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn-bea:float-sequence($arg as node()*) as xs:float* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn-bea:double-sequence($arg as node()*) as xs:double* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn-bea:decimal-sequence($arg as node()*) as xs:decimal* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn-bea:fence($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fence"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:generate-key() as xdt:anyAtomicType %}
IMPLEMENTED BY "weblogic.xml.query.runtime.join.GenerateKey"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:assemble-key() as xdt:anyAtomicType %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:get-non-null-value() as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.join.GetNonNullValue"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:get-node-source-id($n as node()?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.nodeids.GetSourceId"
DUPLICATES "no"
DOCORDER "yes"
IDTYPE "thin"

DEFINE INTERNAL FUNCTION %{ op-bea:get-node-local-id($n as node()?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.nodeids.GetLocalId"
DUPLICATES "no"
DOCORDER "yes"
IDTYPE "thin"

DEFINE BUILTIN FUNCTION %{ fn-bea:if-empty($seq as item()*, $alt as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.IfEmpty"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$IfEmpty"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:async($arg as item()*, $cap as xs:integer) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.async.Async"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:timeout($seq as item()*, $millis as xs:integer, $alt as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.async.Timeout"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Timeout"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:sleep($arg as item()*, $ms as xs:integer) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.async.Sleep"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:execution-time($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.async.ExecutionTime"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:rename($oldelements as element()*, $newname as element()) as element()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.constructor.RenameElement"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Rename"
DUPLICATES "no"
DOCORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:squish-empty-element($arg as element()) as element()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.SquishEmptyElement"
DUPLICATES "no"
DOCORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:probe($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.Probe"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
FUNCTION "no"
DUPLICATES "no"
DOCORDER "yes"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:probe($arg as item()*, $prefix as xs:string) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.Probe"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
FUNCTION "no"
DUPLICATES "no"
DOCORDER "yes"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:profile($arg as item()*, $id as xs:integer, $type as xs:integer, $minor as xs:integer, $details as xs:string*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.Profiler"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:eval-eagerly($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.EagerIterator"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:check-stream($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.ProtocolAndTsChecker"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:endless($ms as xs:integer) as xs:integer* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.Endless"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op-bea:throw($excep as xs:string) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.ThrowException"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:push-down($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"

DEFINE BUILTIN FUNCTION %{ fn-bea:id($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:deflate($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Deflate"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:deflate-rec($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.DeflateRec"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:inflate($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Inflate"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:inflate-rec($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.InflateRec"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:interleave($arg1 as item()*, $arg2 as xdt:anyAtomicType) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Interleave"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:inlinedXML($arg as xs:string) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.InlinedXML"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
ANCESTORS "no"

DEFINE INTERNAL FUNCTION %{ op-bea:data-double($arg as item()*) as xs:double* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DataDouble"

DEFINE INTERNAL FUNCTION %{ op-bea:generate-thin-doc-node-ids($arg1 as item()*, $arg2 as xdt:anyAtomicType) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"
NEWNODES "yes"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:generate-thick-doc-node-ids($arg1 as item()*, $arg2 as xdt:anyAtomicType) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"
NEWNODES "yes"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:generate-thin-new-node-ids($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"
NEWNODES "yes"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:generate-thick-new-node-ids($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"
NEWNODES "yes"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:materialize-parent($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "no"
DOCORDER "yes"
FUNCTION "no"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:nth($arg1 as item()*, $arg2 as xs:integer) as item()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Nth"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Nth"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:firstN($arg1 as item()*, $arg2 as xs:integer) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.FirstN"
DUPLICATES "preserve"
DOCORDER "preserve"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:sort-distinct($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.IdentitySortDistinct"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$IdentitySortDistinct"
DUPLICATES "no"
DOCORDER "yes"
IDTYPE "thin"
DATASOURCE "1"
IGNORES INPUT DUPLICATES "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:sort-by-doc-order($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sort.DocOrderSort"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$DocOrderSort"
DUPLICATES "preserve"
DOCORDER "yes"
IDTYPE "thin"
DATASOURCE "1"
IGNORES INPUT ORDER "yes"
PUSH IGNORES DUPLICATES "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-add($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericAdd"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-subtract($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericSub"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-multiply($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericMul"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-divide($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericDiv"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-integer-divide($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericIDiv"

DEFINE INTERNAL FUNCTION %{ op-bea:generic-mod($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.arithmetic.GenericMod"


DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicEqual"
COMMUTATIVE "yes"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-less-than($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicLess"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-greater-than($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicGreater"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-less-than-or-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicLessEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-greater-than-or-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicGreaterEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:general-atomic-not-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.GeneralAtomicNotEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
COMMUTATIVE "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)


DEFINE INTERNAL FUNCTION %{ op-bea:value-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueEqual"
COMMUTATIVE "yes"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:value-less-than($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueLess"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:value-greater-than($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueGreater"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:value-less-than-or-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueLessEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:value-greater-than-or-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueGreaterEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)

DEFINE INTERNAL FUNCTION %{ op-bea:value-not-equal($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.compare.ValueNotEqual"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
COMMUTATIVE "yes"
FUNCTION "no" (: not a function as it might be a comparison of datetime values that also depends on the implicit timezone :)


DEFINE INTERNAL FUNCTION %{ op-bea:general-equal($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:general-less-than($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:general-greater-than($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:general-less-than-or-equal($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:general-greater-than-or-equal($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:general-not-equal($arg1 as xdt:anyAtomicType*, $arg2 as xdt:anyAtomicType*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
IGNORES INPUT DUPLICATES "yes"
IGNORES INPUT ORDER "yes"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:format-number($arg1 as xs:double, $arg2 as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FormatNumber"

DEFINE INTERNAL FUNCTION %{ op-bea:chunkify($seq as item()*, $cnt as xs:integer) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.Chunkify"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Chunkify"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:extract-field($name as xs:QName, $content as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.ExtractField"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$ExtractField"
DUPLICATES "preserve"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "2"

DEFINE INTERNAL FUNCTION %{ op-bea:extract-content($content as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.ExtractContent"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$ExtractContent"
DUPLICATES "preserve"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:extract-content-from-field($name as xs:QName, $content as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.ExtractContentFromField"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$ExtractContentFromField"
DUPLICATES "preserve"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "2"

DEFINE INTERNAL FUNCTION %{ op-bea:extract-content-from-indexed-field($idx as xs:integer, $content as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.ExtractContentFromIndexedField"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$ExtractContentFromIndexedField"
DUPLICATES "preserve"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "2"

DEFINE INTERNAL FUNCTION %{ op-bea:wrap-tuple-sequence($tuple-seq as item()*, $tuple-name as xs:QName) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.WrapTupleSequence"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$WrapTupleSequence"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ op-bea:inflate-tuples($tuple-seq as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.tuple.InflateTuples"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"


(: Navigation functions and data model functions :)

DEFINE INTERNAL FUNCTION %{ op-bea:ancestor($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:ancestor-or-self($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:parent($arg1 as node()) as node()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.Parent"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Parent"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "1"

DEFINE INTERNAL FUNCTION %{ op-bea:preceding($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:preceding-sibling($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:children($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.ChildPath"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Children"
DUPLICATES "preserve"
ISMAP "yes"
NAVIGATION "yes"
MAX LEVEL DOWN "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "preserve"

DEFINE INTERNAL FUNCTION %{ op-bea:attributes-map($arg as node()*) as attribute()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.AttributesMap"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Attributes"
DUPLICATES "preserve"
DOCORDER "preserve"
ISMAP "yes"
NAVIGATION "yes"
MAX LEVEL DOWN "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "no"

DEFINE INTERNAL FUNCTION %{ op-bea:attributes($arg as node()) as attribute()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.AttributesSingle"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Attributes"
DUPLICATES "preserve"
DOCORDER "preserve"
NAVIGATION "yes"
MAX LEVEL DOWN "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "no"

DEFINE INTERNAL FUNCTION %{ op-bea:namespaces($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.Namespaces"
RUNTIME COMMENT "incorrect semantics"
DUPLICATES "preserve"
DOCORDER "preserve"
ISMAP "yes"
NAVIGATION "yes"
MAX LEVEL DOWN "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "no"

DEFINE INTERNAL FUNCTION %{ op-bea:descendant($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.StreamDescendant"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Descendant"
ISMAP "yes"
NAVIGATION "yes"
MAX LEVEL DOWN "inf"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:following($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:following-sibling($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE INTERNAL FUNCTION %{ op-bea:self($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
COMPILER COMMENT "Signature incomplete or incorrect."
DUPLICATES "preserve"
DOCORDER "preserve"
ISMAP "yes"
NAVIGATION "yes"
MAX LEVEL DOWN "0"
MAX LEVEL DOWN "0"
DATASOURCE "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "preserve"

DEFINE INTERNAL FUNCTION %{ op-bea:descendant-or-self($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.StreamDescendantOrSelf"
(:TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$DescendantOrSelf":)
ISMAP "yes"
DATASOURCE "1"
NAVIGATION "yes"
MAX LEVEL DOWN "inf"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "yes"

(: Schema validation functions :)

DEFINE INTERNAL FUNCTION %{ op-bea:validate($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.schema.ValidatingIterator"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Validate"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "no"

DEFINE INTERNAL FUNCTION %{ op-bea:validate($arg1 as node(), $arg2 as xs:anyURI) as node() %}
IMPLEMENTED BY "weblogic.xml.query.schema.ValidatingIterator"
NEWNODES "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:validate-preserve($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.schema.ValidatingIterator"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DUPLICATES "preserve"
DOCORDER "preserve"
NEWNODES "no"
DATASOURCE "1"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "preserve"

DEFINE INTERNAL FUNCTION %{ op-bea:validate-preserve($arg1 as node(), $arg2 as xs:anyURI) as node() %}
IMPLEMENTED BY "weblogic.xml.query.schema.ValidatingIterator"
NEWNODES "no"
DATASOURCE "1"

(: Functions from "XQuery 1.0 and XPath 2.0 Functions and Operators" :)

(: Accessors :)

DEFINE BUILTIN FUNCTION %{ xf-aug02:node-kind($srcval as node()) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.NodeKind"

DEFINE BUILTIN FUNCTION %{ fn:node-name($arg as node()?) as xs:QName? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.NodeName"

DEFINE BUILTIN FUNCTION %{ fn:nilled($arg as node()) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Nilled"

DEFINE BUILTIN FUNCTION %{ fn:string($arg as item()?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringValue"

DEFINE BUILTIN FUNCTION %{ fn:data($arg as item()*) as xdt:anyAtomicType* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Data"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Data"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ISMAP "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:effective-data-of-node($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ISMAP "yes"

DEFINE BUILTIN FUNCTION %{ fn:base-uri($arg as node()?) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.BaseURI"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE BUILTIN FUNCTION %{ fn:base-uri() as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.BaseURIStatic"

DEFINE BUILTIN FUNCTION %{ fn:document-uri($arg as node()?) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.DocumentURI"


(: TODO COMPILER DEFINE BUILTIN FUNCTION %{ fn-bea:unique-ID($srcval as node()) as xs:ID :)

(: The error Function :)

DEFINE BUILTIN FUNCTION %{ fn:error() (: as none :) %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Error"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:error($error as xs:QName) (: as none :) %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Error"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:error($error as xs:QName, $description as xs:string) (: as none :) %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Error"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:error($error as xs:QName, $description as xs:string, $error-object as item()*) (: as none :) %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Error"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:trace($value as item()*, $label as xs:string) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.debug.Trace"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
FUNCTION "no"
DUPLICATES "no"
DOCORDER "yes"
DATASOURCE "1"

(: Constructor Functions :)

(: QName Constructors :)

DEFINE BUILTIN FUNCTION %{ op-aug02:QName($paramLocal as xs:string) as xs:QName %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.aug02.QName"

(: + Functions, and Operators on Numbers :)

(: ++ Operators on Numeric Values :)

(: +++ op:numeric-add :)

DEFINE INTERNAL OPERATOR %{ op:integer-add($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:integer? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerAdd"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:decimal-add($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:decimal? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalAdd"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:float-add($operand1 as xs:float?, $operand2 as xs:float?) as xs:float? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatAdd"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:double-add($operand1 as xs:double?, $operand2 as xs:double?) as xs:double? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleAdd"
COMPILER COMMENT "changed signature to double"
COMMUTATIVE "yes"

(: op:numeric-subtract :)

DEFINE INTERNAL FUNCTION %{ op:integer-subtract($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:integer? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerSub"

DEFINE INTERNAL FUNCTION %{ op:decimal-subtract($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:decimal? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalSub"

DEFINE INTERNAL FUNCTION %{ op:float-subtract($operand1 as xs:float?, $operand2 as xs:float?) as xs:float? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatSub"

DEFINE INTERNAL FUNCTION %{ op:double-subtract($operand1 as xs:double?, $operand2 as xs:double?) as xs:double? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleSub"
COMPILER COMMENT "changed signature to double"

(: op:numeric-multiply :)

DEFINE INTERNAL FUNCTION %{ op:integer-multiply($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:integer? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerMul"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:decimal-multiply($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:decimal? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalMul"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:float-multiply($operand1 as xs:float?, $operand2 as xs:float?) as xs:float? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatMul"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:double-multiply($operand1 as xs:double?, $operand2 as xs:double?) as xs:double? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleMul"
COMPILER COMMENT "changed signature to double"
COMMUTATIVE "yes"

(: op:numeric-divide :)

DEFINE INTERNAL FUNCTION %{ op:integer-divide($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:decimal? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerDiv"

DEFINE INTERNAL FUNCTION %{ op:decimal-divide($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:decimal? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalDiv"

DEFINE INTERNAL FUNCTION %{ op:float-divide($operand1 as xs:float?, $operand2 as xs:float?) as xs:float? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatDiv"
RUNTIME COMMENT "TODO check IEEE semantics"

DEFINE INTERNAL FUNCTION %{ op:double-divide($operand1 as xs:double?, $operand2 as xs:double?) as xs:double? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleDiv"
COMPILER COMMENT "changed signature to double"
RUNTIME COMMENT "TODO check IEEE semantics"

(: op:numeric-integer-divide :)

DEFINE INTERNAL FUNCTION %{ op:integer-integer-divide($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:integer? %}
IMPLEMENTS OPERATOR "idiv"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerIDiv"

DEFINE INTERNAL FUNCTION %{ op:decimal-integer-divide($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:integer? %}
IMPLEMENTS OPERATOR "idiv"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalIDiv"

DEFINE INTERNAL FUNCTION %{ op:float-integer-divide($operand1 as xs:float?, $operand2 as xs:float?) as xs:integer? %}
IMPLEMENTS OPERATOR "idiv"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatIDiv"

DEFINE INTERNAL FUNCTION %{ op:double-integer-divide($operand1 as xs:double?, $operand2 as xs:double?) as xs:integer? %}
IMPLEMENTS OPERATOR "idiv"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleIDiv"

(: op:numeric-mod :)
(: TODO check semantics:)

DEFINE INTERNAL FUNCTION %{ op:integer-mod($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:integer? %}
IMPLEMENTS OPERATOR "mod"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerMod"

DEFINE INTERNAL FUNCTION %{ op:decimal-mod($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:decimal? %}
IMPLEMENTS OPERATOR "mod"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalMod"

DEFINE INTERNAL FUNCTION %{ op:float-mod($operand1 as xs:float?, $operand2 as xs:float?) as xs:float? %}
IMPLEMENTS OPERATOR "mod"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatMod"

DEFINE INTERNAL FUNCTION %{ op:double-mod($operand1 as xs:double?, $operand2 as xs:double?) as xs:double? %}
IMPLEMENTS OPERATOR "mod"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleMod"
COMPILER COMMENT "changed signature to double"

(: op:numeric-unary-plus :)

DEFINE INTERNAL FUNCTION %{ op:integer-unary-plus($operand as xs:integer?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"

DEFINE INTERNAL FUNCTION %{ op:decimal-unary-plus($operand as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"

DEFINE INTERNAL FUNCTION %{ op:float-unary-plus($operand as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"

DEFINE INTERNAL FUNCTION %{ op:double-unary-plus($operand as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.core.Identity"

(: op:numeric-unary-minus :)

DEFINE INTERNAL FUNCTION %{ op:integer-unary-minus($operand as xs:integer?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.IntegerUnaryMinus"

DEFINE INTERNAL FUNCTION %{ op:decimal-unary-minus($operand as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DecimalUnaryMinus"

DEFINE INTERNAL FUNCTION %{ op:float-unary-minus($operand as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.FloatUnaryMinus"

DEFINE INTERNAL FUNCTION %{ op:double-unary-minus($operand as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.arithmetic.DoubleUnaryMinus"

(: Comparisons of Numeric Values :)

(: op:numeric-equal :)

DEFINE INTERNAL FUNCTION %{ op-bea:integer-equal($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-equal($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:float-equal($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:double-equal($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleEqual"
COMMUTATIVE "yes"

(: op:numeric-less-than :)

DEFINE INTERNAL FUNCTION %{ op-bea:integer-less-than($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerLess"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-less-than($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalLess"

DEFINE INTERNAL FUNCTION %{ op-bea:float-less-than($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatLess"

DEFINE INTERNAL FUNCTION %{ op-bea:double-less-than($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleLess"

(: op:numeric-greater-than :)

DEFINE INTERNAL FUNCTION %{ op-bea:integer-greater-than($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerGreater"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-greater-than($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalGreater"

DEFINE INTERNAL FUNCTION %{ op-bea:float-greater-than($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatGreater"

DEFINE INTERNAL FUNCTION %{ op-bea:double-greater-than($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleGreater"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-bea:integer-less-than-or-equal($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-less-than-or-equal($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:float-less-than-or-equal($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:double-less-than-or-equal($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:integer-greater-than-or-equal($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-greater-than-or-equal($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:float-greater-than-or-equal($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:double-greater-than-or-equal($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:integer-not-equal($operand1 as xs:integer?, $operand2 as xs:integer?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne" FOR TYPES %{ xs:integer, xs:long, xs:int, xs:short, xs:byte %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.IntegerNotEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:decimal-not-equal($operand1 as xs:decimal?, $operand2 as xs:decimal?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DecimalNotEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:float-not-equal($operand1 as xs:float?, $operand2 as xs:float?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.FloatNotEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:double-not-equal($operand1 as xs:double?, $operand2 as xs:double?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.compare.DoubleNotEqual"

(: Functions on Numeric Values :)

DEFINE BUILTIN FUNCTION %{ fn:abs($arg as dt-bea:numeric?) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.Abs"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"
(: TODO compile-time dispatch of this function :)

DEFINE INTERNAL FUNCTION %{ op:double-abs($arg as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleAbs"

DEFINE INTERNAL FUNCTION %{ op:float-abs($arg as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatAbs"

DEFINE INTERNAL FUNCTION %{ op:decimal-abs($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalAbs"

DEFINE INTERNAL FUNCTION %{ op:integer-abs($arg as xs:integer?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.IntegerAbs"

DEFINE BUILTIN FUNCTION %{ fn:ceiling($arg as dt-bea:numeric?) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.Ceiling"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"
(: TODO compile-time dispatch of this function :)

DEFINE INTERNAL FUNCTION %{ op:double-ceiling($arg as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleCeiling"

DEFINE INTERNAL FUNCTION %{ op:float-ceiling($arg as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatCeiling"

DEFINE INTERNAL FUNCTION %{ op:decimal-ceiling($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalCeiling"

DEFINE BUILTIN FUNCTION %{ fn:floor($arg as dt-bea:numeric?) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.Floor"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"
(: TODO compile-time dispatch of this function :)

DEFINE INTERNAL FUNCTION %{ op:double-floor($arg as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleFloor"

DEFINE INTERNAL FUNCTION %{ op:float-floor($arg as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatFloor"

DEFINE INTERNAL FUNCTION %{ op:decimal-floor($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalFloor"

DEFINE BUILTIN FUNCTION %{ fn:round($arg as dt-bea:numeric?) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.Round"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"
RUNTIME COMMENT "check for NaN, INF, etc."
(: TODO compile-time dispatch of this function :)

DEFINE INTERNAL FUNCTION %{ op:double-round($arg as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleRound"

DEFINE INTERNAL FUNCTION %{ op:float-round($arg as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatRound"

DEFINE INTERNAL FUNCTION %{ op:decimal-round($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalRound"

DEFINE BUILTIN FUNCTION %{ fn:round-half-to-even($arg as dt-bea:numeric?) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.RoundHalfToEven"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"
(: TODO compile-time dispatch of this function :)

DEFINE INTERNAL FUNCTION %{ op:double-round-half-to-even($arg as xs:double?) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleRoundHalfToEven"

DEFINE INTERNAL FUNCTION %{ op:float-round-half-to-even($arg as xs:float?) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatRoundHalfToEven"

DEFINE INTERNAL FUNCTION %{ op:decimal-round-half-to-even($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalRoundHalfToEven"

DEFINE BUILTIN FUNCTION %{ fn:round-half-to-even($arg as dt-bea:numeric?, $precision as xs:integer) as dt-bea:numeric? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.RoundHalfToEven"
TYPECHECKED BY "weblogic.xml.query.runtime.numeric.GenericNumericFunction$TypeCheck"

DEFINE INTERNAL FUNCTION %{ op:double-round-half-to-even($arg as xs:double?, $precision as xs:integer) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DoubleRoundHalfToEven"

DEFINE INTERNAL FUNCTION %{ op:float-round-half-to-even($arg as xs:float?, $precision as xs:integer) as xs:float? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.FloatRoundHalfToEven"

DEFINE INTERNAL FUNCTION %{ op:decimal-round-half-to-even($arg as xs:decimal?, $precision as xs:integer) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.DecimalRoundHalfToEven"

(: xqrl Extensions :)

DEFINE BUILTIN FUNCTION %{ fn-bea:decimal-round($arg as xs:decimal?, $scale as xs:integer?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.ext.BEADecimalRound"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:decimal-round($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.ext.BEADecimalRound"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:decimal-truncate($arg as xs:decimal?, $scale as xs:integer?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.ext.BEADecimalTruncate"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn-bea:decimal-truncate($arg as xs:decimal?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.ext.BEADecimalTruncate"
DATASOURCE "1"


(: Functions on Strings :)

(: Functions to Assemble and Disassemble Strings :)

DEFINE BUILTIN FUNCTION %{ fn:codepoints-to-string($arg as xs:integer*) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.CodepointsToString"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:string-to-codepoints($arg as xs:string?) as xs:integer* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringToCodepoints"
DATASOURCE "1"

(: Equality and Comparison of Strings :)

(: fn:compare :)

DEFINE BUILTIN FUNCTION %{ xf-aug02:compare($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.aug02.StringCompare"
COMMUTATIVE "yes"
RUNTIME COMMENT "Deprecated"

DEFINE BUILTIN FUNCTION %{ xf-aug02:compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collationLiteral as xs:anyURI) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.aug02.StringCompare"
RUNTIME COMMENT "Deprecated"

DEFINE BUILTIN FUNCTION %{ fn:compare($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Compare"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{ fn:compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Compare"
COMMUTATIVE "yes"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-bea:string-equal($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:string-less-than($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringLess"

DEFINE INTERNAL FUNCTION %{ op-bea:string-greater-than($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringGreater"

DEFINE INTERNAL FUNCTION %{ op-bea:string-less-than-or-equal($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:string-greater-than-or-equal($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:string-not-equal($operand1 as xs:string?, $operand2 as xs:string?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.compare.StringNotEqual"

(: Functions on String Values :)

DEFINE BUILTIN FUNCTION %{ fn:concat() as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringConcat"

DEFINE BUILTIN FUNCTION %{ fn:string-join($arg1 as xs:string*, $arg2 as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringJoin"

DEFINE BUILTIN FUNCTION %{ fn:substring($sourceString as xs:string?, $startingLoc as xs:double) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubString"

DEFINE INTERNAL FUNCTION %{ fn-bea:substring-int($sourceString as xs:string?, $startingLoc as xs:integer) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubString"

DEFINE BUILTIN FUNCTION %{ fn:substring($sourceString as xs:string?, $startingLoc as xs:double, $length as xs:double) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubString"

DEFINE INTERNAL FUNCTION %{ fn-bea:substring-int($sourceString as xs:string?, $startingLoc as xs:integer, $length as xs:integer) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubString"

DEFINE BUILTIN FUNCTION %{ fn:string-length($arg as xs:string?) as xs:integer %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringLength"

DEFINE BUILTIN FUNCTION %{ fn:normalize-space ($arg as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.NormalizeSpace"

DEFINE BUILTIN FUNCTION %{ fn:normalize-unicode ($arg as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.NormalizeUnicode"

DEFINE BUILTIN FUNCTION %{ fn:normalize-unicode ($arg as xs:string?, $normalizationForm as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.NormalizeUnicode"
RUNTIME COMMENT "no fully-normalized normal form"

DEFINE BUILTIN FUNCTION %{ fn:upper-case($arg as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.UpperCase"

DEFINE BUILTIN FUNCTION %{ fn:lower-case($arg as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.LowerCase"

DEFINE BUILTIN FUNCTION %{ fn:translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Translate"

DEFINE BUILTIN FUNCTION %{ fn:escape-uri($uri-part as xs:string?, $escape-reserved as xs:boolean) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.EscapeURI"

DEFINE BUILTIN FUNCTION %{ xf-aug02:string-pad($padString as xs:string?, $padCount as xs:decimal?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringPad"

DEFINE BUILTIN FUNCTION %{ fn:contains($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Contains"

DEFINE BUILTIN FUNCTION %{ fn:contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Contains"

DEFINE BUILTIN FUNCTION %{ fn:starts-with($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StartsWith"

DEFINE BUILTIN FUNCTION %{ fn:starts-with( $arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StartsWith"

DEFINE BUILTIN FUNCTION %{ fn:ends-with( $arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.EndsWith"

DEFINE BUILTIN FUNCTION %{ fn:ends-with( $arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.EndsWith"

DEFINE BUILTIN FUNCTION %{ fn:substring-before( $arg1 as xs:string?, $arg2 as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubstringBefore"

DEFINE BUILTIN FUNCTION %{ fn:substring-before( $arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubstringBefore"

DEFINE BUILTIN FUNCTION %{ fn:substring-after( $arg1 as xs:string?, $arg2 as xs:string?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubstringAfter"

DEFINE BUILTIN FUNCTION %{ fn:substring-after( $arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.SubstringAfter"

DEFINE BUILTIN FUNCTION %{ fn:matches($input as xs:string?, $pattern as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringMatch"

DEFINE BUILTIN FUNCTION %{ fn:matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringMatch"

DEFINE BUILTIN FUNCTION %{ fn:replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringReplace"

DEFINE BUILTIN FUNCTION %{ fn:replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringReplace"

DEFINE BUILTIN FUNCTION %{ fn:tokenize($input as xs:string?, $pattern as xs:string) as xs:string+ %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringTokenize"

DEFINE BUILTIN FUNCTION %{ fn:tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string+ %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.StringTokenize"

(: Functions, and Operators for anyURI :)

DEFINE BUILTIN FUNCTION %{ fn:resolve-uri($relative as xs:string?) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.uri.ResolveURI"

DEFINE BUILTIN FUNCTION %{ fn:resolve-uri($relative as xs:string?, $base as xs:string) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.uri.ResolveURI"

DEFINE BUILTIN FUNCTION %{ xf-aug02:resolve-URI($base as xs:anyURI, $relative as xs:anyURI) as xs:anyURI %}
IMPLEMENTED BY "weblogic.xml.query.runtime.uri.aug02.ResolveURI"

DEFINE INTERNAL FUNCTION %{ op:anyURI-equal($arg1 as xs:anyURI?, $arg2 as xs:anyURI?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.uri.compare.AnyURIEqual"
COMMUTATIVE "yes"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-bea:anyURI-not-equal($operand1 as xs:anyURI?, $operand2 as xs:anyURI?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.uri.compare.AnyURINotEqual"

(: Functions and Operators on Booleans :)

(: Boolean Constructor Functions :)

DEFINE BUILTIN FUNCTION %{ fn:true() as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.TrueIterator"

DEFINE BUILTIN FUNCTION %{ fn:false() as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.FalseIterator"

(: Operators on Boolean Values :)

DEFINE INTERNAL FUNCTION %{ op:boolean-equal($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:boolean-less-than($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanLess"

DEFINE INTERNAL FUNCTION %{ op:boolean-greater-than($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanGreater"

DEFINE INTERNAL FUNCTION %{ op-bea:boolean-not-equal($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op-bea:boolean-less-than-or-equal($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanLessEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:boolean-greater-than-or-equal($value1 as xs:boolean?, $value2 as xs:boolean?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.compare.BooleanGreaterEqual"

(: Functions on Boolean Values :)

DEFINE BUILTIN FUNCTION %{ fn:not($arg as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.XqrlNOT"

(: xqrl Additions :)


DEFINE INTERNAL FUNCTION %{ op:boolean-and($value1 as item()*, $value2 as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.XqrlAND"
RUNTIME COMMENT "dropped in 03/2002, remove"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:boolean-or($value1 as item()*, $value2 as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.XqrlOR"
RUNTIME COMMENT "dropped in 03/2002, remove"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:not3($arg as xs:boolean?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.XqrlNOT3"
RUNTIME COMMENT "dropped in 03/2002, remove"

(: Functions and Operators on Durations, Dates and Times :)

(: Comparisons of Duration, Date and Time Values :)

DEFINE INTERNAL FUNCTION %{ op:duration-equal($operand1 as xs:duration?, $operand2 as xs:duration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DurationEqual"
COMMUTATIVE "yes"
(: TODO RUNTIME this is not part of the spec :)

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-equal($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-less-than($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationLess"

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-greater-than($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationGreater"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-equal($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-less-than($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationLess"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-greater-than($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationGreater"

DEFINE INTERNAL FUNCTION %{ op:dateTime-equal($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:dateTime-less-than($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeLess"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:dateTime-greater-than($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeGreater"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-equal($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-less-than($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateLess"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-greater-than($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateGreater"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-equal($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-less-than($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "lt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeLess"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-greater-than($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "gt"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeGreater"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:gYearMonth-equal($operand1 as xs:gYearMonth?, $operand2 as xs:gYearMonth?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gYear-equal($operand1 as xs:gYear?, $operand2 as xs:gYear?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gMonthDay-equal($operand1 as xs:gMonthDay?, $operand2 as xs:gMonthDay?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.MonthDayEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gMonth-equal($operand1 as xs:gMonth?, $operand2 as xs:gMonth?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.MonthEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gDay-equal($operand1 as xs:gDay?, $operand2 as xs:gDay?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayEqual"
COMMUTATIVE "yes"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op:duration-not-equal($operand1 as xs:duration?, $operand2 as xs:duration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DurationNotEqual"
COMMUTATIVE "yes"
(: TODO RUNTIME see duration-equal :)

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-less-than-or-equal($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationLessEqual"

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-greater-than-or-equal($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op:yearMonthDuration-not-equal($operand1 as xdt:yearMonthDuration?, $operand2 as xdt:yearMonthDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthDurationNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-less-than-or-equal($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationLessEqual"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-greater-than-or-equal($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationGreaterEqual"

DEFINE INTERNAL FUNCTION %{ op:dayTimeDuration-not-equal($operand1 as xdt:dayTimeDuration?, $operand2 as xdt:dayTimeDuration?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayTimeDurationNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:dateTime-less-than-or-equal($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeLessEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:dateTime-greater-than-or-equal($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeGreaterEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:dateTime-not-equal($operand1 as xs:dateTime?, $operand2 as xs:dateTime?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateTimeNotEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-less-than-or-equal($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateLessEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-greater-than-or-equal($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateGreaterEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:date-not-equal($operand1 as xs:date?, $operand2 as xs:date?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DateNotEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-less-than-or-equal($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "le"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeLessEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-greater-than-or-equal($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ge"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeGreaterEqual"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:time-not-equal($operand1 as xs:time?, $operand2 as xs:time?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.TimeNotEqual"
COMMUTATIVE "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ op:gYearMonth-not-equal($operand1 as xs:gYearMonth?, $operand2 as xs:gYearMonth?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearMonthNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gYear-not-equal($operand1 as xs:gYear?, $operand2 as xs:gYear?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.YearNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gMonthDay-not-equal($operand1 as xs:gMonthDay?, $operand2 as xs:gMonthDay?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.MonthDayNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gMonth-not-equal($operand1 as xs:gMonth?, $operand2 as xs:gMonth?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.MonthNotEqual"
COMMUTATIVE "yes"

DEFINE INTERNAL FUNCTION %{ op:gDay-not-equal($operand1 as xs:gDay?, $operand2 as xs:gDay?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.compare.DayNotEqual"
COMMUTATIVE "yes"

(: Component Extraction Functions on Duration, Date and Time Values :)

DEFINE BUILTIN FUNCTION %{ fn:years-from-duration($srcval as xdt:yearMonthDuration?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetYearsFromYearMonthDuration"

DEFINE BUILTIN FUNCTION %{ fn:months-from-duration($srcval as xdt:yearMonthDuration?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMonthsFromYearMonthDuration"

DEFINE BUILTIN FUNCTION %{ fn:days-from-duration($srcval as xdt:dayTimeDuration?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetDaysFromDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ fn:hours-from-duration($srcval as xdt:dayTimeDuration?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetHoursFromDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ fn:minutes-from-duration($srcval as xdt:dayTimeDuration?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMinutesFromDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ fn:seconds-from-duration($srcval as xdt:dayTimeDuration?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetSecondsFromDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ fn:year-from-dateTime($srcval as xs:dateTime?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetYearFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:month-from-dateTime($srcval as xs:dateTime?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMonthFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:day-from-dateTime($srcval as xs:dateTime?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetDayFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:hours-from-dateTime($srcval as xs:dateTime?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetHoursFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:minutes-from-dateTime($srcval as xs:dateTime?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMinutesFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:seconds-from-dateTime($srcval as xs:dateTime?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetSecondsFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:timezone-from-dateTime($srcval as xs:dateTime?) as xdt:dayTimeDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetTimezoneFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn:year-from-date($srcval as xs:date?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetYearFromDate"

DEFINE BUILTIN FUNCTION %{ fn:month-from-date($srcval as xs:date?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMonthFromDate"

DEFINE BUILTIN FUNCTION %{ fn:day-from-date($srcval as xs:date?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetDayFromDate"

DEFINE BUILTIN FUNCTION %{ fn:timezone-from-date($srcval as xs:date?) as xdt:dayTimeDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetTimezoneFromDate"

DEFINE BUILTIN FUNCTION %{ fn:hours-from-time($srcval as xs:time?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetHoursFromTime"

DEFINE BUILTIN FUNCTION %{ fn:minutes-from-time($srcval as xs:time?) as xs:integer? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetMinutesFromTime"

DEFINE BUILTIN FUNCTION %{ fn:seconds-from-time($srcval as xs:time?) as xs:decimal? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetSecondsFromTime"

DEFINE BUILTIN FUNCTION %{ fn:timezone-from-time($srcval as xs:time?) as xdt:dayTimeDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.GetTimezoneFromTime"

(: Arithmetic Functions on durations :)

DEFINE INTERNAL FUNCTION %{ op:add-yearMonthDurations($srcval1 as xdt:yearMonthDuration?, $srcval2 as xdt:yearMonthDuration?) as xdt:yearMonthDuration? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddYearMonthDurations"

DEFINE INTERNAL FUNCTION %{ op:subtract-yearMonthDurations($srcval1 as xdt:yearMonthDuration?, $srcval2 as xdt:yearMonthDuration?) as xdt:yearMonthDuration? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractYearMonthDurations"

DEFINE INTERNAL FUNCTION %{ op:multiply-yearMonthDuration($srcval1 as xdt:yearMonthDuration?, $srcval2 as xs:double?) as xdt:yearMonthDuration? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.MultiplyYearMonthDuration"

DEFINE INTERNAL FUNCTION %{ op:divide-yearMonthDuration($srcval1 as xdt:yearMonthDuration?, $srcval2 as xs:double?) as xdt:yearMonthDuration? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.DivideYearMonthDuration"

DEFINE INTERNAL FUNCTION %{ op:divide-yearMonthDuration-by-yearMonthDuration($srcval1 as xdt:yearMonthDuration?, $srcval2 as xdt:yearMonthDuration?) as xs:decimal? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.DivideYearMonthDurationByYearMonthDuration"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDurations($srcval1 as xdt:dayTimeDuration?, $srcval2 as xdt:dayTimeDuration?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurations"

DEFINE INTERNAL FUNCTION %{ op:subtract-dayTimeDurations($srcval1 as xdt:dayTimeDuration?, $srcval2 as xdt:dayTimeDuration?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDayTimeDurations"

DEFINE INTERNAL FUNCTION %{ op:multiply-dayTimeDuration($srcval1 as xdt:dayTimeDuration?, $srcval2 as xs:double?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.MultiplyDayTimeDuration"

DEFINE INTERNAL FUNCTION %{ op:divide-dayTimeDuration($srcval1 as xdt:dayTimeDuration?, $srcval2 as xs:double?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.DivideDayTimeDuration"

DEFINE INTERNAL FUNCTION %{ op:divide-dayTimeDuration-by-dayTimeDuration($srcval1 as xdt:dayTimeDuration?, $srcval2 as xdt:dayTimeDuration?) as xs:decimal? %}
IMPLEMENTS OPERATOR "div"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.DivideDayTimeDurationByDayTimeDuration"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op:multiply-yearMonthDuration-BA($srcval2 as xs:double?, $srcval1 as xdt:yearMonthDuration?) as xdt:yearMonthDuration? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.MultiplyYearMonthDurationBA"

DEFINE INTERNAL FUNCTION %{ op:multiply-dayTimeDuration-BA($srcval2 as xs:double?, $srcval1 as xdt:dayTimeDuration?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "mul"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.MultiplyDayTimeDurationBA"

(: Timezone Adjustment on dateTime, date and time Values :)

DEFINE BUILTIN FUNCTION %{ fn:adjust-dateTime-to-timezone( $arg as xs:dateTime?) as xs:dateTime? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustDateTimeToTimezone"

DEFINE BUILTIN FUNCTION %{ fn:adjust-dateTime-to-timezone( $arg as xs:dateTime?, $timezone as xdt:dayTimeDuration?) as xs:dateTime? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustDateTimeToTimezone"

DEFINE BUILTIN FUNCTION %{ fn:adjust-date-to-timezone( $arg as xs:date?) as xs:date? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustDateToTimezone"

DEFINE BUILTIN FUNCTION %{ fn:adjust-date-to-timezone( $arg as xs:date?, $timezone as xdt:dayTimeDuration?) as xs:date? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustDateToTimezone"

DEFINE BUILTIN FUNCTION %{ fn:adjust-time-to-timezone( $arg as xs:time?) as xs:time? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustTimeToTimezone"

DEFINE BUILTIN FUNCTION %{ fn:adjust-time-to-timezone( $arg as xs:time?, $timezone as xdt:dayTimeDuration?) as xs:time? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AdjustTimeToTimezone"

(: Timezone Functions on dateTime, date, and time :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-dateTime($srcval as xs:dateTime) as xs:dateTime %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToDateTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-dateTime($srcval as xs:dateTime, $timezone as xdt:dayTimeDuration) as xs:dateTime %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToDateTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:remove-timezone-from-dateTime($srcval as xs:dateTime) as xs:dateTime %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.RemoveTimezoneFromDateTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:remove-timezone-from-dateTime($srcval as xs:dateTime, $timezone as xdt:dayTimeDuration) as xs:dateTime %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.RemoveTimezoneFromDateTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-date($srcval as xs:date) as xs:date %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToDate"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-date($srcval as xs:date, $timezone as xdt:dayTimeDuration) as xs:date %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToDate"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-time($srcval as xs:time) as xs:time %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:add-timezone-to-time($srcval as xs:time, $timezone as xdt:dayTimeDuration) as xs:time %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.AddTimezoneToTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:remove-timezone-from-time($srcval as xs:time) as xs:time %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.RemoveTimezoneFromTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)

DEFINE BUILTIN FUNCTION %{ fn-bea:remove-timezone-from-time($srcval as xs:time, $timezone as xdt:dayTimeDuration) as xs:time %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.RemoveTimezoneFromTime"
FUNCTION "no" (: this acutally depends on the way the implicit timezone is implemented :)


(: Arithmetic Functions on Durations, Dates and Times :)

DEFINE BUILTIN FUNCTION %{ fn:subtract-dateTimes-yielding-yearMonthDuration( $arg1 as xs:dateTime?, $arg2 as xs:dateTime?) as xdt:yearMonthDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDateTimesYieldingYearMonthDuration"

DEFINE BUILTIN FUNCTION %{ fn:subtract-dateTimes-yielding-dayTimeDuration( $arg1 as xs:dateTime?, $arg2 as xs:dateTime?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDateTimesYieldingDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ fn:subtract-dates-yielding-yearMonthDuration($srcval1 as xs:date?, $srcval2 as xs:date?) as xdt:yearMonthDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDatesYieldingYearMonthDuration"

DEFINE BUILTIN FUNCTION %{ fn:subtract-dates-yielding-dayTimeDuration($srcval1 as xs:date?, $srcval2 as xs:date?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDatesYieldingDayTimeDuration"

DEFINE BUILTIN FUNCTION %{ op:subtract-times($srcval1 as xs:time?, $srcval2 as xs:time?) as xdt:dayTimeDuration? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractTimes"

DEFINE INTERNAL FUNCTION %{ op:add-yearMonthDuration-to-dateTime($srcval1 as xs:dateTime?, $srcval as xdt:yearMonthDuration?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddYearMonthDurationToDateTime"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-dateTime($srcval1 as xs:dateTime?, $srcval as xdt:dayTimeDuration?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToDateTime"

DEFINE INTERNAL FUNCTION %{ op:subtract-yearMonthDuration-from-dateTime($srcval1 as xs:dateTime?, $srcval as xdt:yearMonthDuration?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractYearMonthDurationFromDateTime"

DEFINE INTERNAL FUNCTION %{ op:subtract-dayTimeDuration-from-dateTime($srcval1 as xs:dateTime?, $srcval as xdt:dayTimeDuration?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDayTimeDurationFromDateTime"

DEFINE INTERNAL FUNCTION %{ op:add-yearMonthDuration-to-date($srcval1 as xs:date?, $srcval as xdt:yearMonthDuration?) as xs:date? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddYearMonthDurationToDate"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-date($srcval1 as xs:date?, $srcval as xdt:dayTimeDuration?) as xs:date? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToDate"

DEFINE INTERNAL FUNCTION %{ op:subtract-yearMonthDuration-from-date($srcval1 as xs:date?, $srcval as xdt:yearMonthDuration?) as xs:date? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractYearMonthDurationFromDate"

DEFINE INTERNAL FUNCTION %{ op:subtract-dayTimeDuration-from-date($srcval1 as xs:date?, $srcval as xdt:dayTimeDuration?) as xs:date? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDayTimeDurationFromDate"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-time($srcval1 as xs:time?, $srcval as xdt:dayTimeDuration?) as xs:time? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToTime"

DEFINE INTERNAL FUNCTION %{ op:subtract-dayTimeDuration-from-time($srcval1 as xs:time?, $srcval as xdt:dayTimeDuration?) as xs:time? %}
IMPLEMENTS OPERATOR "sub"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.SubtractDayTimeDurationFromTime"

DEFINE BUILTIN FUNCTION %{ xf-aug02:get-yearMonthDuration-from-dateTimes($srcval1 as xs:dateTime, $srcval2 as xs:dateTime) as xdt:yearMonthDuration %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.aug02.GetYearMonthDurationFromDateTimes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:get-dayTimeDuration-from-dateTimes($srcval1 as xs:dateTime, $srcval2 as xs:dateTime) as xdt:dayTimeDuration %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.aug02.GetDayTimeDurationFromDateTimes"


(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op:add-yearMonthDuration-to-dateTime-BA($srcval as xdt:yearMonthDuration?, $srcval1 as xs:dateTime?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddYearMonthDurationToDateTimeBA"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-dateTime-BA($srcval as xdt:dayTimeDuration?, $srcval1 as xs:dateTime?) as xs:dateTime? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToDateTimeBA"

DEFINE INTERNAL FUNCTION %{ op:add-yearMonthDuration-to-date-BA($srcval as xdt:yearMonthDuration?, $srcval1 as xs:date?) as xs:date? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddYearMonthDurationToDateBA"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-date-BA($srcval as xdt:dayTimeDuration?, $srcval1 as xs:date?) as xs:date? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToDateBA"

DEFINE INTERNAL FUNCTION %{ op:add-dayTimeDuration-to-time-BA($srcval as xdt:dayTimeDuration?, $srcval1 as xs:time?) as xs:time? %}
IMPLEMENTS OPERATOR "add"
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.arithmetic.AddDayTimeDurationToTimeBA"

(: Functions on QNames :)

(: Constructor Functions for QNames :)

DEFINE BUILTIN FUNCTION %{ fn:resolve-QName($qname as xs:string?, $element as element()) as xs:QName? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.ResolveQName"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE BUILTIN FUNCTION %{ fn:expanded-QName($paramURI as xs:string?, $paramLocal as xs:string) as xs:QName %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.ExpandedQName"

DEFINE BUILTIN FUNCTION %{ fn-bea:QName-from-string($param as xs:string) as xs:QName %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.QNameFromString"
RUNTIME COMMENT "remove"

(: Functions on QNames :)

DEFINE INTERNAL FUNCTION %{ op:QName-equal($operand1 as xs:QName?, $operand2 as xs:QName?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.compare.QNameEqual"

DEFINE BUILTIN FUNCTION %{ fn:local-name-from-QName($arg as xs:QName?) as xs:NCName? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.QNameGetLocalName"

DEFINE BUILTIN FUNCTION %{ fn:namespace-uri-from-QName($arg as xs:QName?) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.GetNamespaceURIFromQName"

DEFINE BUILTIN FUNCTION %{ fn:namespace-uri-for-prefix($prefix as xs:string, $element as element()) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.NamespaceURIForPrefix"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE BUILTIN FUNCTION %{ fn:in-scope-prefixes($element as element()) as xs:string* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.InScopePrefixes"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE BUILTIN FUNCTION %{ xf-aug02:get-namespace-from-QName($arg as xs:QName?) as xs:anyURI? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.aug02.QNameGetNamespace"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-bea:QName-not-equal($operand1 as xs:QName?, $operand2 as xs:QName?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.qname.compare.QNameNotEqual"

(: Functions and Operators on base64Binary and hexBinary :)

DEFINE INTERNAL FUNCTION %{ op:hexBinary-equal($value1 as xs:hexBinary?, $value2 as xs:hexBinary?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.binary.compare.HexBinaryEqual"

DEFINE INTERNAL FUNCTION %{ op:base64Binary-equal($value1 as xs:base64Binary?, $value2 as xs:base64Binary?) as xs:boolean? %}
IMPLEMENTS OPERATOR "eq"
IMPLEMENTED BY "weblogic.xml.query.runtime.binary.compare.Base64BinaryEqual"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-bea:hexBinary-not-equal($value1 as xs:hexBinary?, $value2 as xs:hexBinary?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.binary.compare.HexBinaryNotEqual"

DEFINE INTERNAL FUNCTION %{ op-bea:base64Binary-not-equal($value1 as xs:base64Binary?, $value2 as xs:base64Binary?) as xs:boolean? %}
IMPLEMENTS OPERATOR "ne"
IMPLEMENTED BY "weblogic.xml.query.runtime.binary.compare.Base64BinaryNotEqual"

(: Functions and Operators on NOTATION :)

(: TODO DEFINE INTERNAL FUNCTION %{ op:NOTATION-equal($value1 as xs:NOTATION?, $value2 as xs:NOTATION?) as xs:boolean? %} :)

(: Functions and Operators on Nodes :)

DEFINE BUILTIN FUNCTION %{ fn:name($srcval as node()?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Name"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "1"

DEFINE BUILTIN FUNCTION %{ fn:local-name($arg as node()?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.LocalName"

DEFINE BUILTIN FUNCTION %{ fn:namespace-uri($srcval as node()?) as xs:anyURI %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.NamespaceUri"

DEFINE BUILTIN FUNCTION %{ fn:number($arg as xdt:anyAtomicType?) as xs:double %}
IMPLEMENTED BY "weblogic.xml.query.runtime.numeric.Number"

DEFINE BUILTIN FUNCTION %{ fn:lang($testlang as xs:string?, $node as node()) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.Lang"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE INTERNAL FUNCTION %{ op:is-same-node($parameter1 as node()?, $parameter2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.IsSameNode"
IDTYPE "thin"
COMMUTATIVE "yes"
RUNTIME COMMENT "Signature different from F&O spec to match XQuery spec."

DEFINE INTERNAL FUNCTION %{ op:is-not-same-node($parameter1 as node()?, $parameter2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.IsNotSameNode"
IDTYPE "thin"
COMMUTATIVE "yes"
RUNTIME COMMENT "Signature different from F&O spec op:is-same-node to match XQuery spec, though this is not part of the F&O spec."

DEFINE INTERNAL FUNCTION %{ op:node-before($arg1 as node()?, $arg2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.NodeBefore"
RUNTIME COMMENT "Signature different from F&O spec to match XQuery spec."
IDTYPE "thin"

DEFINE INTERNAL FUNCTION %{ op:node-after($arg1 as node()?, $arg2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.NodeAfter"
RUNTIME COMMENT "Signature different from F&O spec to match XQuery spec."
IDTYPE "thin"

DEFINE BUILTIN FUNCTION %{ fn:root($arg as node()?) as node()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.navigation.Root"
IDTYPE "thick"
NAVIGATION "yes"
MAX LEVEL UP "inf"

DEFINE BUILTIN FUNCTION %{ xf-aug02:name($srcval as node()?) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.Name"
RUNTIME COMMENT "the uri->prefix resolution does not work yet"

DEFINE INTERNAL FUNCTION %{ op-aug02:node-equal($arg1 as node()?, $arg2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.NodeEqual"
IDTYPE "thin"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{xf-aug02:deep-equal($arg1 as node()?, $arg2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.DeepEqual"
IDTYPE "thin"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{xf-aug02:deep-equal($arg1 as node()?, $arg2 as node()?, $collation as xs:anyURI) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.DeepEqual"
RUNTIME COMMENT "no collation"
IDTYPE "thin"

DEFINE BUILTIN FUNCTION %{ xf-aug02:copy($arg as node()?) as node()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.Copy"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Copy"
NEWNODES "yes"

(: xqrl Additions :)

DEFINE INTERNAL FUNCTION %{ op-aug02:node-not-equal($arg1 as node()?, $arg2 as node()?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.aug02.NodeNotEqual"
IDTYPE "thin"
COMMUTATIVE "yes"

(: Functions and Operators on Sequences :)

(: General Functions and Operators on Sequences :)

DEFINE BUILTIN FUNCTION %{ fn:boolean($srcval as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.BoolEffValue"
(:IGNORES INPUT ORDER "yes":)
IGNORES INPUT DUPLICATES "yes"

DEFINE BUILTIN FUNCTION %{ op:concatenate() as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.UnionAll"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$UnionAll"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "all"

DEFINE BUILTIN FUNCTION %{ fn:index-of($seqParam as xdt:anyAtomicType*, $srchParam as xdt:anyAtomicType) as xs:integer* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.IndexOf"

DEFINE BUILTIN FUNCTION %{ fn:index-of($seqParam as xdt:anyAtomicType*, $srchParam as xdt:anyAtomicType, $collation as xs:string) as xs:integer* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.IndexOf"

DEFINE BUILTIN FUNCTION %{ fn:empty($arg as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.CheckEmpty"
IGNORES INPUT ORDER "yes"
IGNORES INPUT DUPLICATES "yes"

DEFINE BUILTIN FUNCTION %{ fn:exists($arg as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Exists"
IGNORES INPUT ORDER "yes"
IGNORES INPUT DUPLICATES "yes"

DEFINE BUILTIN FUNCTION %{ fn:distinct-values($arg as xdt:anyAtomicType*) as xdt:anyAtomicType* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.DistinctValues"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$DistinctValues"
RUNTIME COMMENT "specific semantics of durations/timezones"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:distinct-values($arg as xdt:anyAtomicType*, $collationLiteral as xs:string) as xdt:anyAtomicType* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.DistinctValues"
RUNTIME COMMENT "specific semantics of durations/timezones"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:insert-before($target as item()*, $position as xs:integer, $inserts as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.InsertBefore"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$InsertBefore"
DATASOURCE "1 3"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"


DEFINE BUILTIN FUNCTION %{ fn:remove($target as item()*, $position as xs:integer) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Remove"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Remove"
DUPLICATES "preserve"
DOCORDER "preserve"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:reverse($target as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Reverse"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.Reverse$TypeCheck"
DUPLICATES "preserve"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:subsequence($sourceSeq as item()*, $startingLoc as xs:double) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Subsequence"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Subsequence"
DUPLICATES "preserve"
DOCORDER "preserve"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ fn:subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Subsequence"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Subsequence"
DUPLICATES "preserve"
DOCORDER "preserve"
DATASOURCE "1"

DEFINE INTERNAL FUNCTION %{ fn:unordered($arg1 as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Self"
DOCORDER "yes"
FUNCTION "no"
NEWNODES "no"
DATASOURCE "1"

(: Functions That Test the Cardinality of Sequences :)

DEFINE BUILTIN FUNCTION %{ fn:zero-or-one($arg as item()*) as item()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.ZeroOrOne"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.ZeroOrOne$TypeCheck"

DEFINE BUILTIN FUNCTION %{ fn:one-or-more($arg as item()*) as item()+ %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.OneOrMore"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.OneOrMore$TypeCheck"

DEFINE BUILTIN FUNCTION %{ fn:exactly-one($arg as item()*) as item() %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.ExactlyOne"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.ExactlyOne$TypeCheck"

(: Equals, Union, Intersection and Except :)

DEFINE BUILTIN FUNCTION %{ fn:deep-equal($parameter1 as item()*, $parameter2 as item()*) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.DeepEqual"
IDTYPE "thin"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{ fn:deep-equal( $parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) as xs:boolean %}
IMPLEMENTED BY "weblogic.xml.query.runtime.node.DeepEqual"
RUNTIME COMMENT "no collation"
IDTYPE "thin"

DEFINE INTERNAL FUNCTION %{ op:union($parameter1 as node()*, $parameter2 as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Union"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.Union$TypeCheck"
IDTYPE "thick"
COMMUTATIVE "yes"
DOCORDER "yes"
DATASOURCE "1 2"

DEFINE INTERNAL OPERATOR %{ op:intersect($parameter1 as node()*, $parameter2 as node()*) as node()* %}
IMPLEMENTS OPERATOR "intersect"
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Intersect"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.Intersect$TypeCheck"
IDTYPE "thin"
COMMUTATIVE "yes"
PUSH IGNORES DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
DATASOURCE "1 2"

DEFINE INTERNAL FUNCTION %{ op:except($parameter1 as node()*, $parameter2 as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Except"
TYPECHECKED BY "weblogic.xml.query.runtime.sequences.Except$TypeCheck"
IDTYPE "thick"
COMMUTATIVE "yes"
DOCORDER "yes"
DATASOURCE "1"

(: Old or BEA specific Functions on Sequences :)

DEFINE INTERNAL FUNCTION %{ op:item-at($seqParam as item()*, $posParam as xs:decimal) as item()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.ItemAt"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Nth"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ xf-aug02:generic-index-of($seqParam as item()*, $srchParam as item()) as xs:unsignedInt* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.IndexOf"

DEFINE BUILTIN FUNCTION %{ xf-aug02:generic-index-of($seqParam as item()*, $srchParam as item(), $collationLiteral as xs:anyURI) as xs:unsignedInt* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.IndexOf"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ xf-aug02:distinct-nodes($arg as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.DistinctNodes"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$DistinctNodes"
RUNTIME COMMENT "specific semantics of durations/timezones"
DUPLICATES "no"
DOCORDER "preserve"
IDTYPE "thin"
IGNORES INPUT DUPLICATES "yes"
PUSH IGNORES ORDER "yes"
ANCESTORS "preserve"
DATASOURCE "1"

DEFINE BUILTIN FUNCTION %{ xf-aug02:sequence-deep-equal($parameter1 as item()*, $parameter2 as item()*) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.SeqDeepEqual"
IDTYPE "thin"
COMMUTATIVE "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:sequence-deep-equal($parameter1 as item()*, $ parameter2 as item()*, $collationLiteral as xs:anyURI) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.SeqDeepEqual"
IDTYPE "thin"

DEFINE BUILTIN FUNCTION %{ xf-aug02:sequence-node-equal($parameter1 as node()*, $parameter2 as node()*) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.SeqNodeEqual"
IDTYPE "thin"


(: Aggregate Functions :)

DEFINE BUILTIN FUNCTION %{ fn:count($arg as item()*) as xs:integer %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Count"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:avg($arg as xdt:anyAtomicType*) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Avg"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Avg"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:max($arg as xdt:anyAtomicType*) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Max"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:max($arg as xdt:anyAtomicType*, $collation as xs:string) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Max"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:min($arg as xdt:anyAtomicType*) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Min"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:min($arg as xdt:anyAtomicType*, $collation as xs:string) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Min"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:sum($arg as xdt:anyAtomicType*) as xdt:anyAtomicType %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Sum"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Sum"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ fn:sum( $arg as xdt:anyAtomicType*, $zero as xdt:anyAtomicType?) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Sum"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctions$Sum"
IGNORES INPUT ORDER "yes"

(: Old or BEA specific Aggregate Functions :)

DEFINE BUILTIN FUNCTION %{ xf-aug02:avg($arg as item()*) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Avg"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctionsAug02$AvgSum"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:max($srcval as item()*) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Max"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctionsAug02$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:max($srcval as item()*, $collationLiteral as xs:anyURI) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Max"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctionsAug02$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:min($srcval as item()*) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Min"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctionsAug02$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:min($srcval as item()*, $collationLiteral as xs:anyURI) as xdt:anyAtomicType? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Min"
TYPECHECKED BY "weblogic.xml.query.types.PolymorphicFunctionsAug02$MinMax"
RUNTIME COMMENT "no date/time, specific semantics of durations/timezones"
IGNORES INPUT ORDER "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:sum($arg as item()*) as xs:double? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Sum"
IGNORES INPUT ORDER "yes"

(: Functions and Operators that Generate Sequences :)

DEFINE INTERNAL FUNCTION %{ op:to($firstval as xs:integer, $lastval as xs:integer) as xs:integer* %}
IMPLEMENTS OPERATOR "to"
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.To"


DEFINE BUILTIN FUNCTION %{ fn:id($context as node(), $arg as xs:string*) as element()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Id"
NAVIGATION "yes"
MAX LEVEL UP "inf"

(: TODO DEFINE BUILTIN FUNCTION %{ fn-bea:idref($srcval as string*) as elementNode* %} :)

DEFINE BUILTIN FUNCTION %{ fn:doc($uri as xs:string?) as document-node()? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Doc"
FUNCTION "no"
NEWNODES "yes"

DEFINE BUILTIN FUNCTION %{ fn-bea:collection($srcval as xs:anyURI) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.Collection"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ xf-aug02:document($arg1 as xs:anyURI) as document-node() %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Document"
FUNCTION "no"
NEWNODES "yes"

DEFINE BUILTIN FUNCTION %{ xf-aug02:document($arg1 as xs:anyURI*, $arg2 as node()*) as node()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.sequences.aug02.Document"
RUNTIME COMMENT "new signature 03/2002"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
FUNCTION "no"

(: Context Functions :)

DEFINE BUILTIN FUNCTION %{ fn:position() as xs:integer %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn:last() as xs:integer %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"

DEFINE BUILTIN FUNCTION %{ fn:current-dateTime() as xs:dateTime %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.CurrentDateTime"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:current-date() as xs:date %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.CurrentDate"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:current-time() as xs:time %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.CurrentTime"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:default-collation() as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.DefaultCollation"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn:implicit-timezone() as xdt:dayTimeDuration? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ImplicitTimezone"
FUNCTION "no"

(: Relational Wrapper :)

DEFINE INTERNAL FUNCTION %{ fn-bea:execute-sql($datasource as xs:string, $rowElemName as xdt:anyAtomicType, $sql as xs:string) as element()* %}
IMPLEMENTED BY "com.bea.ld.wrappers.rdb.functions.ExecuteSQLRuntime"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:execute-sql-typed($datasource as xs:string, $rowElemName as xdt:anyAtomicType, $sql as xs:string) as element()* %}
IMPLEMENTED BY "com.bea.ld.wrappers.rdb.functions.ExecuteSQLTypedRuntime"
TYPECHECKED BY "com.bea.ld.wrappers.rdb.functions.ExecuteSQLTypedTyping"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:execute-sql-internal($datasource as xs:string, $outputNames as xs:QName*, $sql as xs:string) as item()* %}
IMPLEMENTED BY "com.bea.ld.wrappers.rdb.functions.ExecuteSQLInternalRuntime"
TYPECHECKED BY "com.bea.ld.wrappers.rdb.functions.ExecuteSQLInternalTyping"
DUPLICATES "no"
DOCORDER "yes"
NEWNODES "yes"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:get-sql($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:get-sql-formatted($arg as item()*) as item()* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
FUNCTION "no"

DEFINE INTERNAL FUNCTION %{ fn-bea:marshal-sql-like-pattern($pattern as xs:string?, $prefix as xs:string, $suffix as xs:string, $escapedChars as xs:string, $escapeChar as xs:string) as xs:string %}
IMPLEMENTED BY "com.bea.ld.wrappers.rdb.functions.MarshalSQLLikePattern"

DEFINE INTERNAL FUNCTION %{ fn-bea:get-plan($arg as item()*) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.Fake"
FUNCTION "no"

(: Access Control Functions :)
DEFINE BUILTIN FUNCTION %{ fn-bea:is-access-allowed($label as xs:string, $data_service as xs:string) as xs:boolean %}
IMPLEMENTED BY "com.bea.ld.security.IsAccessAllowed"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:is-user-in-role($arg as xs:string) as xs:boolean %}
IMPLEMENTED BY "com.bea.ld.security.IsInRole"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:is-user-in-group($arg as xs:string) as xs:boolean %}
IMPLEMENTED BY "com.bea.ld.security.IsInGroup"
FUNCTION "no"

DEFINE BUILTIN FUNCTION %{ fn-bea:userid() as xs:string %}
IMPLEMENTED BY "com.bea.ld.security.UserId"
FUNCTION "no"

(: BEA Extensions :)

DEFINE BUILTIN FUNCTION %{ fn-bea:date-from-dateTime($dateTime as xs:dateTime?) as xs:date? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.DateFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn-bea:time-from-dateTime($dateTime as xs:dateTime?) as xs:time? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.TimeFromDateTime"

DEFINE BUILTIN FUNCTION %{ fn-bea:date-from-string-with-format($format as xs:string?, $dateString as xs:string?) as xs:date? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.DateFromStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:dateTime-from-string-with-format($format as xs:string?, $dateTimeString as xs:string?) as xs:dateTime? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.DateTimeFromStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:time-from-string-with-format($format as xs:string?, $timeString as xs:string?) as xs:time? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.TimeFromStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:date-to-string-with-format($format as xs:string?, $date as xs:date?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.DateToStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:dateTime-to-string-with-format($format as xs:string?, $dateTime as xs:dateTime?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.DateTimeToStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:time-to-string-with-format($format as xs:string?, $time as xs:time?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.datetime.ext.TimeToStringWithFormat"

DEFINE BUILTIN FUNCTION %{ fn-bea:if-then-else($condition as xs:boolean?, $ifValue as xdt:anyAtomicType, $elseValue as xdt:anyAtomicType) as xdt:anyAtomicType %}
IMPLEMENTED BY "weblogic.xml.query.runtime.logic.ext.IfThenElse"

DEFINE BUILTIN FUNCTION %{ fn-bea:match($source as xs:string?, $regularExp as xs:string?) as xs:int* %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.ext.Match"

DEFINE BUILTIN FUNCTION %{ fn-bea:trim-left($arg as xs:string?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.TrimLeft"

DEFINE BUILTIN FUNCTION %{ fn-bea:trim-right($arg as xs:string?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.TrimRight"

DEFINE BUILTIN FUNCTION %{ fn-bea:trim($source as xs:string?) as xs:string? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.Trim"

DEFINE BUILTIN FUNCTION %{ fn-bea:sql-like($source as xs:string?, $pattern as xs:string?, $escape as xs:string?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.ext.SQLLike"

DEFINE BUILTIN FUNCTION %{ fn-bea:sql-like($source as xs:string?, $pattern as xs:string?) as xs:boolean? %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.ext.SQLLike"

DEFINE BUILTIN FUNCTION %{ fn-bea:serialize($input as item()*) as xs:string %}
IMPLEMENTED BY "weblogic.xml.query.runtime.strings.ext.Serialize"

(: Administrative Properties :)
DEFINE BUILTIN FUNCTION %{ fn-bea:get-property($propertyName as xs:string, $defaultValue as xs:string) as xs:string %}
IMPLEMENTED BY "com.bea.ld.admin.GetProperty"


