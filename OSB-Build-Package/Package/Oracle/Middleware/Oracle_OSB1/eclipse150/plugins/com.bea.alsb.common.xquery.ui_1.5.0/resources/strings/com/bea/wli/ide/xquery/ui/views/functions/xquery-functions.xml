<xqf:xquery-functions xmlns:xqf="http:/www.bea.com/wli/xqueryfunctions">
   <xqf:function-group nameKey="typeConversionFunctionGroup" helpId="type-conversion">
        <xqf:xquery-function>
            <function-name>string</function-name>
            <prefix>xs</prefix>
            <signature>xs:string($item*-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>item*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:string(item* <i>$item-var</i>) => xs:string<br>Converts the value of <i>$item-var</i> to a string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>decimal</function-name>
            <prefix>xs</prefix>
            <signature>xs:decimal($string-var)</signature>
            <return-type>decimal</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:decimal(xs:string <i>$string-var</i>) => xs:decimal<br>Converts <i>$string-var</i> (a string) to a decimal value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>integer</function-name>
            <prefix>xs</prefix>
            <signature>xs:integer($string-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:integer(xs:string <i>$string-var</i>) => xs:integer<br>Converts <i>$string-var</i> (a string) to an integer value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>long</function-name>
            <prefix>xs</prefix>
            <signature>xs:long($string-var)</signature>
            <return-type>long</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:long(xs:string <i>$string-var</i>) => xs:long<br>Converts <i>$string-var</i> (a string) to a long value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>int</function-name>
            <prefix>xs</prefix>
            <signature>xs:int($string-var)</signature>
            <return-type>int</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:int(xs:string <i>$string-var</i>) => xs:int<br>Converts <i>$string-var</i> (a string) to an int value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>short</function-name>
            <prefix>xs</prefix>
            <signature>xs:short($string-var)</signature>
            <return-type>short</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:short(xs:string <i>$string-var</i>) => xs:short<br>Converts <i>$string-var</i> (a string) to a short value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>byte</function-name>
            <prefix>xs</prefix>
            <signature>xs:byte($string-var)</signature>
            <return-type>byte</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:byte(xs:string <i>$string-var</i>) => xs:byte <br>Converts <i>$string-var</i> (a string) to a byte value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>float</function-name>
            <prefix>xs</prefix>
            <signature>xs:float($string-var)</signature>
            <return-type>float</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:float(xs:string <i>$string-var</i>) => xs:float<br>Converts <i>$string-var</i> (a string) to a 32 bit floating point value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>double</function-name>
            <prefix>xs</prefix>
            <signature>xs:double($string-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:double(xs:string <i>$string-var</i>) => xs:double<br>Converts <i>$string-var</i> (a string) to a double precision (64 bit) floating point value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>number</function-name>
            <prefix>fn</prefix>
            <signature>fn:number($node-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>node</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:number(fn:node <i>$node-var</i>) => xs:double<br>Converts the value of <i>$node-var</i> (XML element) to a double precision floating point value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>integer-sequence</function-name>
            <prefix>bea-xf</prefix>
            <signature>fn-bea:integer-sequence($node*-var)</signature>
            <return-type>integer*</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>node*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:integer-sequence(node* <i>$node-var</i>) => xs:integer*<br>Converts a sequence of XML nodes into a sequence of integers. <br>This function is usually used in conjunction with the fn:max and fn:min functions.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>boolean</function-name>
            <prefix>xs</prefix>
            <signature>xs:boolean($string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:boolean(xs:string <i>$string-var</i>) => xs:boolean<br>Converts a <i>$string-var</i> (a string) to a boolean value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>dateTime</function-name>
            <prefix>xs</prefix>
            <signature>xs:dateTime($string-var)</signature>
            <return-type>dateTime</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:dateTime(xs:string <i>$string-var</i>) => xs:dateTime<br>Converts <i>$string-var</i> (a string in the dateTime format) to the dateTime data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>date</function-name>
            <prefix>xs</prefix>
            <signature>xs:date($string-var)</signature>
            <return-type>date</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:date(xs:string <i>$string-var</i>) => xs:date<br>Converts <i>$string-var</i> (a string in the date format) to the date data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>time</function-name>
            <prefix>xs</prefix>
            <signature>xs:time($string-var)</signature>
            <return-type>time</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:time(xs:string <i>$string-var</i>) => xs:time<br>Converts <i>$string-var</i> (a string in the time format) to the time data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>gYearMonth</function-name>
            <prefix>xs</prefix>
            <signature>xs:gYearMonth($string-var)</signature>
            <return-type>gYearMonth</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:gYearMonth(xs:string <i>$string-var</i>) => xs:gYearMonth<br>Converts <i>$string-var</i> (a string in the gYearMonth format) to the gYearMonth data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>gYear</function-name>
            <prefix>xs</prefix>
            <signature>xs:gYear($string-var)</signature>
            <return-type>gYear</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:gYear(xs:string <i>$string-var</i>) => xs:gYear<br>Converts <i>$string-var</i> (a string in the gYear format) to the gYear data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>gMonthDay</function-name>
            <prefix>xs</prefix>
            <signature>xs:gMonthDay($string-var)</signature>
            <return-type>gMonthDay</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:gMonthDay(xs:string <i>$string-var</i>) => xs:gMonthDay <br>Converts <i>$string-var</i> (a string in the gMonthDay format) to the gMonthDay data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>gMonth</function-name>
            <prefix>xs</prefix>
            <signature>xs:gMonth($string-var)</signature>
            <return-type>gMonth</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:gMonth(xs:string <i>$string-var</i>) => xs:gMonth <br>Converts <i>$string-var</i> (a string in the gMonth format) to the gMonth data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>gDay</function-name>
            <prefix>xs</prefix>
            <signature>xs:gDay($string-var)</signature>
            <return-type>gDay</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:gDay(xs:string <i>$string-var</i>) => xs:gDay<br>Converts <i>$string-var</i> (a string in the gDay format) to the gDay data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>duration</function-name>
            <prefix>xs</prefix>
            <signature>xs:duration($string-var)</signature>
            <return-type>duration</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:duration(xs:string <i>$string-var</i>) => xs:duration<br>Converts <i>$string-var</i> (a string in the duration format) to the duration data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>anyURI</function-name>
            <prefix>xs</prefix>
            <signature>xs:anyURI($string-var)</signature>
            <return-type>anyURI</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:anyURI(xs:string <i>$string-var</i>) => xs:anyURI<br>Converts <i>$string-var</i> that contains a URI (Uniform Resource Identifier Reference)<br> to the anyURI data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>QName</function-name>
            <prefix>xs</prefix>
            <signature>xs:QName($string-var)</signature>
            <return-type>QName</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>xs:QName(xs:string <i>$string-var</i>) => xs:QName<br>Creates a new QName with a local name specified by <i>$string-var</i> and no namespace.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="stringFunctionGroup" helpId="string">
        <xqf:xquery-function>
            <function-name>concat</function-name>
            <prefix>fn</prefix>
            <signature>fn:concat($string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:concat(xs:string <i>$string-var1</i>, xs:string <i>$string-var2</i>, ... ) =>  xs:string<br>Concatenates the string values of the passed in arguments.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the first string to concatenate together.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the second string to concatenate together.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>...</i> - Represents more strings to concatenate together.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>trim-left</function-name>
            <prefix>bea-xf</prefix>
            <signature>fn-bea:trim-left($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:trim-left(xs:string <i>$string-var</i>) => xs:string<br>Removes the leading white space from <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>trim-right</function-name>
            <prefix>bea-xf</prefix>
            <signature>fn-bea:trim-right($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:trim-right(xs:string <i>$string-var</i>) => xs:string<br>Removes the trailing white space from <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>trim</function-name>
            <prefix>bea-xf</prefix>
            <signature>fn-bea:trim($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:trim(xs:string <i>$string-var</i>) => xs:string<br>Removes the leading and trailing white space from <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>compare</function-name>
            <prefix>fn</prefix>
            <signature>fn:compare($string-var, $string-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:compare(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) =>  xs:integer?<br>Compares the value of <i>$string-var1</i> to <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>starts-with</function-name>
            <prefix>fn</prefix>
            <signature>fn:starts-with($string-var, $string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:starts-with(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:boolean?<br>Determines if the <i>$string-var1</i> starts with string specified in <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>ends-with</function-name>
            <prefix>fn</prefix>
            <signature>fn:ends-with($string-var, $string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:ends-with(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:boolean?<br>Determines if the <i>$string-var1</i> ends with string specified in <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>contains</function-name>
            <prefix>fn</prefix>
            <signature>fn:contains($string-var, $string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:contains(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:boolean?<br>Determines if <i>$string-var1</i> contains the string specified in <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>substring</function-name>
            <prefix>fn</prefix>
            <signature>fn:substring($string-var, $decimal-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>decimal</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:substring(xs:string? <i>$string-var</i>, xs:decimal? <i>$decimal-var</i>) => xs:string?<br>Get a substring of <i>$string-var</i> at a particular index location.<br><i>&nbsp;&nbsp;&nbsp;&nbsp;$string-var</i> - Represents the source string.<br><i>&nbsp;&nbsp;&nbsp;&nbsp;$decimal-var</i> - Represents the starting location to start extracting the substring to return.<br>&nbsp;&nbsp;&nbsp;&nbsp;<b>&nbsp;&nbsp;&nbsp;&nbsp;Note:</b> Use 1 to specify the first character of the string and not 0.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>substring</function-name>
            <prefix>fn</prefix>
            <signature>fn:substring($string-var, $decimal-var, $decimal-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>decimal</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>decimal</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:substring(xs:string? $string-var, xs:decimal? $decimal-var, xs:decimal? $decimal-var) => xs:string?<br>Get a substring of <i>$string-var</i> at a particular index location.<br><i>&nbsp;&nbsp;&nbsp;&nbsp;$string-var</i> - Represents the source string.<br><i>&nbsp;&nbsp;&nbsp;&nbsp;$decimal-var</i> - Represents the starting location to start extracting the substring to return.<br>&nbsp;&nbsp;&nbsp;&nbsp;<b>&nbsp;&nbsp;&nbsp;&nbsp;Note:</b> Use 1 to specify the first character of the string and not 0.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$decimal-var</i> - Represents the length of the extracted substring.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>string-length</function-name>
            <prefix>fn</prefix>
            <signature>fn:string-length($string-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:string-length(xs:string? <i>$string-var</i>) => xs:integer?<br>Counts the length of <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>substring-before</function-name>
            <prefix>fn</prefix>
            <signature>fn:substring-before($string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:substring-before(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:string?<br>Finds the substring that precedes <i>$string-var2</i> in <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>substring-after</function-name>
            <prefix>fn</prefix>
            <signature>fn:substring-after($string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:substring-after(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:string?<br>Finds the substring that follows <i>$string-var2</i> in <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>normalize-space</function-name>
            <prefix>fn</prefix>
            <signature>fn:normalize-space($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:normalize-space(xs:string? <i>$string-var</i>) => xs:string?<br>Removes the leading and trailing white space and replaces the duplicate white space characters <br>by a single space from <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
<!--
        <xqf:xquery-function>
            <function-name>normalize-unicode</function-name>
            <prefix>fn</prefix>
            <signature>fn:normalize-unicode($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[	    ]]></description>   </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>normalize-unicode</function-name>
            <prefix>fn</prefix>
            <signature>fn:normalize-unicode($string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[	    ]]></description>   </xqf:xquery-function>
-->
        <xqf:xquery-function>
            <function-name>upper-case</function-name>
            <prefix>fn</prefix>
            <signature>fn:upper-case($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:upper-case(xs:string? <i>$string-var</i>) => xs:string?<br>Converts all the lowercase characters of <i>$string-var</i> to their uppercase form.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>lower-case</function-name>
            <prefix>fn</prefix>
            <signature>fn:lower-case($string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:lower-case(xs:string? <i>$string-var</i>) => xs:string?<br>Returns the $string-var source string converted to lowercase characters.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>translate</function-name>
            <prefix>fn</prefix>
            <signature>fn:translate($string-var, $string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:translate(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>, xs:string? <i>$string-var3</i>) => xs:string?<br>Replaces all occurrences of <i>$string-var2</i> with <i>$string-var3</i> in <i>$string-var1</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the search string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var3</i> - Represents the replacement string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>matches</function-name>
            <prefix>fn</prefix>
            <signature>fn:matches($string-var, $string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:matches(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:boolean?<br>Compares <i>$string-var1</i> against the regular expression in <i>string-var2</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>matches</function-name>
            <prefix>fn</prefix>
            <signature>fn:matches($string-var, $string-var, $string-var)</signature>
            <return-type>boolean</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:matches(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>,  xs:string? <i>$string-var3</i>) => xs:boolean?<br>Compares <i>$string-var1</i> against the regular expression in <i>string-var2</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var3</i> - Specifies flags that affect the comparison to the regular expression.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>replace</function-name>
            <prefix>fn</prefix>
            <signature>fn:replace($string-var, $string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:replace(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i> xs:string? <i>$string-var3</i>) => xs:string?<br>Substitutes all occurrences of the regular expression specified by <i>$string-var2</i> in <i>$string-var1</i> with <i>$string-var3</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var3</i> - Represents the replacement string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>replace</function-name>
            <prefix>fn</prefix>
            <signature>fn:replace($string-var, $string-var, $string-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:replace(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>, xs:string? <i>$string-var3</i>, xs:string? <i>$string-var4</i>) => xs:string?<br>Substitutes all occurrences of the regular expression specified by <i>$string-var2</i> in <i>$string-var1</i> with <i>$string-var3</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var3</i> - Represents the replacement string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var4</i> - Specifies flags that affect the comparison to the regular expression.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>tokenize</function-name>
            <prefix>fn</prefix>
            <signature>fn:tokenize($string-var, $string-var)</signature>
            <return-type>string*</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:tokenize(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i>) => xs:string*<br>Breaks up <i>$string-var1</i> into substrings based on the regular expression delimiter specified in <i>$string-var2</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression which determines how to break up the source string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>tokenize</function-name>
            <prefix>fn</prefix>
            <signature>fn:tokenize($string-var, $string-var, $string-var)</signature>
            <return-type>string*</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:tokenize(xs:string? <i>$string-var1</i>, xs:string? <i>$string-var2</i> xs:string? <i>$string-var3</i>) => xs:string*<br>Breaks up <i>$string-var1</i> into substrings based on the regular expression delimiter specified in <i>$string-var2</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var1</i> - Represents the source string.<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var2</i> - Represents the regular expression which determines how to break up the source string<br>&nbsp;&nbsp;&nbsp;&nbsp;<i>$string-var3</i> - Specifies flags that affect how the regular expression is interpreted.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="numericFunctionGroup" helpId="numeric">
        <xqf:xquery-function>
            <function-name>format-number</function-name>
            <prefix>bea-xf</prefix>
            <signature>fn-bea:format-number($double-var, $string-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>double</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:format-number(xs:double <i>$double-var</i>, xs:string <i>$string-var</i>) => xs:string<br>Converts <i>$double-var</i> to a string using the format pattern specified by <i>$string-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>floor</function-name>
            <prefix>fn</prefix>
            <signature>fn:floor($double-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>double</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:floor(xs:double? <i>$double-var</i>) => xs:double?<br>Rounds <i>$double-var</i> down to the next whole number.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>ceiling</function-name>
            <prefix>fn</prefix>
            <signature>fn:ceiling($double-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>double</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:ceiling(xs:double? <i>$double-var</i>) => xs:double?<br>Rounds <i>$double-var</i> up to the next whole number.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>round</function-name>
            <prefix>fn</prefix>
            <signature>fn:round($double-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>double</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:round(xs:double? <i>$double-var</i>) => xs:double?<br>Rounds <i>$double-var</i> to the nearest whole number.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="aggregateFunctionGroup" helpId="aggregate">
        <xqf:xquery-function>
            <function-name>count</function-name>
            <prefix>fn</prefix>
            <signature>fn:count($item*-var)</signature>
            <return-type>unsignedInt</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>item*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:count(item* <i>$item-var</i>)-> xs:unsignedInt<br>Counts the number items in the sequence.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>avg</function-name>
            <prefix>fn</prefix>
            <signature>fn:avg($item*-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>item*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:avg(item* <i>$item-var</i>) => xs:double?<br>Determines the average of all the numbers in a sequence.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>max</function-name>
            <prefix>fn</prefix>
            <signature>fn:max($integer*-var)</signature>
            <return-type>anySimpleType</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>integer*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:max(integer* <i>$integer-var</i>) => xs:anySimpleType?<br>Finds the maximum value in a sequence.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>min</function-name>
            <prefix>fn</prefix>
            <signature>fn:min($integer*-var)</signature>
            <return-type>anySimpleType</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>integer*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:min(integer* <i>$integer-var</i>) => xs:anySimpleType?<br>Finds the minimum value in a sequence</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>sum</function-name>
            <prefix>fn</prefix>
            <signature>fn:sum($item*-var)</signature>
            <return-type>double</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>item*</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:sum(item* <i>$item-var</i>) => xs:double?<br>Determines the sum of all the items in a sequence.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="uriFunctionGroup" helpId="uri">
        <xqf:xquery-function>
            <function-name>escape-uri</function-name>
            <prefix>fn</prefix>
            <signature>fn:escape-uri($string-var, $boolean-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>boolean</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:escape-URI(xs:string <i>$string-var</i>, xs:boolean <i>$boolean-var</i>) => xs:string<br>Applies the URI escaping rules to <i>$string-var</i> that contains a URI (Uniform Resource Identifier Reference).</html>]]></description>
        </xqf:xquery-function>
		<xqf:xquery-function>
            <function-name>resolve-uri</function-name>
            <prefix>fn</prefix>
            <signature>fn:resolve-uri($string-var, $string-var)</signature>
            <return-type>anyURI</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:resolve-uri(xs:string <i>$string-var1</i>, xs:string <i>$string-var2</i>) => xs:string<br>Resolves the relative URI <i>$string-var1</i> against the base URI <i>$string-var2</i>.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="nodeFunctionGroup" helpId="node">
        <xqf:xquery-function>
            <function-name>node-name</function-name>
            <prefix>fn</prefix>
            <signature>fn:node-name($node-var)</signature>
            <return-type>QName</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>node</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:node-name(fn:node <i>$node-var</i>) => xs:QName?<br>Returns the expanded QName of <i>$node-var</i>. <br>An expanded QName contains a namespace URI and a local name.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>local-name</function-name>
            <prefix>fn</prefix>
            <signature>fn:local-name($node-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>node</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:local-name(fn:node? <i>$node-var</i>) => xs:string<br>Returns the local name (as a string) of <i>$node-var</i>.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
	<xqf:function-group nameKey="qnameFunctionGroup" helpId="qname">
       <xqf:xquery-function>
           <function-name>local-name-from-QName</function-name>
           <prefix>fn</prefix>
           <signature>fn:local-name-from-QName($QName-var)</signature>
           <return-type>string</return-type>
           <parameters>
               <parameter>
                   <param-name></param-name>
                   <param-type>QName</param-type>
               </parameter>
           </parameters>
           <description><![CDATA[<html>fn:local-name-from-QName(xs:QName? <i>$QName-var</i>) => xs:string?<br>Extracts the local part of the QName from <i>$QName-var</i>.</html>]]></description>
       </xqf:xquery-function>
       <xqf:xquery-function>
           <function-name>namespace-uri-from-QName</function-name>
           <prefix>fn</prefix>
           <signature>fn:namespace-uri-from-QName($QName-var)</signature>
           <return-type>anyURI</return-type>
           <parameters>
               <parameter>
                   <param-name></param-name>
                   <param-type>QName</param-type>
               </parameter>
           </parameters>
           <description><![CDATA[<html>fn:namespace-uri-from-QName(xs:QName? <i>$QName-var</i>) => xs:anyURI?<br>Extracts the namespace URI from <i>$QName-var</i>.</html>]]></description>
       </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="datetimeFunctionGroup" helpId="date-time">
        <xqf:xquery-function>
            <function-name>year-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:year-from-dateTime($dateTime-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:year-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:integer?<br>Extracts the year from <i>$dateTime-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>month-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:month-from-dateTime($dateTime-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:month-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:integer?<br>Extracts the month from <i>$dateTime-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>day-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:day-from-dateTime($dateTime-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:day-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:integer?<br>Extracts the day from <i>$dateTime-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>hours-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:hours-from-dateTime($dateTime-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:hours-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:integer?<br>Extracts the hours from <i>$dateTime-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>minutes-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:minutes-from-dateTime($dateTime-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:minutes-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:integer?<br>Extracts the minutes from <i>$dateTime-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>timezone-from-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:timezone-from-dateTime($dateTime-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:timezone-from-dateTime(xs:dateTime? <i>$dateTime-var</i>) => xs:string?<br>Extracts the current timezone from <i>$dateTime-var</i> and returns it as a string.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>year-from-date</function-name>
            <prefix>fn</prefix>
            <signature>fn:year-from-date($date-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:year-from-date(xs:date? <i>$date-var</i>) => xs:integer?<br>Extracts the year from <i>$date-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>month-from-date</function-name>
            <prefix>fn</prefix>
            <signature>fn:month-from-date($date-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:month-from-date(xs:date? <i>$date-var</i>) => xs:integer?<br>Extracts the month from <i>$date-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>day-from-date</function-name>
            <prefix>fn</prefix>
            <signature>fn:day-from-date($date-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:day-from-date(xs:date? <i>$date-var</i>) => xs:integer?<br>Extracts the day from <i>$date-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>timezone-from-date</function-name>
            <prefix>fn</prefix>
            <signature>fn:timezone-from-date($date-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:timezone-from-date(xs:date? <i>$date-var</i>) => xs:string?<br>Extracts the current timezone from <i>$date-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>hours-from-time</function-name>
            <prefix>fn</prefix>
            <signature>fn:hours-from-time($time-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:hours-from-time(xs:time? <i>$time-var</i>) => xs:integer?<br>Extracts the hours from <i>$time-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>minutes-from-time</function-name>
            <prefix>fn</prefix>
            <signature>fn:minutes-from-time($time-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:minutes-from-time(xs:time? <i>$time-var</i>) => xs:integer?<br>Extracts the minutes from <i>$time-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>seconds-from-time</function-name>
            <prefix>fn</prefix>
            <signature>fn:seconds-from-time($time-var)</signature>
            <return-type>decimal</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:seconds-from-time(xs:time? <i>$time-var</i>) => xs:decimal?<br>Extracts the seconds from <i>$time-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>timezone-from-time</function-name>
            <prefix>fn</prefix>
            <signature>fn:timezone-from-time($time-var)</signature>
            <return-type>string</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:timezone-from-time(xs:time? <i>$time-var</i>) => xs:string?<br>Extracts the current timezone from <i>$time-var</i>.</html>]]></description>
        </xqf:xquery-function>
		<!--
		XQ Function Audit: Prefix and signature changed from fn to fn-bea for all add/remove functions listed below.
		-->
        <xqf:xquery-function>
            <function-name>add-timezone-to-dateTime</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-dateTime($dateTime-var)</signature>
            <return-type>dateTime</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-dateTime(xs:dateTime <i>$dateTime-var</i>) => xs:dateTime<br>Adds the implicit time zone to a dateTime value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>add-timezone-to-dateTime</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-dateTime($dateTime-var, $dayTimeDuration-var)</signature>
            <return-type>dateTime</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-dateTime(xs:dateTime <i>$dateTime-var</i>, xs:dayTimeDuration, <i>$dayTimeDuration-var</i>) => xs:dateTime<br>Adds the passed in time zone (<i>$dayTimeDuration-var</i>) to a dateTime value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>remove-timezone-from-dateTime</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:remove-timezone-from-dateTime($dateTime-var)</signature>
            <return-type>dateTime</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:remove-timezone-from-dateTime(xs:dateTime <i>$dateTime-var</i>) => xs:dateTime<br>Removes the implicit time zone from a dateTime value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>remove-timezone-from-dateTime</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:remove-timezone-from-dateTime($dateTime-var, $dayTimeDuration-var)</signature>
            <return-type>dateTime</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dateTime</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:remove-timezone-from-dateTime(xs:dateTime <i>$dateTime-var</i>, xs:dayTimeDuration, <i>$dayTimeDuration-var</i>) => xs:dateTime<br>Removes the passed in time zone (<i>$dayTimeDuration-var</i>) from a dateTime value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>add-timezone-to-date</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-date($date-var)</signature>
            <return-type>date</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-date(xs:date <i>$date-var</i>) => xs:date<br>Adds the implicit time zone to a date value</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>add-timezone-to-date</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-date($date-var, $dayTimeDuration-var)</signature>
            <return-type>date</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>date</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-date(xs:date <i>$date-var</i>, xs:dayTimeDuration <i>$dayTimeDuration-var</i>) => xs:date<br>Adds the passed in time zone (<i>$dayTimeDuration-var</i>) to a date value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>add-timezone-to-time</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-time($time-var)</signature>
            <return-type>time</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-time(xs:time $time-var) => xs:time<br>Adds the implicit time zone (<i>$dayTimeDuration-var</i>) to a time value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>add-timezone-to-time</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:add-timezone-to-time($time-var, $dayTimeDuration-var)</signature>
            <return-type>time</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:add-timezone-to-time(xs:time $time-var, xs:dayTimeDuration, $dayTimeDuration-var) => xs:time<br>Adds the passed in time zone (<i>$dayTimeDuration-var</i>) to a time value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>remove-timezone-from-time</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:remove-timezone-from-time($time-var)</signature>
            <return-type>time</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:remove-timezone-from-time(xs:time <i>$time-var</i>) => xs:time<br>Removes the implicit time zone from a time value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>remove-timezone-from-time</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:remove-timezone-from-time($time-var, $dayTimeDuration-var)</signature>
            <return-type>time</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>time</param-type>
                </parameter>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn-bea:remove-timezone-from-time(xs:time <i>$time-var</i>, xs:dayTimeDuration, <i>$dayTimeDuration-var</i>) => xs:time<br>Removes the passed in time zone (<i>$dayTimeDuration-var</i>) from a time value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>current-dateTime</function-name>
            <prefix>fn</prefix>
            <signature>fn:current-dateTime()</signature>
            <return-type>dateTime</return-type>
            <parameters>
            </parameters>
            <description><![CDATA[<html>fn:current-dateTime() => xs:dateTime?<br>Returns the current date and time as a dateTime value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>current-date</function-name>
            <prefix>fn</prefix>
            <signature>fn:current-date()</signature>
            <return-type>date</return-type>
            <parameters>
            </parameters>
            <description><![CDATA[<html>fn:current-date() => xs:date?<br>Returns the current date as a date value.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>current-time</function-name>
            <prefix>fn</prefix>
            <signature>fn:current-time()</signature>
            <return-type>time</return-type>
            <parameters>
            </parameters>
            <description><![CDATA[<html>fn:current-time() => xs:time?<br>Returns the current date and time as a time value.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="durationFunctionGroup" helpId="duration">
		<!--
		XQ Function Audit
		
        <xqf:xquery-function>
            <function-name>yearMonthDuration</function-name>
            <prefix>fn</prefix>
            <signature>fn:yearMonthDuration($string-var)</signature>
            <return-type>yearMonthDuration</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:yearMonthDuration(xs:string <i>$string-var</i>) => fn:yearMonthDuration<br>Converts <i>$string-var</i> (a string in the yearMonthDuration format) to the yearMonthDuration data type.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>dayTimeDuration</function-name>
            <prefix>fn</prefix>
            <signature>fn:dayTimeDuration($string-var)</signature>
            <return-type>dayTimeDuration</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:dayTimeDuration(xs:string <i>$string-var</i>) => fn:dayTimeDuration<br>Converts <i>$string-var</i> (a string in the dayTimeDuration format) to the dayTimeDuration data type.</html>]]></description>
        </xqf:xquery-function-->
		
        <xqf:xquery-function>
            <function-name>years-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:years-from-duration($yearMonthDuration-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>yearMonthDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:years-from-duration(fn:yearMonthDuration? <i>$yearMonthDuration-var</i>) => xs:integer?<br>Extracts the number of years from the years component of <i>$yearMonthDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>months-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:months-from-duration($yearMonthDuration-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>yearMonthDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:months-from-duration(fn:yearMonthDuration? <i>$yearMonthDuration-var</i>) => xs:integer?<br>Extracts the number of months from the months component of <i>$yearMonthDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>days-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:days-from-duration($dayTimeDuration-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:days-from-duration(fn:dayTimeDuration? <i>$dayTimeDuration-var</i>) => xs:integer?<br>Extracts the number of days from the days component of <i>$dayTimeDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>hours-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:hours-from-duration($dayTimeDuration-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:hours-from-duration(fn:dayTimeDuration? <i>$dayTimeDuration-var</i>) => xs:integer?<br>Extracts the number of hours from the hours component of <i>$dayTimeDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>minutes-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:minutes-from-duration($dayTimeDuration-var)</signature>
            <return-type>integer</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:minutes-from-duration(fn:dayTimeDuration? <i>$dayTimeDuration-var</i>) => xs:integer?<br>Extracts the number of minutes from the minutes component of <i>$dayTimeDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
        <xqf:xquery-function>
            <function-name>seconds-from-duration</function-name>
            <prefix>fn</prefix>
            <signature>fn:seconds-from-duration($dayTimeDuration-var)</signature>
            <return-type>decimal</return-type>
            <parameters>
                <parameter>
                    <param-name></param-name>
                    <param-type>dayTimeDuration</param-type>
                </parameter>
            </parameters>
            <description><![CDATA[<html>fn:seconds-from-duration(fn:dayTimeDuration? <i>$dayTimeDuration-var</i>) => xs:decimal?<br>Extracts the number of seconds from the seconds component of <i>$dayTimeDuration-var</i>.</html>]]></description>
        </xqf:xquery-function>
    </xqf:function-group>
    <xqf:function-group nameKey="sqlFunctionGroup" helpId="sql">
        <xqf:xquery-function>
            <function-name>execute-sql</function-name>
            <prefix>fn-bea</prefix>
            <signature>fn-bea:execute-sql($datasource-string, $rowElemName, $sql-string, $params...)</signature>
            <return-type>element*</return-type>
            <parameters>
                <parameter>
                    <param-name>datasource</param-name>
                    <param-type>string</param-type>
                </parameter>
                <parameter>
                    <param-name>rowElementName</param-name>
                    <param-type>anyAtomicType</param-type>
                </parameter>
                <parameter>
                    <param-name>sql</param-name>
                    <param-type>string</param-type>
                </parameter>
            </parameters>
            <description></description>
        </xqf:xquery-function>
    </xqf:function-group>
</xqf:xquery-functions>
