<?xml version="1.0" encoding="UTF-8"?>

<xqf:xqueryFunctions xmlns:xqf="http://www.bea.com/wli/sb/xquery/config">

    <xqf:category id="XQF_XQUERY_ACCESSORS">
        <xqf:function>
            <xqf:name>fn:node-name</xqf:name>
            <xqf:signature>fn:node-name($arg as node()?) as xs:QName?</xqf:signature>
            <xqf:template>fn:node-name($arg-node)</xqf:template>
            <xqf:returnType>QName</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:nilled</xqf:name>
            <xqf:signature>fn:nilled($arg as node()?) as xs:boolean?</xqf:signature>
            <xqf:template>fn:nilled($arg-node)</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:string</xqf:name>
            <xqf:signature>fn:string($arg as item()?) as xs:string</xqf:signature>
            <xqf:template>fn:string($arg-item)</xqf:template>
            <xqf:returnType>string</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="item"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:data</xqf:name>
            <xqf:signature>fn:data($arg as item()*) as xdt:anyAtomicType*</xqf:signature>
            <xqf:template>fn:data($arg-item)</xqf:template>
            <xqf:returnType>anyAtomicType*</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="item*"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:base-uri</xqf:name>
            <xqf:signature>fn:base-uri() as xs:anyURI?</xqf:signature>
            <xqf:template>fn:base-uri()</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:base-uri</xqf:name>
            <xqf:signature>fn:base-uri($arg as node()?) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:base-uri($arg-node)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:document-uri</xqf:name>
            <xqf:signature>fn:document-uri($arg as node()?) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:document-uri($arg-node)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_ERROR">
        <xqf:function>
            <xqf:name>fn:error</xqf:name>
            <xqf:signature>fn:error() as none</xqf:signature>
            <xqf:template>fn:error()</xqf:template>
            <xqf:returnType>none</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:error</xqf:name>
            <xqf:signature>fn:error($error as xs:QName) as none</xqf:signature>
            <xqf:template>fn:error($error-qname)</xqf:template>
            <xqf:returnType>none</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="QName"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:error</xqf:name>
            <xqf:signature>fn:error($error as xs:QName?, $description as xs:string) as none</xqf:signature>
            <xqf:template>fn:error($error-qname, $description-string)</xqf:template>
            <xqf:returnType>none</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="QName"/>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:error</xqf:name>
            <xqf:signature>fn:error($error as xs:QName?, $description as xs:string, $error-object as item()*) as none</xqf:signature>
            <xqf:template>fn:error($error-qname, $description-string, $error-object-item)</xqf:template>
            <xqf:returnType>none</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="QName"/>
                <xqf:param type="string"/>
                <xqf:param type="item*"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XML">
        <xqf:function>
            <xqf:name>fn-bea:inlinedXML</xqf:name>
            <xqf:signature>fn-bea:inlinedXML($arg as xs:string) as node()*</xqf:signature>
            <xqf:template>fn-bea:inlinedXML($arg-string)</xqf:template>
            <xqf:returnType>node*</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn-bea:serialize</xqf:name>
            <xqf:signature>fn-bea:serialize($arg as item()*) as xs:string</xqf:signature>
            <xqf:template>fn-bea:serialize($arg-items)</xqf:template>
            <xqf:returnType>string</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="item*"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_CONSTRUCTORS">
        <xqf:function>
            <xqf:name>xs:string</xqf:name>
            <xqf:signature>xs:string($arg as xdt:anyAtomicType?) as xs:string?</xqf:signature>
            <xqf:template>xs:string($arg-atomic)</xqf:template>
            <xqf:returnType>string</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:boolean</xqf:name>
            <xqf:signature>xs:boolean($arg as xdt:anyAtomicType?) as xs:boolean?</xqf:signature>
            <xqf:template>xs:boolean($arg-atomic)</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:decimal</xqf:name>
            <xqf:signature>xs:decimal($arg as xdt:anyAtomicType?) as xs:decimal?</xqf:signature>
            <xqf:template>xs:decimal($arg-atomic)</xqf:template>
            <xqf:returnType>decimal</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:float</xqf:name>
            <xqf:signature>xs:float($arg as xdt:anyAtomicType?) as xs:float?</xqf:signature>
            <xqf:template>xs:float($arg-atomic)</xqf:template>
            <xqf:returnType>float</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:double</xqf:name>
            <xqf:signature>xs:double($arg as xdt:anyAtomicType?) as xs:double?</xqf:signature>
            <xqf:template>xs:double($arg-atomic)</xqf:template>
            <xqf:returnType>double</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:long</xqf:name>
            <xqf:signature>xs:long($arg as xdt:anyAtomicType?) as xs:long?</xqf:signature>
            <xqf:template>xs:long($arg-atomic)</xqf:template>
            <xqf:returnType>long</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:unsignedLong</xqf:name>
            <xqf:signature>xs:unsignedLong($arg as xdt:anyAtomicType?) as xs:unsignedLong?</xqf:signature>
            <xqf:template>xs:unsignedLong($arg-atomic)</xqf:template>
            <xqf:returnType>unsignedLong</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:int</xqf:name>
            <xqf:signature>xs:int($arg as xdt:anyAtomicType?) as xs:int?</xqf:signature>
            <xqf:template>xs:int($arg-atomic)</xqf:template>
            <xqf:returnType>int</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:unsignedInt</xqf:name>
            <xqf:signature>xs:unsignedInt($arg as xdt:anyAtomicType?) as xs:unsignedInt?</xqf:signature>
            <xqf:template>xs:unsignedInt($arg-atomic)</xqf:template>
            <xqf:returnType>unsignedInt</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:short</xqf:name>
            <xqf:signature>xs:short($arg as xdt:anyAtomicType?) as xs:short?</xqf:signature>
            <xqf:template>xs:short($arg-atomic)</xqf:template>
            <xqf:returnType>short</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:unsignedShort</xqf:name>
            <xqf:signature>xs:unsignedShort($arg as xdt:anyAtomicType?) as xs:unsignedShort?</xqf:signature>
            <xqf:template>xs:unsignedShort($arg-atomic)</xqf:template>
            <xqf:returnType>unsignedShort</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:byte</xqf:name>
            <xqf:signature>xs:byte($arg as xdt:anyAtomicType?) as xs:byte?</xqf:signature>
            <xqf:template>xs:byte($arg-atomic)</xqf:template>
            <xqf:returnType>byte</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:unsignedByte</xqf:name>
            <xqf:signature>xs:unsignedByte($arg as xdt:anyAtomicType?) as xs:unsignedByte?</xqf:signature>
            <xqf:template>xs:unsignedByte($arg-atomic)</xqf:template>
            <xqf:returnType>unsignedByte</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:integer</xqf:name>
            <xqf:signature>xs:integer($arg as xdt:anyAtomicType?) as xs:integer?</xqf:signature>
            <xqf:template>xs:integer($arg-atomic)</xqf:template>
            <xqf:returnType>integer</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:positiveInteger</xqf:name>
            <xqf:signature>xs:positiveInteger($arg as xdt:anyAtomicType?) as xs:positiveInteger?</xqf:signature>
            <xqf:template>xs:positiveInteger($arg-atomic)</xqf:template>
            <xqf:returnType>positiveInteger</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:nonPositiveInteger</xqf:name>
            <xqf:signature>xs:nonPositiveInteger($arg as xdt:anyAtomicType?) as xs:nonPositiveInteger?</xqf:signature>
            <xqf:template>xs:nonPositiveInteger($arg-atomic)</xqf:template>
            <xqf:returnType>nonPositiveInteger</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:negativeInteger</xqf:name>
            <xqf:signature>xs:negativeInteger($arg as xdt:anyAtomicType?) as xs:negativeInteger?</xqf:signature>
            <xqf:template>xs:negativeInteger($arg-atomic)</xqf:template>
            <xqf:returnType>negativeInteger</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:nonNegativeInteger</xqf:name>
            <xqf:signature>xs:nonNegativeInteger($arg as xdt:anyAtomicType?) as xs:nonNegativeInteger?</xqf:signature>
            <xqf:template>xs:nonNegativeInteger($arg-atomic)</xqf:template>
            <xqf:returnType>nonNegativeInteger</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:anyURI</xqf:name>
            <xqf:signature>xs:anyURI($arg as xdt:anyAtomicType?) as xs:anyURI?</xqf:signature>
            <xqf:template>xs:anyURI($arg-atomic)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:QName</xqf:name>
            <xqf:signature>xs:QName($arg as xs:string?) as xs:QName?</xqf:signature>
            <xqf:template>xs:QName($arg-string)</xqf:template>
            <xqf:returnType>QName</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:Name</xqf:name>
            <xqf:signature>xs:Name($arg as xdt:anyAtomicType?) as xs:Name?</xqf:signature>
            <xqf:template>xs:Name($arg-atomic)</xqf:template>
            <xqf:returnType>Name</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:NCName</xqf:name>
            <xqf:signature>xs:NCName($arg as xdt:anyAtomicType?) as xs:NCName?</xqf:signature>
            <xqf:template>xs:NCName($arg-atomic)</xqf:template>
            <xqf:returnType>NCName</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:duration</xqf:name>
            <xqf:signature>xs:duration($arg as xdt:anyAtomicType?) as xs:duration?</xqf:signature>
            <xqf:template>xs:duration($arg-atomic)</xqf:template>
            <xqf:returnType>duration</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:dateTime</xqf:name>
            <xqf:signature>xs:dateTime($arg as xdt:anyAtomicType?) as xs:dateTime?</xqf:signature>
            <xqf:template>xs:dateTime($arg-atomic)</xqf:template>
            <xqf:returnType>dateTime</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:date</xqf:name>
            <xqf:signature>xs:date($arg as xdt:anyAtomicType?) as xs:date?</xqf:signature>
            <xqf:template>xs:date($arg-atomic)</xqf:template>
            <xqf:returnType>date</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:time</xqf:name>
            <xqf:signature>xs:time($arg as xdt:anyAtomicType?) as xs:time?</xqf:signature>
            <xqf:template>xs:time($arg-atomic)</xqf:template>
            <xqf:returnType>time</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:gYearMonth</xqf:name>
            <xqf:signature>xs:gYearMonth($arg as xdt:anyAtomicType?) as xs:gYearMonth?</xqf:signature>
            <xqf:template>xs:gYearMonth($arg-atomic)</xqf:template>
            <xqf:returnType>gYearMonth</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:gYear</xqf:name>
            <xqf:signature>xs:gYear($arg as xdt:anyAtomicType?) as xs:gYear?</xqf:signature>
            <xqf:template>xs:gYear($arg-atomic)</xqf:template>
            <xqf:returnType>gYear</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:gMonthDay</xqf:name>
            <xqf:signature>xs:gMonthDay($arg as xdt:anyAtomicType?) as xs:gMonthDay?</xqf:signature>
            <xqf:template>xs:gMonthDay($arg-atomic)</xqf:template>
            <xqf:returnType>gMonthDay</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:gMonth</xqf:name>
            <xqf:signature>xs:gMonth($arg as xdt:anyAtomicType?) as xs:gMonth?</xqf:signature>
            <xqf:template>xs:gMonth($arg-atomic)</xqf:template>
            <xqf:returnType>gMonth</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:gDay</xqf:name>
            <xqf:signature>xs:gDay($arg as xdt:anyAtomicType?) as xs:gDay?</xqf:signature>
            <xqf:template>xs:gDay($arg-atomic)</xqf:template>
            <xqf:returnType>gDay</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xdt:yearMonthDuration</xqf:name>
            <xqf:signature>xdt:yearMonthDuration($arg as xdt:anyAtomicType?) as xdt:yearMonthDuration?</xqf:signature>
            <xqf:template>xdt:yearMonthDuration($arg-atomic)</xqf:template>
            <xqf:returnType>yearMonthDuration</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xdt:dayTimeDuration</xqf:name>
            <xqf:signature>xdt:dayTimeDuration($arg as xdt:anyAtomicType?) as xdt:dayTimeDuration?</xqf:signature>
            <xqf:template>xdt:dayTimeDuration($arg-atomic)</xqf:template>
            <xqf:returnType>dayTimeDuration</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:normalizedString</xqf:name>
            <xqf:signature>xs:normalizedString($arg as xdt:anyAtomicType?) as xs:normalizedString?</xqf:signature>
            <xqf:template>xs:normalizedString($arg-atomic)</xqf:template>
            <xqf:returnType>normalizedString</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:hexBinary</xqf:name>
            <xqf:signature>xs:hexBinary($arg as xdt:anyAtomicType?) as xs:hexBinary?</xqf:signature>
            <xqf:template>xs:hexBinary($arg-atomic)</xqf:template>
            <xqf:returnType>hexBinary</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:base64Binary</xqf:name>
            <xqf:signature>xs:base64Binary($arg as xdt:anyAtomicType?) as xs:base64Binary?</xqf:signature>
            <xqf:template>xs:base64Binary($arg-atomic)</xqf:template>
            <xqf:returnType>base64Binary</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xdt:untypedAtomic</xqf:name>
            <xqf:signature>xdt:untypedAtomic($arg as xdt:anyAtomicType?) as xdt:untypedAtomic?</xqf:signature>
            <xqf:template>xdt:untypedAtomic($arg-atomic)</xqf:template>
            <xqf:returnType>untypedAtomic</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:token</xqf:name>
            <xqf:signature>xs:token($arg as xdt:anyAtomicType?) as xs:token?</xqf:signature>
            <xqf:template>xs:token($arg-atomic)</xqf:template>
            <xqf:returnType>token</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:language</xqf:name>
            <xqf:signature>xs:language($arg as xdt:anyAtomicType?) as xs:language?</xqf:signature>
            <xqf:template>xs:language($arg-atomic)</xqf:template>
            <xqf:returnType>language</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:NMTOKEN</xqf:name>
            <xqf:signature>xs:NMTOKEN($arg as xdt:anyAtomicType?) as xs:NMTOKEN?</xqf:signature>
            <xqf:template>xs:NMTOKEN($arg-atomic)</xqf:template>
            <xqf:returnType>NMTOKEN</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:ID</xqf:name>
            <xqf:signature>xs:ID($arg as xdt:anyAtomicType?) as xs:ID?</xqf:signature>
            <xqf:template>xs:ID($arg-atomic)</xqf:template>
            <xqf:returnType>ID</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:IDREF</xqf:name>
            <xqf:signature>xs:IDREF($arg as xdt:anyAtomicType?) as xs:IDREF?</xqf:signature>
            <xqf:template>xs:IDREF($arg-atomic)</xqf:template>
            <xqf:returnType>IDREF</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>xs:ENTITY</xqf:name>
            <xqf:signature>xs:ENTITY($arg as xdt:anyAtomicType?) as xs:ENTITY?</xqf:signature>
            <xqf:template>xs:ENTITY($arg-atomic)</xqf:template>
            <xqf:returnType>ENTITY</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_NUMERCIS">
        <xqf:function>
            <xqf:name>fn:abs</xqf:name>
            <xqf:signature>fn:abs($arg as numeric?) as numeric?</xqf:signature>
            <xqf:template>fn:abs($arg-numeric)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:ceiling</xqf:name>
            <xqf:signature>fn:ceiling($arg as numeric?) as numeric?</xqf:signature>
            <xqf:template>fn:ceiling($arg-numeric)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:floor</xqf:name>
            <xqf:signature>fn:floor($arg as numeric?) as numeric?</xqf:signature>
            <xqf:template>fn:floor($arg-numeric)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:round</xqf:name>
            <xqf:signature>fn:round($arg as numeric?) as numeric?</xqf:signature>
            <xqf:template>fn:round($arg-numeric)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:round-half-to-even</xqf:name>
            <xqf:signature>fn:round-half-to-even($arg as numeric?) as numeric?</xqf:signature>
            <xqf:template>fn:round-half-to-even($arg-numeric)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:round-half-to-even</xqf:name>
            <xqf:signature>fn:round-half-to-even($arg as numeric?, $precision as xs:integer) as numeric?</xqf:signature>
            <xqf:template>fn:round-half-to-even($arg-numeric, $precision-integer)</xqf:template>
            <xqf:returnType>numeric</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="numeric"/>
                <xqf:param type="integer"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_STRINGS">
        <xqf:group id="XQF_XQUERY_STRING_COMPARISON">
            <xqf:function>
                <xqf:name>fn:compare</xqf:name>
                <xqf:signature>fn:compare($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:integer?</xqf:signature>
                <xqf:template>fn:compare($comparand1-string, $comparand2-string)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:compare</xqf:name>
                <xqf:signature>fn:compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) as xs:integer?</xqf:signature>
                <xqf:template>fn:compare($comparand1-string, $comparand2-string, $collation-string)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_STRING_GENERAL">
            <xqf:function>
                <xqf:name>fn:concat</xqf:name>
                <xqf:signature>fn:concat($arg1 as xdt:anyAtomicType?, $arg2 as xdt:anyAtomicType?, ...) as xs:string</xqf:signature>
                <xqf:template>fn:concat($arg1-atomic, $arg2-atomic, ...)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType"/>
                    <xqf:param type="anyAtomicType"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:string-join</xqf:name>
                <xqf:signature>fn:string-join($arg1 as xs:string*, $arg2 as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:string-join($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string*"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:trim</xqf:name>
                <xqf:signature>fn-bea:trim($string as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn-bea:trim($string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:trim-left</xqf:name>
                <xqf:signature>fn-bea:trim-left($string as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn-bea:trim-left($string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:trim-right</xqf:name>
                <xqf:signature>fn-bea:trim-right($string as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn-bea:trim-right($string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring</xqf:name>
                <xqf:signature>fn:substring($sourceString as xs:string?, $startingLoc as xs:double) as xs:string</xqf:signature>
                <xqf:template>fn:substring($sourceString-string, $startingLoc-double)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="double"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring</xqf:name>
                <xqf:signature>fn:substring($sourceString as xs:string?, $startingLoc as xs:double, $length as xs:double) as xs:string</xqf:signature>
                <xqf:template>fn:substring($sourceString-string, $startingLoc-double, $length-double)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="double"/>
                    <xqf:param type="double"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:string-length</xqf:name>
                <xqf:signature>fn:string-length($arg as xs:string?) as xs:integer</xqf:signature>
                <xqf:template>fn:string-length($arg-string)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:normalize-space</xqf:name>
                <xqf:signature>fn:normalize-space($arg as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:normalize-space($arg-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:normalize-unicode</xqf:name>
                <xqf:signature>fn:normalize-unicode($arg as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:normalize-unicode($arg-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:normalize-unicode</xqf:name>
                <xqf:signature>fn:normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:normalize-unicode($arg-string, $normalizationForm-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:upper-case</xqf:name>
                <xqf:signature>fn:upper-case($arg as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:upper-case($arg-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:lower-case</xqf:name>
                <xqf:signature>fn:lower-case($arg as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:lower-case($arg-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:translate</xqf:name>
                <xqf:signature>fn:translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:translate($arg-string, $mapString-string, $transString-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:escape-uri</xqf:name>
                <xqf:signature>fn:escape-uri($uri-part as xs:string?, $escape-reserved as xs:boolean) as xs:string</xqf:signature>
                <xqf:template>fn:escape-uri($uri-part-string, $escape-reserved-boolean)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="boolean"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:format-number</xqf:name>
                <xqf:signature>fn-bea:format-number($number as xs:double, $pattern as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn-bea:format-number($number-double, $pattern-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="double"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_STRING_SUBSTRING">
            <xqf:function>
                <xqf:name>fn:contains</xqf:name>
                <xqf:signature>fn:contains($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean</xqf:signature>
                <xqf:template>fn:contains($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:contains</xqf:name>
                <xqf:signature>fn:contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean</xqf:signature>
                <xqf:template>fn:contains($arg1-string, $arg2-string, $collation-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:starts-with</xqf:name>
                <xqf:signature>fn:starts-with($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean</xqf:signature>
                <xqf:template>fn:starts-with($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:starts-with</xqf:name>
                <xqf:signature>fn:starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean</xqf:signature>
                <xqf:template>fn:starts-with($arg1-string, $arg2-string, $collation-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:ends-with</xqf:name>
                <xqf:signature>fn:ends-with($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean</xqf:signature>
                <xqf:template>fn:ends-with($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:ends-with</xqf:name>
                <xqf:signature>fn:ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean</xqf:signature>
                <xqf:template>fn:ends-with($arg1-string, $arg2-string, $collation-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring-before</xqf:name>
                <xqf:signature>fn:substring-before($arg1 as xs:string?, $arg2 as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:substring-before($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring-before</xqf:name>
                <xqf:signature>fn:substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:substring-before($arg1-string, $arg2-string, $collation-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring-after</xqf:name>
                <xqf:signature>fn:substring-after($arg1 as xs:string?, $arg2 as xs:string?) as xs:string</xqf:signature>
                <xqf:template>fn:substring-after($arg1-string, $arg2-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:substring-after</xqf:name>
                <xqf:signature>fn:substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:substring-after($arg1-string, $arg2-string, $collation-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_STRING_PATTERN">
            <xqf:function>
                <xqf:name>fn:matches</xqf:name>
                <xqf:signature>fn:matches($input as xs:string?, $pattern as xs:string) as xs:boolean</xqf:signature>
                <xqf:template>fn:matches($input-string, $pattern-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:matches</xqf:name>
                <xqf:signature>fn:matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:boolean</xqf:signature>
                <xqf:template>fn:matches($input-string, $pattern-string, $flags-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:replace</xqf:name>
                <xqf:signature>fn:replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:replace($input-string, $pattern-string, $replacement-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:replace</xqf:name>
                <xqf:signature>fn:replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) as xs:string</xqf:signature>
                <xqf:template>fn:replace($input-string, $pattern-string, $replacement-string, $flags-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:tokenize</xqf:name>
                <xqf:signature>fn:tokenize($input as xs:string?, $pattern as xs:string) as xs:string?</xqf:signature>
                <xqf:template>fn:tokenize($input-string, $pattern-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:tokenize</xqf:name>
                <xqf:signature>fn:tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string?</xqf:signature>
                <xqf:template>fn:tokenize($input-string, $pattern-string, $flags-string)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_STRING_ASS_DISASS">
            <xqf:function>
                <xqf:name>fn:codepoints-to-string</xqf:name>
                <xqf:signature>fn:codepoints-to-string($arg as xs:integer*) as xs:string</xqf:signature>
                <xqf:template>fn:codepoints-to-string($arg-integer)</xqf:template>
                <xqf:returnType>string</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="integer*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:string-to-codepoints</xqf:name>
                <xqf:signature>fn:string-to-codepoints($arg as xs:string?) as xs:integer*</xqf:signature>
                <xqf:template>fn:string-to-codepoints($arg-string)</xqf:template>
                <xqf:returnType>integer*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_URI">
        <xqf:function>
            <xqf:name>fn:resolve-uri</xqf:name>
            <xqf:signature>fn:resolve-uri($relative as xs:string?) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:resolve-uri($relative-string)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:resolve-uri</xqf:name>
            <xqf:signature>fn:resolve-uri($relative as xs:string?, $base as xs:string) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:resolve-uri($relative-string, $base-string)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_BOOLEAN">
        <xqf:function>
            <xqf:name>fn:true</xqf:name>
            <xqf:signature>fn:true() as xs:boolean</xqf:signature>
            <xqf:template>fn:true()</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:false</xqf:name>
            <xqf:signature>fn:false() as xs:boolean</xqf:signature>
            <xqf:template>fn:false()</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:not</xqf:name>
            <xqf:signature>fn:not($arg as item()*) as xs:boolean</xqf:signature>
            <xqf:template>fn:not($arg-item)</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="item*"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_TIME">
        <xqf:group id="XQF_XQUERY_TIME_EXTRACT">
            <xqf:function>
                <xqf:name>fn:years-from-duration</xqf:name>
                <xqf:signature>fn:years-from-duration($arg as xdt:yearMonthDuration?) as xs:integer?</xqf:signature>
                <xqf:template>fn:years-from-duration($arg)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="yearMonthDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:months-from-duration</xqf:name>
                <xqf:signature>fn:months-from-duration($arg as xdt:yearMonthDuration?) as xs:integer?</xqf:signature>
                <xqf:template>fn:months-from-duration($arg)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="yearMonthDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:days-from-duration</xqf:name>
                <xqf:signature>fn:days-from-duration($arg as xdt:dayTimeDuration?) as xs:integer?</xqf:signature>
                <xqf:template>fn:days-from-duration($arg)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:hours-from-duration</xqf:name>
                <xqf:signature>fn:hours-from-duration($arg as xdt:dayTimeDuration?) as xs:integer?</xqf:signature>
                <xqf:template>fn:hours-from-duration($arg)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:minutes-from-duration</xqf:name>
                <xqf:signature>fn:minutes-from-duration($arg as xdt:dayTimeDuration?) as xs:integer?</xqf:signature>
                <xqf:template>fn:minutes-from-duration($arg)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:seconds-from-duration</xqf:name>
                <xqf:signature>fn:seconds-from-duration($arg as xdt:dayTimeDuration?) as xs:decimal?</xqf:signature>
                <xqf:template>fn:seconds-from-duration($arg)</xqf:template>
                <xqf:returnType>decimal</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:year-from-dateTime</xqf:name>
                <xqf:signature>fn:year-from-dateTime($arg as xs:dateTime?) as xs:integer?</xqf:signature>
                <xqf:template>fn:year-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:month-from-dateTime</xqf:name>
                <xqf:signature>fn:month-from-dateTime($arg as xs:dateTime?) as xs:integer?</xqf:signature>
                <xqf:template>fn:month-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:day-from-dateTime</xqf:name>
                <xqf:signature>fn:day-from-dateTime($arg as xs:dateTime?) as xs:integer?</xqf:signature>
                <xqf:template>fn:day-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:hours-from-dateTime</xqf:name>
                <xqf:signature>fn:hours-from-dateTime($arg as xs:dateTime?) as xs:integer?</xqf:signature>
                <xqf:template>fn:hours-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:minutes-from-dateTime</xqf:name>
                <xqf:signature>fn:minutes-from-dateTime($arg as xs:dateTime?) as xs:integer?</xqf:signature>
                <xqf:template>fn:minutes-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:seconds-from-dateTime</xqf:name>
                <xqf:signature>fn:seconds-from-dateTime($arg as xs:dateTime?) as xs:decimal?</xqf:signature>
                <xqf:template>fn:seconds-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>decimal</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:year-from-date</xqf:name>
                <xqf:signature>fn:year-from-date($arg as xs:date?) as xs:integer?</xqf:signature>
                <xqf:template>fn:year-from-date($arg-date)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:month-from-date</xqf:name>
                <xqf:signature>fn:month-from-date($arg as xs:date?) as xs:integer?</xqf:signature>
                <xqf:template>fn:month-from-date($arg-date)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:day-from-date</xqf:name>
                <xqf:signature>fn:day-from-date($arg as xs:date?) as xs:integer?</xqf:signature>
                <xqf:template>fn:day-from-date($arg-date)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:hours-from-time</xqf:name>
                <xqf:signature>fn:hours-from-time($arg as xs:time?) as xs:integer?</xqf:signature>
                <xqf:template>fn:hours-from-time($arg-time)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:minutes-from-time</xqf:name>
                <xqf:signature>fn:minutes-from-time($arg as xs:time?) as xs:integer?</xqf:signature>
                <xqf:template>fn:minutes-from-time($arg-time)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:seconds-from-time</xqf:name>
                <xqf:signature>fn:seconds-from-time($arg as xs:time?) as xs:decimal?</xqf:signature>
                <xqf:template>fn:seconds-from-time($arg-time)</xqf:template>
                <xqf:returnType>decimal</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_TIME_ZONE">
            <xqf:function>
                <xqf:name>fn:timezone-from-time</xqf:name>
                <xqf:signature>fn:timezone-from-time($arg as xs:time?) as xdt:dayTimeDuration?</xqf:signature>
                <xqf:template>fn:timezone-from-time($arg-time)</xqf:template>
                <xqf:returnType>dayTimeDuration</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:timezone-from-date</xqf:name>
                <xqf:signature>fn:timezone-from-date($arg as xs:date?) as xdt:dayTimeDuration?</xqf:signature>
                <xqf:template>fn:timezone-from-date($arg-date)</xqf:template>
                <xqf:returnType>dayTimeDuration</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:timezone-from-dateTime</xqf:name>
                <xqf:signature>fn:timezone-from-dateTime($arg as xs:dateTime?) as xdt:dayTimeDuration?</xqf:signature>
                <xqf:template>fn:timezone-from-dateTime($arg-datetime)</xqf:template>
                <xqf:returnType>dayTimeDuration</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-dateTime-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-dateTime-to-timezone($arg as xs:dateTime?) as xs:dateTime?</xqf:signature>
                <xqf:template>fn:adjust-dateTime-to-timezone($arg-datetime)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-dateTime-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xdt:dayTimeDuration?) as xs:dateTime?</xqf:signature>
                <xqf:template>fn:adjust-dateTime-to-timezone($arg-datetime, $timezone)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-date-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-date-to-timezone($arg as xs:date?) as xs:date?</xqf:signature>
                <xqf:template>fn:adjust-date-to-timezone($arg-date)</xqf:template>
                <xqf:returnType>date</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-date-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-date-to-timezone($arg as xs:date?, $timezone as xdt:dayTimeDuration?) as xs:date?</xqf:signature>
                <xqf:template>fn:adjust-date-to-timezone($arg-date, $timezone)</xqf:template>
                <xqf:returnType>date</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-time-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-time-to-timezone($arg as xs:time?) as xs:time?</xqf:signature>
                <xqf:template>fn:adjust-time-to-timezone($arg-time)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:adjust-time-to-timezone</xqf:name>
                <xqf:signature>fn:adjust-time-to-timezone($arg as xs:time?, $timezone as xdt:dayTimeDuration?) as xs:time?</xqf:signature>
                <xqf:template>fn:adjust-time-to-timezone($arg-time, $timezone)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>

            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-dateTime</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-dateTime($arg as xs:dateTime) as xs:dateTime</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-dateTime($arg-dateTime)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-dateTime</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-dateTime($arg as xs:dateTime, $duration as xs:dayTimeDuration) as xs:dateTime</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-dateTime($arg-dateTime, $duration-dayTimeDuration)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:remove-timezone-from-dateTime</xqf:name>
                <xqf:signature>fn-bea:remove-timezone-from-dateTime($arg as xs:dateTime) as xs:dateTime</xqf:signature>
                <xqf:template>fn-bea:remove-timezone-from-dateTime($arg-dateTime)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:remove-timezone-from-dateTime</xqf:name>
                <xqf:signature>fn-bea:remove-timezone-from-dateTime($arg as xs:dateTime, $duration as xs:dayTimeDuration) as xs:dateTime</xqf:signature>
                <xqf:template>fn-bea:remove-timezone-from-dateTime($arg-dateTime, $duration-dayTimeDuration)</xqf:template>
                <xqf:returnType>dateTime</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="dateTime"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>

            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-date</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-date($arg as xs:date) as xs:date</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-date($arg-date)</xqf:template>
                <xqf:returnType>date</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-date</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-date($arg as xs:date, $duration as xs:dayTimeDuration) as xs:date</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-date($arg-date, $duration-dayTimeDuration)</xqf:template>
                <xqf:returnType>date</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="date"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>

            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-time</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-time($arg as xs:time) as xs:time</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-time($arg-time)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:add-timezone-to-time</xqf:name>
                <xqf:signature>fn-bea:add-timezone-to-time($arg as xs:time, $duration as xs:dayTimeDuration) as xs:time</xqf:signature>
                <xqf:template>fn-bea:add-timezone-to-time($arg-time, $duration-dayTimeDuration)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:remove-timezone-from-time</xqf:name>
                <xqf:signature>fn-bea:remove-timezone-from-time($arg as xs:time) as xs:time</xqf:signature>
                <xqf:template>fn-bea:remove-timezone-from-time($arg-time)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn-bea:remove-timezone-from-time</xqf:name>
                <xqf:signature>fn-bea:remove-timezone-from-time($arg as xs:time, $duration as xs:dayTimeDuration) as xs:time</xqf:signature>
                <xqf:template>fn-bea:remove-timezone-from-time($arg-time, $duration-dayTimeDuration)</xqf:template>
                <xqf:returnType>time</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="time"/>
                    <xqf:param type="dayTimeDuration"/>
                </xqf:parameters>
            </xqf:function>

        </xqf:group>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_QNAME">
        <xqf:function>
            <xqf:name>fn:resolve-QName</xqf:name>
            <xqf:signature>fn:resolve-QName($qname as xs:string?, $element as element()) as xs:QName?</xqf:signature>
            <xqf:template>fn:resolve-QName($qname-string, $element-element)</xqf:template>
            <xqf:returnType>QName</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="element"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:expanded-QName</xqf:name>
            <xqf:signature>fn:expanded-QName($paramURI as xs:string?, $paramQName as xs:string) as xs:QName</xqf:signature>
            <xqf:template>fn:expanded-QName($paramURI-string, $paramQName-string)</xqf:template>
            <xqf:returnType>QName</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:local-name-from-QName</xqf:name>
            <xqf:signature>fn:local-name-from-QName($arg as xs:QName?) as xs:NCNAME?</xqf:signature>
            <xqf:template>fn:local-name-from-QName($arg-qname)</xqf:template>
            <xqf:returnType>NCNAME</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="QName"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:namespace-uri-from-QName</xqf:name>
            <xqf:signature>fn:namespace-uri-from-QName($arg as xs:QName?) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:namespace-uri-from-QName($arg-qname)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="QName"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:namespace-uri-for-prefix</xqf:name>
            <xqf:signature>fn:namespace-uri-for-prefix($prefix as xs:string, $element as element()) as xs:anyURI?</xqf:signature>
            <xqf:template>fn:namespace-uri-for-prefix($prefix-string, $element-element)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="element"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:in-scope-prefixes</xqf:name>
            <xqf:signature>fn:in-scope-prefixes($element as element()) as xs:string*</xqf:signature>
            <xqf:template>fn:in-scope-prefixes($element-element)</xqf:template>
            <xqf:returnType>string*</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="element"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_NODE">
        <xqf:function>
            <xqf:name>fn:name</xqf:name>
            <xqf:signature>fn:name($arg as node()?) as xs:string</xqf:signature>
            <xqf:template>fn:name($arg-node)</xqf:template>
            <xqf:returnType>string</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:local-name</xqf:name>
            <xqf:signature>fn:local-name($arg as node()?) as xs:string</xqf:signature>
            <xqf:template>fn:local-name($arg-node)</xqf:template>
            <xqf:returnType>string</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:namespace-uri</xqf:name>
            <xqf:signature>fn:namespace-uri($arg as node()?) as xs:anyURI</xqf:signature>
            <xqf:template>fn:namespace-uri($arg-node)</xqf:template>
            <xqf:returnType>anyURI</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:number</xqf:name>
            <xqf:signature>fn:number($arg as xdt:anyAtomicType?) as xs:double</xqf:signature>
            <xqf:template>fn:number($arg-atomic)</xqf:template>
            <xqf:returnType>double</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="anyAtomicType"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:lang</xqf:name>
            <xqf:signature>fn:lang($testlang as xs:string?, $node as node()) as xs:boolean</xqf:signature>
            <xqf:template>fn:lang($testlang-string, $node-node)</xqf:template>
            <xqf:returnType>boolean</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:root</xqf:name>
            <xqf:signature>fn:root($arg as node()?) as node()?</xqf:signature>
            <xqf:template>fn:root($arg-node)</xqf:template>
            <xqf:returnType>node</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="node"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_SEQUENCE">
        <xqf:group id="XQF_XQUERY_SEQUENCE_GENERAL">
            <xqf:function>
                <xqf:name>fn:boolean</xqf:name>
                <xqf:signature>fn:boolean($arg as item()*) as xs:boolean</xqf:signature>
                <xqf:template>fn:boolean($arg-item)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>op:concatenate</xqf:name>
                <xqf:signature>op:concatenate($seq1 as item()*, $seq2 as item()*) as item()*</xqf:signature>
                <xqf:template>op:concatenate($seq1-item, $seq2-item)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:index-of</xqf:name>
                <xqf:signature>fn:index-of($seqParam as xdt:anyAtomicType*, $srchParam as xdt:anyAtomicType) as xs:integer*</xqf:signature>
                <xqf:template>fn:index-of($seqParam-atomic, $srchParam-atomic)</xqf:template>
                <xqf:returnType>integer*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="anyAtomicType"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:index-of</xqf:name>
                <xqf:signature>fn:index-of($seqParam as xdt:anyAtomicType*, $srchParam as xdt:anyAtomicType, $collation as xs:string) as xs:integer*</xqf:signature>
                <xqf:template>fn:index-of($seqParam-atomic, $srchParam-atomic, $collation-string)</xqf:template>
                <xqf:returnType>integer*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="anyAtomicType"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:empty</xqf:name>
                <xqf:signature>fn:empty($arg as item()*) as xs:boolean</xqf:signature>
                <xqf:template>fn:empty($arg-item)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:exists</xqf:name>
                <xqf:signature>fn:exists($arg as item()*) as xs:boolean</xqf:signature>
                <xqf:template>fn:exists($arg-item)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:distinct-values</xqf:name>
                <xqf:signature>fn:distinct-values($arg as xdt:anyAtomicType*) as xdt:anyAtomicType*</xqf:signature>
                <xqf:template>fn:distinct-values($arg-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:distinct-values</xqf:name>
                <xqf:signature>fn:distinct-values($arg as xdt:anyAtomicType*, $collation as xs:string) as xdt:anyAtomicType*</xqf:signature>
                <xqf:template>fn:distinct-values($arg-atomic, $collation-string)</xqf:template>
                <xqf:returnType>anyAtomicType*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:insert-before</xqf:name>
                <xqf:signature>fn:insert-before($target as item()*, $position as xs:integer, $inserts as item()*) as item()*</xqf:signature>
                <xqf:template>fn:insert-before($target-item, $position-integer, $inserts-item)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="integer"/>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:remove</xqf:name>
                <xqf:signature>fn:remove($target as item()*, $position as xs:integer) as item()*</xqf:signature>
                <xqf:template>fn:remove($target-item, $position-integer)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="integer"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:reverse</xqf:name>
                <xqf:signature>fn:reverse($arg as item()*) as item()*</xqf:signature>
                <xqf:template>fn:reverse($arg-item)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:subsequence</xqf:name>
                <xqf:signature>fn:subsequence($sourceSeq as item()*, $startingLoc as xs:double) as item()*</xqf:signature>
                <xqf:template>fn:subsequence($sourceSeq-item, $startingLoc-double)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="double"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:subsequence</xqf:name>
                <xqf:signature>fn:subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) as item()*</xqf:signature>
                <xqf:template>fn:subsequence($sourceSeq-item, $startingLoc-double, $length-double)</xqf:template>
                <xqf:returnType>item*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="double"/>
                    <xqf:param type="double"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_SEQUENCE_CARDINALITY">
            <xqf:function>
                <xqf:name>fn:zero-or-one</xqf:name>
                <xqf:signature>fn:zero-or-one($arg as item()*) as item()?</xqf:signature>
                <xqf:template>fn:zero-or-one($arg-item)</xqf:template>
                <xqf:returnType>item</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:one-or-more</xqf:name>
                <xqf:signature>fn:one-or-more($arg as item()*) as item()+</xqf:signature>
                <xqf:template>fn:one-or-more($arg-item)</xqf:template>
                <xqf:returnType>item+</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:exactly-one</xqf:name>
                <xqf:signature>fn:exactly-one($arg as item()*) as item()</xqf:signature>
                <xqf:template>fn:exactly-one($arg-item)</xqf:template>
                <xqf:returnType>item</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_SEQUENCE_UNION">
            <xqf:function>
                <xqf:name>fn:deep-equal</xqf:name>
                <xqf:signature>fn:deep-equal($parameter1 as item()*, $parameter2 as item()*) as xs:boolean</xqf:signature>
                <xqf:template>fn:deep-equal($parameter1-item, $parameter2-item)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:deep-equal</xqf:name>
                <xqf:signature>fn:deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as string) as xs:boolean</xqf:signature>
                <xqf:template>fn:deep-equal($parameter1-item, $parameter2-item, $collation-string)</xqf:template>
                <xqf:returnType>boolean</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                    <xqf:param type="item*"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_SEQUENCE_AGGREGATION">
            <xqf:function>
                <xqf:name>fn:count</xqf:name>
                <xqf:signature>fn:count($arg as item()*) as xs:integer</xqf:signature>
                <xqf:template>fn:count($arg-item)</xqf:template>
                <xqf:returnType>integer</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="item*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:avg</xqf:name>
                <xqf:signature>fn:avg($arg as xdt:anyAtomicType*) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:avg($arg-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:max</xqf:name>
                <xqf:signature>fn:max($arg as xdt:anyAtomicType*) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:max($arg-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:max</xqf:name>
                <xqf:signature>fn:max($arg as xdt:anyAtomicType*, $collation as string) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:max($arg-atomic, $collation-string)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:min</xqf:name>
                <xqf:signature>fn:min($arg as xdt:anyAtomicType*) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:min($arg-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:min</xqf:name>
                <xqf:signature>fn:min($arg as xdt:anyAtomicType*, $collation as string) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:min($arg-atomic, $collation-string)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:sum</xqf:name>
                <xqf:signature>fn:sum($arg as xdt:anyAtomicType*) as xdt:anyAtomicType</xqf:signature>
                <xqf:template>fn:sum($arg-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:sum</xqf:name>
                <xqf:signature>fn:sum($arg as xdt:anyAtomicType*, $zero as xdt:anyAtomicType?) as xdt:anyAtomicType?</xqf:signature>
                <xqf:template>fn:sum($arg-atomic, $zero-atomic)</xqf:template>
                <xqf:returnType>anyAtomicType</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="anyAtomicType*"/>
                    <xqf:param type="anyAtomicType"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
        <xqf:group id="XQF_XQUERY_SEQUENCE_MISC">
            <xqf:function>
                <xqf:name>fn-bea:integer-sequence</xqf:name>
                <xqf:signature>fn-bea:integer-sequence($seq as node()*) as integer*</xqf:signature>
                <xqf:template>fn-bea:integer-sequence($seq-node)</xqf:template>
                <xqf:returnType>integer*</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="node*"/>
                </xqf:parameters>
            </xqf:function>
            <xqf:function>
                <xqf:name>fn:doc</xqf:name>
                <xqf:signature>fn:doc($uri as xs:string?) as document-node()?</xqf:signature>
                <xqf:template>fn:doc($uri-string)</xqf:template>
                <xqf:returnType>document-node</xqf:returnType>
                <xqf:parameters>
                    <xqf:param type="string"/>
                </xqf:parameters>
            </xqf:function>
        </xqf:group>
    </xqf:category>

    <xqf:category id="XQF_XQUERY_CONTEXT">
        <xqf:function>
            <xqf:name>fn:position</xqf:name>
            <xqf:signature>fn:position() as xs:integer</xqf:signature>
            <xqf:template>fn:position()</xqf:template>
            <xqf:returnType>integer</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:last</xqf:name>
            <xqf:signature>fn:last() as xs:integer</xqf:signature>
            <xqf:template>fn:last()</xqf:template>
            <xqf:returnType>integer</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:current-dateTime</xqf:name>
            <xqf:signature>fn:current-dateTime() as xs:dateTime</xqf:signature>
            <xqf:template>fn:current-dateTime()</xqf:template>
            <xqf:returnType>dateTime</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:current-date</xqf:name>
            <xqf:signature>fn:current-date() as xs:date</xqf:signature>
            <xqf:template>fn:current-date()</xqf:template>
            <xqf:returnType>date</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:current-time</xqf:name>
            <xqf:signature>fn:current-time() as xs:time</xqf:signature>
            <xqf:template>fn:current-time()</xqf:template>
            <xqf:returnType>time</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:implicit-timezone</xqf:name>
            <xqf:signature>fn:implicit-timezone() as xdt:dayTimeDuration</xqf:signature>
            <xqf:template>fn:implicit-timezone()</xqf:template>
            <xqf:returnType>dayTimeDuration</xqf:returnType>
        </xqf:function>
        <xqf:function>
            <xqf:name>fn:default-collation</xqf:name>
            <xqf:signature>fn:default-collation() as xs:string</xqf:signature>
            <xqf:template>fn:default-collation()</xqf:template>
            <xqf:returnType>string</xqf:returnType>
        </xqf:function>
    </xqf:category>

    <xqf:category id="XQF_SQL">
        <xqf:function>
            <xqf:name>fn-bea:execute-sql</xqf:name>
            <xqf:signature>fn-bea:execute-sql($datasource as xs:string, $rowElemName as xdt:anyAtomicType, $sql as xs:string, $params...) as element()*</xqf:signature>
            <xqf:template>fn-bea:execute-sql($datasource-string, $rowElemName, $sql-string, $params...)</xqf:template>
            <xqf:returnType>element*</xqf:returnType>
            <xqf:parameters>
                <xqf:param type="string"/>
                <xqf:param type="anyAtomicType"/>
                <xqf:param type="string"/>
            </xqf:parameters>
        </xqf:function>
    </xqf:category>

</xqf:xqueryFunctions>
        