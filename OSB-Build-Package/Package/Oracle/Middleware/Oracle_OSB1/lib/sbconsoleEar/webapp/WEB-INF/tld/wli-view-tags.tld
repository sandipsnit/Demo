<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">

<taglib>
    <tlib-version>1.0</tlib-version>
    <jsp-version>1.2</jsp-version>
    <short-name>view</short-name>
    <uri>wli-view-tags</uri>
    <display-name>WLI View Tags</display-name>
    <description>
        Tags used by the WLI and Service Bus management consoles.

        This library provides a set of tags for displaying read-only information
        such as on a details page. There are a variety of different tags to accommodate
        most situations.
    </description>


    <tag>
        <name>view-frame</name>
        <tag-class>com.bea.alsb.console.common.taglibs.view.Frame</tag-class>
        <body-content>JSP</body-content>
        <description>
            This tag creates the enclosing table for viewable data. This will
            contain one or more other view tags.
        </description>
        <attribute>
            <name>style</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Overide the default frame style.
            </description>
        </attribute>
        <example>
            &lt;v:view-frame &gt;
                &lt;v:view-label .... /&gt;
                ...
            &lt;/v:view-frame&gt;
        </example>
    </tag>

    <tag>
        <name>view-exception</name>
        <tag-class>com.bea.alsb.console.common.taglibs.view.ExceptionTag</tag-class>
        <body-content>JSP</body-content>
        <description>
            Show the exception message using the view tag.
        </description>
        <attribute>
            <name>header</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Header text used as a prefix to the exception. This can be a Text or String 
            </description>
        </attribute>
        <attribute>
            <name>exception</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                The exception message to show
            </description>
        </attribute>
        <attribute>
            <name>tdStyle</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Style class to decorate the Table Cell that contains the header and exception messages 
            </description>
        </attribute>
        <attribute>
            <name>headerStyle</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Style class to decorate the Header string
            </description>
        </attribute>
        <attribute>
            <name>exceptionStyle</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Style class to decorate the Exception string
            </description>
        </attribute>
    </tag>

    <tag>
        <name>view-include</name>
        <tag-class>com.bea.alsb.console.common.taglibs.view.Include</tag-class>
        <body-content>JSP</body-content>
        <description>
            allows other tags to be included here.
        </description>
        <attribute>
            <name>label</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Optional text for the label column. If label is not specified there
                will be no label column, and the included object will span the label
                column as well
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Overide the default row style.
            </description>
        </attribute>
        <attribute>
            <name>labelWidth</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                lebel column width
            </description>
        </attribute>
        <attribute>
            <name>align</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                alignment of the table cell. Used only when there is no label is specified.
            </description>
        </attribute>
        <example>
            &lt;v:view-include label="&lt;%= foo %&gt;"&gt;
                ...
            &lt;/v:view-include&gt;
        </example>
    </tag>

    <tag>
        <name>view-banner</name>
        <tag-class>com.bea.alsb.console.common.taglibs.view.Banner</tag-class>
        <body-content>empty</body-content>
        <description>
            Provides a separator bar which allows related data items to
            be grouped together.
        </description>
        <attribute>
            <name>title</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Either String or BaseText.
            </description>
        </attribute>
        <attribute>
            <name>description</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Provides a descriptive tooltip when the mouse hovers over the title. The value can be either String
                or BaseText.
            </description>
        </attribute>
        <attribute>
            <name>edit</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                When specified, an edit link is displayed on the right with the given action url.
            </description>
        </attribute>
        <attribute>
            <name>width</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Banner column width.
            </description>
        </attribute>
        <attribute>
            <name>command</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Command Id associated with the tag.
            </description>
        </attribute>
        <example>
            &lt;v:view-banner title="Transport Data" /&gt;
        </example>
    </tag>


    <tag>
        <name>view-data</name>
        <tag-class>com.bea.alsb.console.common.taglibs.view.Element</tag-class>
        <body-content>empty</body-content>
        <description>
            The main tag which is used to display items of information.
            The tag is flexible enough to be able to display a variety of
            different data types and will determine the best display approach
            at runtime based on the type of the object to be displayed.
        </description>
        <attribute>
            <name>label</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                the label for the element being displayed. Usually this will be a BaseText object
                but there will be occasions where this is a String so let the tag code determine
                which is which.
            </description>
        </attribute>
        <attribute>
            <name>value</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                the value for the element being displayed. Depending on the actual type of the
                object, the value may be formatted differently. for instance if the value is
                a com.bea.alsb.console.common.messages.Text object, its get() method will be used. If it is
                a java.util.Date then it will be formatted based on the locale. For more details
                about formatting see the javadoc for the implementing class.
                Array values are treated specially. Normally, each element is formatted according
                to its type. The array is then displayed either as a list of of comma separated values
                or displayed in tabular format. See the arrayStyle element
            </description>
        </attribute>
        <attribute>
            <name>rawdata</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>byte[]</type>
            <description>
                Similar to the value attribute above except that the data is raw binary data
                and not one or more java objects. The formatting rules for this type of data
                is the same as for an array of objects as explained above. See the arrayStyle
                attribute.
            </description>
        </attribute>
        <attribute>
            <name>numericValue</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>long</type>
            <description>
                This is a convenience attribute and is meant to be used instead of the 'value'
                attribute for simple integers or long values, and avoid calls to Long.parseLong()
                which could be quite verbose at times.
            </description>
        </attribute>
        <attribute>
            <name>nullValueString</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Object</type>
            <description>
                Text to be printed if the value is null. This can be either a java.lang.String
                or com.bea.alsb.console.common.messages.Text. Anything else makes this default to Non-breaking space.
                If this value is a String it is encoded so that html is not displayed. If it is Text
                it is not encoded.
            </description>
        </attribute>
        <attribute>
            <name>arrayStyle</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>int</type>
            <description>
                describes the formatting for array values. See the implementing class for possible values.
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                Overide the default row style.
            </description>
        </attribute>
        <attribute>
            <name>url</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                uri for the value.
            </description>
        </attribute>
        <attribute>
            <name>labelWidth</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
                label column width
            </description>
        </attribute>
        <example>
            &lt;v:view-data label="Transport Mechanism"
                         value="&lt;%= foo %&gt;" /&gt;
        </example>
    </tag>
</taglib>
