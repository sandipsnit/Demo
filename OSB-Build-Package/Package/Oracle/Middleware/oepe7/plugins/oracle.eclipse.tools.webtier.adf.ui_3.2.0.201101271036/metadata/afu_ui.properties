# WARNING: THIS FILE IS 100% GENERATED AND SHOULD NEVER BE MODIFIED
# Mon Jan 10 22:20:29 PST 2011
ADVANCED_GROUP=Advanced
APPEARANCE_GROUP=Appearance
BEHAVIOR_GROUP=Behavior
CALENDAR_DATA_GROUP=Calendar Data
COLORS_GROUP=Colors
COLUMNS_GROUP=Columns
COMMON_GROUP=Common
DATA_GROUP=Data
DATES_GROUP=Dates
MESSAGES_GROUP=Messages
RULES_GROUP=Rules
STYLE_AND_THEME_GROUP=Style and Theme
STYLE_GROUP=Style
activeCommandToolbarButton.accessKey.description= character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
activeCommandToolbarButton.actionListener.description=a method reference to an action listener
activeCommandToolbarButton.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
activeCommandToolbarButton.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
activeCommandToolbarButton.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
activeCommandToolbarButton.depressedIcon.description= The URI of an image to be displayed on the toolbar button when the mouse has pressed the button. This attribute supports the same URI types described for the icon attribute. As depressedIcon does not allow alternative text to be provided for the image, in order to create an accessible product depressedIcon must only be used when its use is purely decorative. 
activeCommandToolbarButton.description=The activeCommandToolbarButton creates a button in a toolbar. It is normally used inside of a &lt;af:toolbar&gt; component. activeCommandToolbarButtons are not rendered on printable pages. Due to performance overhead compared to &lt;af:commandToolbarButton&gt;, you should only use this component if you plan to support changing the visible attribute through active data, otherwise you should use the &lt;af:commandToolbarButton&gt; component.
activeCommandToolbarButton.disabled.description=whether the component is interactive or not. The default value is "false" and component assumes its expected behavior.
activeCommandToolbarButton.disabledIcon.description= The URI of an image to be displayed on the toolbar button when the button is disabled. This attribute supports the same URI types described for the icon attribute. As disabledIcon does not allow alternative text to be provided for the image, in order to create an accessible product disabledIcon must only be used when its use is purely decorative. 
activeCommandToolbarButton.display-label=Toolbar Button (Active)
activeCommandToolbarButton.hoverIcon.description= the URI of an image to be displayed on the toolbar button when the mouse is hovering over the button. This attribute supports the same URI types described for the icon attribute. As hoverIcon does not allow alternative text to be provided for the image, in order to create an accessible product hoverIcon must only be used when its use is purely decorative. 
activeCommandToolbarButton.icon.description= The URI of an image to be displayed on the toolbar button. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
activeCommandToolbarButton.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
activeCommandToolbarButton.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
activeCommandToolbarButton.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
activeCommandToolbarButton.launchListener.description=a method reference to a launch listener
activeCommandToolbarButton.partialSubmit.description=whether the action should be done through a partial page submit or not. The default is true for activeCommandToolBarButton, so be sure to specify partialTriggers if content needs to be updated.
activeCommandToolbarButton.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
activeCommandToolbarButton.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
activeCommandToolbarButton.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
activeCommandToolbarButton.selected.description=whether the item is selected, for buttons of type radio or check. For radio buttons, there is no server model implemented for handling mutual exclusivity. If a user clicks a new button, the old selection will be unselected. If you programatically call setSelected(true) from code, you must call setSelected(false) on the prior selection as well.
activeCommandToolbarButton.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
activeCommandToolbarButton.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
activeCommandToolbarButton.text.description=the text displayed in the toolbar item.
activeCommandToolbarButton.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
activeCommandToolbarButton.type.description=the type of the toolbar button.
activeCommandToolbarButton.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
activeCommandToolbarButton.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
activeCommandToolbarButton.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
activeCommandToolbarButton.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
activeCommandToolbarButton.windowHeight.description=the height of the window, if this command is used to launch a window.
activeCommandToolbarButton.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
activeCommandToolbarButton.windowWidth.description=the width of the window, if this command is used to launch a window.
activeImage.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
activeImage.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
activeImage.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
activeImage.description=The image component renders an image specified by the source property. Due to performance overhead compared to &lt;af:image&gt;, you should only use this component if you plan to support changing the source attribute through active data, otherwise you should use the &lt;af:image&gt; component.
activeImage.display-label=Image (Active)
activeImage.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
activeImage.imageMapType.description=if a server-side image map is desired, specify "server" and place the image inside a CoreGoLink component. URI of the server-side image map file has to be given as a destination attribute for the goLink component. Default value for imageMapType is "none".
activeImage.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
activeImage.longDescURL.description=a URL to a document that contains a long description of the image. This description should supplement the short description.
activeImage.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
activeImage.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
activeImage.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
activeImage.source.description=the URI specifying the location of the image resource.
activeImage.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
activeImage.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
activeImage.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
activeOutputText.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
activeOutputText.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
activeOutputText.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
activeOutputText.description=The activeOutputText component supports styled text. The text can optionally be left unescaped. Due to perforamnce overhead compared to &lt;af:outputText&gt;, you should only use this component if you plan to support changing the text through active data, otherwise you should use the &lt;af:outputText&gt; component. Unlike OutputText, conversion to and from Java objects is not supported.
activeOutputText.description.description=an additional description to be attached to the text, for use in improving accessibility. The description will be available to screen readers and other accessibility agents, but will not be otherwise visible.
activeOutputText.display-label=Output Text (Active)
activeOutputText.escape.description= an attribute controlling whether output will be escaped for the current markup language or not. This attribute defaults to true, and should only be set to false if absolutely necessary. When set to false, you may exposed to cross-site scripting attacks if the value of this component is any way derived from values supplied by a user; see outputFormatted for a safe, non-active alternative. In addition, nearly all attributes are ignored when "escape" is set to false (e.g., "styleClass" is not output).
activeOutputText.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
activeOutputText.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
activeOutputText.noWrap.description=whether whitespace wrapping should be allowed in this component.
activeOutputText.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
activeOutputText.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
activeOutputText.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
activeOutputText.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
activeOutputText.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
activeOutputText.value.description=the String to display
activeOutputText.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
attributeDragSource.display-label=Attribute Drag Source 
attributeDropTarget.display-label=Attribute Drop Target 
autoSuggestBehavior.display-label=Auto Suggest Behavior 
breadCrumbs.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
breadCrumbs.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
breadCrumbs.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
breadCrumbs.description=A breadCrumbs component is used in hierarchical site layouts to indicate the path back to the root page of the hierarchy with links.
breadCrumbs.display-label=Bread Crumbs 
breadCrumbs.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
breadCrumbs.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
breadCrumbs.orientation.description=whether to put links on the same line or indented and on new lines.If the orientation is &quot;horizontal&quot;, successive links will be put on the same line. If the orientation is &quot;vertical&quot;, successive links will be put on a new line, and indented from their parents. In most cases, the orientation should be horizontal. A vertical breadCrumbs should be used only when the text for the links is known to be very long and likely to cause undesirable scrolling. The default value is horizontal.
breadCrumbs.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
breadCrumbs.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
breadCrumbs.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
breadCrumbs.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
breadCrumbs.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
breadCrumbs.value.description=the hierarchy of navigation data - must be of type org.apache.myfaces.trinidad.model.MenuModel
breadCrumbs.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
breadCrumbs.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
breadCrumbs.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
calendar.activeDay.description=The activeDay drives the display range shown, and must be changed in order to show a new display range. For example to display the month of June 2008 in month view, the activeDay must be a day in June 2008. The activeDay is also the specific date that will be shown in day view. When the arrows in the toolbar are used, the activeDay will be changed. For example if the arrow is pressed when the activeDay is June 8, 2009 and the view is 'month' then the activeDay will change to July 8, 2009. 
calendar.activityStyles.description=Allows per activity instance style customization. The type is Map&lt;Set&lt;String>, InstanceStyles>. The Set&lt;String> being used for the map key will come from getTags() on CalendarActivity. The value is an instanceStyles object. Calendar skinning keys will be passed to the instanceStyle object and per activity styles returned. For built in color ramps see CalendarActivityRamp.getActivityRamp, which returns a CalendarActivityRamp object, a subclass of InstanceStyles
calendar.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
calendar.availableViews.description=Available calendar views. The built-in strings recognized are a combination of: "all" - all built-in views the calendar provides - if "all" is in the list, other strings are ignored "day" - if present, Day view is available in the calendar "week" - if present, Week view is available in the calendar "month" - if present, Month view is available in the calendar. Day view must also be added to allow the user to view overflow (+n more) activities. "list" - if present, List view is available in the calendar The view specified by the 'view' attribute must correspond to one of the entries in availableViews. Otherwise, the calendar will default to the first built-in view type in availableViews. The toolbar buttons which toggle the Calendar view will appear in the order specified in 'availableViews'. If there is only one view specified in 'availableViews', the buttons will be hidden.
calendar.calendarActivityDurationChangeListener.description=a method reference to a calendarActivityDurationChange listener.
calendar.calendarActivityListener.description=a method reference to a calendarActivity listener.
calendar.calendarDisplayChangeListener.description=a method reference to a calendarDisplayChange listener.
calendar.calendarListener.description=a method reference to a calendar event listener.
calendar.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
calendar.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
calendar.dateCustomizer.description=DateCustomizer allows for per date customizations such as string formatting. Keys passed to the DateCustomizer.format method are "af|calendar::month-grid-cell-header-day-link": in month view, customize the date link labels in the cell header, for example replace "5" with "-34" "af|calendar::month-grid-cell-header-misc": in month view, add miscellaneous text to the empty area of the cell header. For example on Jan 1, add the text "New Year's Day". 
calendar.description=The calendar component provides the user the ability to view a calendar and the activities by day, week, month, list.
calendar.display-label=Calendar
calendar.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
calendar.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
calendar.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
calendar.listCount.description=This is the number of days to show in list view when the listType is dayCount. The default is 14.
calendar.listType.description=Drives which activities are displayed in list view. day - activities for the activeDay week - activities for the week that includes the activeDay month - activities for the month that includes the activeDay dayCount - starting with the activeDay, show activities for a certain number of days. The actual number of days to show is set in the listCount attribute. dayCount is the default. 
calendar.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
calendar.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
calendar.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
calendar.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
calendar.startDayOfWeek.description=Returns the start day of the week in week or month view. When not set this will default based on the locale, for example it may be Sunday in the U.S., but Monday in France.
calendar.startHour.description=The start hour that is scrolled into view. Valid values are 0-23. The default startHour is 8.
calendar.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
calendar.timeZone.description=The timezone to use for this instance. If not set, the timezone is pulled from the AdfFacesContext.
calendar.toolboxLayout.description=Allows control over the layout of the toolbar. The built in strings the component recognizes are: "all" - all the buttons calendar provides by default - if "all" is in the list, the built in strings 'range', 'dates', and 'views' are ignored "range" - the string showing the date range displayed "dates" - the buttons that change the date: today, previous, and next "views" - the view buttons: day, week, month, list "newline" - means put the next thing on a new line "stretch" - adds a stretched component Custom toolbox content: when the calendar encounters a string in toolboxLayout that it doesn't recognize, like 'customToolbarXyz', it looks for a facet of that name and renders the content if it finds it. In the future new facets may be added to calendar. In order to avoid future name clashes strings starting with the word 'custom' should be used for custom facets. We make no guarantees for other names. The toolboxLayout attribute allows the user to add as many custom toolbars as desired, for example toolboxLayout="customToolbar1 all customToolbar2" stack as many toolbars as desired, for example toolboxLayout="all newline customToolbar newline customGroup" show multiple rows of toolbars. for example toolboxLayout="customToolbar1 newline all" reorder the button groups, for example toolboxLayout="views stretch range dates" remove toolbar content that isn't desired, for example the date buttons won't show up with this: toolboxLayout="views" 
calendar.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
calendar.value.description=the model providing activity data - must be of type oracle.adf.view.rich.model.CalendarModel
calendar.view.description=calendar view: day, week, month, or list. The default is month.
calendar.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
calendarDropTarget.display-label=Calendar Drop Target 
carousel.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
carousel.carouselSpinListener.description=a method reference to a carousel spin listener
carousel.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
carousel.contentDelivery.description=whether data should be fetched when the component is rendered initially. When contentDelivery is "immediate", data is fetched and inlined into the component chrome. If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request.
carousel.controlArea.description=specifies how the area where the user spins the carousel is presented. The "full" option lets a user spin through carousel items one at a time, jump to a specific item, or drag the slider thumb to continuously spin the carousel until the mouse is let go. The "small" option lets a user click the next and previous buttons to spin through carousel items one at a time. The "compact" option is similar to "small" but omits details such as the "x of y" progress information.
carousel.currentItemKey.description=the key that identifies the current item in this component.
carousel.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
carousel.description=The carousel component displays a spinning series of items based on rows of a collection model.
carousel.disabled.description=a boolean which if the value is "true", the component becomes non-interactive. Otherwise, the default value is "false" and component assumes its expected behavior.
carousel.display-label=Carousel
carousel.displayItems.description=the current carousel item will always be shown but you can use this attribute to specify how the auxiliary carousel items are displayed. Use "circular" if you want the auxiliary items displayed near the current item in a scaled down pattern with as many items shown as will fit. Use "oneByOne" if you only want the current item shown.
carousel.emptyText.description=the text of an empty carousel. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component. If it is not enclosed in an open and closing html tag, it will not be formatted.
carousel.fetchSize.description=the number of rows in the data fetch block
carousel.first.description=the index of the first row in the currently range of rows. This index is zero-based. This attribute is used to control which range of rows to display to the user.
carousel.halign.description=determines the horizontal alignment of the carousel items.
carousel.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
carousel.immediate.description=whether or not data validation - client-side or server-side - should take place when events are generated by this component. When immediate is true, the default ActionListener provided by the JavaServer Faces implementation should be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase.
carousel.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
carousel.orientation.description=horizontal (the default) for the images being displayed along an x-axis or vertical for y-axis.
carousel.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
carousel.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
carousel.rows.description=the maximum number of rows to display in a single range of rows. Some ranges might have fewer than the number of rows specified by this attribute (eg: the last range might have an insufficient number of rows). To display all rows at once, set this attribute to 0. The default is 25.
carousel.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
carousel.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
carousel.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
carousel.valign.description=determines the vertical alignment of the carousel items.
carousel.value.description=the data model being used by this component. The specific model class is org.apache.myfaces.trinidad.model.CollectionModel. You may also use other model instances, e.g., java.util.List , array, and javax.faces.model.DataModel. This component will automatically convert the instance into a CollectionModel.
carousel.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
carousel.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
carousel.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
carouselItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
carouselItem.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
carouselItem.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
carouselItem.description=The carouselItem component must be placed inside of a carousel component. It represents an item inside of a carousel component and its text attribute will be displayed when it is the current item the carousel.
carouselItem.display-label=Carousel Item 
carouselItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
carouselItem.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
carouselItem.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
carouselItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
carouselItem.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
carouselItem.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
carouselItem.text.description=the text of the carousel item
carouselItem.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
carouselItem.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
checkUncommittedDataBehavior.display-label=Check Uncommitted Data Behavior 
chooseColor.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
chooseColor.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
chooseColor.colorData.description=the list of colors to be displayed in the standard color palette. The number of provided colors can be 49, 64 and 121, depending on the width attribute. For example, if width is 7, the number should be 49. If the number does not match the width, extra color element in the list will be ignored and missing color elements will be displayed as no-color. The color list must be of an array of type TrColor in the client side. On the server side, it must be a java.util.List of java.awt.Color objects or a java.util.List of hex color code strings (in the tag only). Customer may define their own color palette, such as show 169 color palette with width of value 13.
chooseColor.customColorData.description=the list of custom defined colors. The number of colors can be 7, 8, 11, equivalent to the width attribute. The color list must be of an array of type TrColor in the client side. On the server side, it must be a java.util.List of java.awt.Color objects or a java.util.List of hex color code strings (in the tag only).
chooseColor.customVisible.description=whether the Custom Color button and custom color row are displayed. When set to true, the Custom Color Button and custom color row will be rendered.
chooseColor.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
chooseColor.defaultColor.description=the default color. When setting using the tag it could take a type java.lang.String of hex color code.
chooseColor.defaultVisible.description=whether the Default button is displayed. When set to true, the Default Button will be rendered.
chooseColor.description=The chooseColor component is used in conjunction with a inputColor to allow the user to quickly select a color value without having to navigate to a secondary window.
chooseColor.display-label=Choose Color 
chooseColor.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
chooseColor.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
chooseColor.lastUsedVisible.description=whether the Last Used button is displayed. When set to true, the Last Used Button will be rendered. Last used color information does not persist across browser sessions.
chooseColor.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
chooseColor.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
chooseColor.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
chooseColor.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
chooseColor.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
chooseColor.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
chooseColor.width.description=the width of the standard palette in cells. The supported values listed above will show the palette with 49, 64 and 121 colors respectively. In case the width specified is not one of the default supported values, the color palette with closest and less number of colors will be used unless a custom color palette is defined using the colorData attribute.
chooseDate.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
chooseDate.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
chooseDate.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
chooseDate.description=The chooseDate component is used in conjunction with a inputDate to allow the user to quickly select a date value without having to navigate to a secondary window.
chooseDate.disabledDays.description=a binding to an implementation of the org.apache.myfaces.trinidad.model.DateListProvider interface. The getDateList method should generate a List of individual java.util.Date objects which will be rendered as disabled. The Dates must be in the context of the given base Calendar. Note: this binding requires periodic roundtrips. If you just want to disable certain weekdays (e.g. Saturday and Sunday), use the disabledDaysOfWeek attribute!
chooseDate.disabledDaysOfWeek.description=a whitespace delimited list of weekdays that should be rendered as disabled in every week. The list should consist of one or more of the following abbreviations: sun, mon, tue, wed, thu, fri, sat. By default all days are enabled.
chooseDate.disabledMonths.description=a whitespace delimited list of months that should be rendered as disabled in every year. The list should consist of one or more of the following abbreviations: jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec. By default all months are enabled.
chooseDate.display-label=Choose Date 
chooseDate.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
chooseDate.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
chooseDate.maxValue.description=the maximum value allowed for the Date value. When set to a fixed value on a tag, this will be parsed as an ISO 8601 date. ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's timezone, with the time components (hours, minutes, seconds, milliseconds) maximized. All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with maximum value for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds) to allow the largest range of values to be accepted.
chooseDate.minValue.description=the minimum value allowed for the Date value. When set to a fixed value on a tag, this will be parsed as an ISO 8601 date. ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's timezone, with the time components (hous, minutes, seconds, milliseconds) zeroed-out. All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with zeroed-out values for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds) to allow the largest range of values to be accepted.
chooseDate.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
chooseDate.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
chooseDate.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
chooseDate.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
chooseDate.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
chooseDate.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
clientAttribute.display-label=Client Attribute 
clientListener.display-label=Client Listener 
collectionDragSource.display-label=Collection Drag Source 
collectionDropTarget.display-label=Collection Drop Target 
column.align.description=The alignment for this column. "start", "end" and "center" are used for left-justified, right-justified, and center-justified respectively in LTR display. "left" or "right" can be used when left-justified or right-justified cells are needed irrespective of the LTR or RTL display. The default value is null, which implies that it is skin dependent and may vary for the row header column vs data column.
column.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
column.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
column.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
column.description=Component that is used as a child of the Table component. The Column component defines the header, footer and data for a single column in the Table.
column.display-label=Column
column.displayIndex.description=The display order index of the column. Columns can be re-arranged and they are displayed in the table based on the displayIndex. Columns are sorted based on the displayIndex property, columns without displayIndex are displayed at the end, in the order in which they appear. The displayIndex attribute is honored only for top level columns, since it is not possible to rearrange a child column outside of the parent column.
column.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
column.filterFeatures.description=The filter features for this column. A set of flags which specify how this column should be filtered in query-by-example (QBE). Currently the only values supported are: "caseSensitive" and "caseInsensitive". If not specified, the case sensitivity is model-dependent. The features are hints for a collection model, which supports filtering, to perform special filtering operations (such as case-sensitive/insensitive filtering)
column.filterable.description=whether or not the column is filterable. A filterable column will have a filter field on the top of the column header. Note that in order for a column to be filterable, this attribute must be set to "true" and the filterModel attribute will be set on the table. Only Leaf columns are filterable and the filter component is displayed only if the column header is present. The column header is present if the "headerText" attribute or "header" facet is set on the column. This column's "sortProperty" attribute will be used as a key for the filterProperty in the filterModel. This implies that "sortProperty" *must* be set on the column for it to be filterable. Also look at "filter" facet for providing a component other than the default inputText for filtering. 
column.footerClass.description=a CSS style class to use for the column footer. The headerClass, footerClass and the styleClass attributes on the column should be used with caution. Changing the horizontal padding/borders of the header, footer and data cells will mess up alignment of the table cells.
column.frozen.description=Specifies whether the column is frozen. In the table columns until the frozen column are locked with the header and not scrolled with the rest of the columns. Frozen attribute is honored only on the top level column,since it is not possible to freeze a child column by itself without its parent being frozen. If the table has a detailStamp for its rows, column freezing is turned off.
column.headerClass.description=a CSS style class to use for the column header. The headerClass, footerClass and the styleClass attributes on the column should be used with caution. Changing the horizontal padding/borders of the header, footer and data cells will mess up alignment of the table cells.
column.headerNoWrap.description=whether or not the column header should be allowed to wrap
column.headerText.description=text to display in the header of the column. This is a convenience that generates output equivalent to adding a "header" facet containing an outputText. If a "header" facet is added, headerText will not be rendered in column header.
column.helpTopicId.description=Id used to look up a topic in a helpProvider.
column.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
column.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
column.minimumWidth.description=The minimum number of pixels that the column can become. When a user attempts to resize the column, this minimum width will be enforced. Also, when a column is flexible, it will also never be stretched to be a size smaller than this minimum width. If a pixel width is defined and if the minimum width is larger, the minimum width will become the smaller of the two values. By default, the minimum width is 12 pixels.
column.noWrap.description=Specifies whether whitespace wrapping should be allowed in this column.
column.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
column.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
column.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
column.rowHeader.description= Whether or not this column is the row header column for the table. Valid values are "true", "false", and "unstyled". The default value is "false" and results in no special handling. A column that is marked as rowHeader "true" is moved to the starting position (displayIndex = 0) and is automatically frozen. The value of "unstyled" only has an effect in screenReader mode. In screen reader mode, when the rowHeader is set to "true" the column's data is also marked with the HTML TH tag. This is important, as screen reader applications expect to see one (and only one) data cell per row marked as the row header for that row. It may be desirable to have a column marked as the rowHeader in screen reader mode but to not be rendered differently in regular mode. For this case you can use the rowHeader "unstyled" value. In regular mode, a column marked as rowHeader "unstyled" does not appear any differently than a column that is rowHeader "false". In screen reader mode, however, a column marked as rowHeader "unstyled" receives the HTML TH tag and is moved to the starting position. Please note that for screen reader mode compatability, a table (or treeTable) should have one (and only one) column marked as either headerText "true" or headerText "unstyled". 
column.selected.description=Specifies whether the column is selected.
column.separateRows.description=This property is currently not supported in the rich client.
column.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window.
column.showRequired.description=Indicates whether the columns displays a visual indication of required user input.
column.sortProperty.description=The property that is displayed by this Column. This is the property that the framework might use to (for example) sort the Table's data.
column.sortable.description=whether or not the column is sortable. A sortable column has a clickable header that (when clicked) sorts the table by that column's property. Note that in order for a column to be sortable, this attribute must be set to "true" and the underlying model must support sorting by this column's property. This column's "sortProperty" attribute must be set if sorting is desired.
column.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
column.visible.description=the visibility of the column. If it is "false", the column will not be displayed in the table on the client. Unlike "rendered", this does affect the lifecycle on the server - the column may have its bindings executed, etc. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client.
column.width.description=The width of the column. The default width for a column is 100px. There is no auto sizing for columns. Set the width attribute to ensure the column is wide enough to accommodate the width of the contents.
commandButton.accessKey.description= a character used to gain quick access to this button. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this button instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
commandButton.actionListener.description=a method reference to an action listener
commandButton.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandButton.blocking.description=an attribute which if set to TRUE the component will start blocking user input when the action is initiated. The blocking will stop when a response is received from the server.
commandButton.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandButton.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandButton.description=The commandButton component creates a button that, when pressed, will generate an action event on the server. The button can contain text, an image, or text and an image.
commandButton.disabled.description=whether the button should be disabled. The disabled attribute is secured and cannot be set on the client.
commandButton.display-label=Button
commandButton.icon.description= the URI of an image to be displayed on the button. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
commandButton.iconPosition.description=an attribute specifying the position of the icon.
commandButton.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandButton.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandButton.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandButton.launchListener.description=a method reference to a launch listener
commandButton.partialSubmit.description=whether the action should be done through a partial page submit or not. Default is false: no partial page submit; the full page will be refreshed. When set to true, the full page will not be refreshed. To re-render specific components on your page in response to the partial page submit, you have to tell ADF Faces. The easiest way to do this is with the partialTriggers attribute.
commandButton.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandButton.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandButton.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandButton.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandButton.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandButton.text.description=the textual label of the button.
commandButton.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandButton.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandButton.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandButton.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandButton.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandButton.windowHeight.description=the height of the window, if this command is used to launch a window.
commandButton.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandButton.windowWidth.description=the width of the window, if this command is used to launch a window.
commandImageLink.accessKey.description= a character used to gain quick access to this link. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this Link instance. If it does not, the user will receive no visual indication of the existence of the accessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
commandImageLink.actionListener.description=a method reference to an action listener
commandImageLink.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandImageLink.blocking.description=an attribute which if set to TRUE the component will start blocking user input when the action is initiated. The blocking will stop when a response is received from the server.
commandImageLink.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandImageLink.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandImageLink.depressedIcon.description= the URI of an image to be displayed with this link when the mouse has pressed the link. This attribute supports the same URI types described for the icon attribute. As depressedIcon does not allow alternative text to be provided for the image, in order to create an accessible product depressedIcon must only be used when its use is purely decorative. 
commandImageLink.description=The commandImageLink control creates a link with extra images added.
commandImageLink.disabled.description=whether the link should be considered disabled. This attribute only has meaning when links are used in certain container types, such as global headers and tab bars.
commandImageLink.disabledIcon.description= the URI of an image to be displayed with this link when the link is disabled. This attribute supports the same URI types described for the icon attribute. As disabledIcon does not allow alternative text to be provided for the image, in order to create an accessible product disabledIcon must only be used when its use is purely decorative. 
commandImageLink.display-label=Image Link
commandImageLink.hoverIcon.description= the URI of an image to be displayed with this link when the mouse is hovering over the link. This attribute supports the same URI types described for the icon attribute. As hoverIcon does not allow alternative text to be provided for the image, in order to create an accessible product hoverIcon must only be used when its use is purely decorative. 
commandImageLink.icon.description= the URI of an image to be displayed with the link. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
commandImageLink.iconPosition.description=an attribute specifying the position of the icon.
commandImageLink.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandImageLink.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandImageLink.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandImageLink.launchListener.description=a method reference to a launch listener
commandImageLink.partialSubmit.description=whether the action should be done through a partial page submit or not. Default is false: no partial page submit; the full page will be refreshed. When set to true, the full page will not be refreshed. To re-render specific components on your page in response to the partial page submit, you have to tell ADF Faces. The easiest way to do this is with the partialTriggers attribute.
commandImageLink.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandImageLink.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandImageLink.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandImageLink.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandImageLink.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandImageLink.text.description=the textual label of the link.
commandImageLink.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandImageLink.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandImageLink.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandImageLink.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandImageLink.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandImageLink.windowHeight.description=the height of the window, if this command is used to launch a window.
commandImageLink.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandImageLink.windowWidth.description=the width of the window, if this command is used to launch a window.
commandLink.accessKey.description= a character used to gain quick access to this link. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this Link instance. If it does not, the user will receive no visual indication of the existence of the accessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
commandLink.actionListener.description=a method reference to an action listener
commandLink.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandLink.blocking.description=an attribute which if set to TRUE the component will start blocking user input when the action is initiated. The blocking will stop when a response is received from the server.
commandLink.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandLink.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandLink.description=The commandLink component creates a link that, when pressed, will generate an action event on the server.
commandLink.disabled.description=whether the link should be considered disabled. This attribute only has meaning when links are used in certain container types, such as global headers and tab bars.
commandLink.display-label=Link
commandLink.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandLink.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandLink.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandLink.launchListener.description=a method reference to a launch listener
commandLink.partialSubmit.description=whether the action should be done through a partial page submit or not. Default is false: no partial page submit; the full page will be refreshed. When set to true, the full page will not be refreshed. To re-render specific components on your page in response to the partial page submit, you have to tell ADF Faces. The easiest way to do this is with the partialTriggers attribute.
commandLink.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandLink.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandLink.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandLink.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandLink.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandLink.text.description=the textual label of the link.
commandLink.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandLink.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandLink.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandLink.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandLink.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandLink.windowHeight.description=the height of the window, if this command is used to launch a window.
commandLink.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandLink.windowWidth.description=the width of the window, if this command is used to launch a window.
commandMenuItem.accelerator.description=the keystroke that will activate this command. This keystroke will be converted into a textual representation and displayed as the accelerator label for this menu item.
commandMenuItem.accessKey.description= a character used to gain quick access to this button. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this button instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. Beyond normal type menu access key behavior, menus and commandMenuItems support menu-type access key behavior when the focus is currently in a menu or menuBar. Menu-type access key behavior allows access to contained menus, submenus, and commandMenuItems without the need for any keyboard modifiers. When the focus is inside a menu or menuBar, you can simply press the accessKey, without modifiers, for a menu or commandMenuItem accessible within the menu or menuBar to immediately move focus to that menu item. 
commandMenuItem.actionListener.description=a method reference to an action listener
commandMenuItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandMenuItem.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandMenuItem.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandMenuItem.description=The menuItem control creates a menu item representation of a UIXCommand.
commandMenuItem.disabled.description=whether the item should be disabled.
commandMenuItem.display-label=Menu Item
commandMenuItem.icon.description= the URI of an image to be displayed on the menu item. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
commandMenuItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandMenuItem.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandMenuItem.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandMenuItem.launchListener.description=a method reference to a launch listener
commandMenuItem.partialSubmit.description=whether the action should be done through a partial page submit or not. Default is true: commandMenuItems use partial submissions by default. To re-render specific components on your page in response to the partial page submit, you have to tell ADF Faces. The easiest way to do this is with the partialTriggers attribute.
commandMenuItem.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandMenuItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandMenuItem.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandMenuItem.selected.description=whether the item is selected.
commandMenuItem.selectedText.description=the alternate text shown when a type antonym menu item is selected.
commandMenuItem.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandMenuItem.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandMenuItem.text.description=the text of the item
commandMenuItem.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandMenuItem.type.description= the type of menu item. The default type is a normal menu item, while the other types provide special behavior. The check type displays a check mark next to it when it is selected. It is useful to represent a boolean toggle. The radio type displays a radio button next to it when it is selected. It is useful to represent a multiple choice toggle. Radio type menu items are considered part of the same group by their container, either menu or group. When a radio type menu item is selected, other radio type menu items in the same group are unselected. The antonym type displays different text depending on its selection state. When it is not selected, it displays its text value. When it is selected, it displays its selectedText value. 
commandMenuItem.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandMenuItem.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandMenuItem.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandMenuItem.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandMenuItem.windowHeight.description=the height of the window, if this command is used to launch a window.
commandMenuItem.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandMenuItem.windowWidth.description=the width of the window, if this command is used to launch a window.
commandNavigationItem.accessKey.description= a character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
commandNavigationItem.actionListener.description=a method reference to an action listener
commandNavigationItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandNavigationItem.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandNavigationItem.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandNavigationItem.description=The navigationItem control creates a navigation item representation of a UIXCommand.
commandNavigationItem.destination.description=the URI this component references when activated. This is an alternative to using an action.
commandNavigationItem.disabled.description=an attribute which if set to TRUE, the component becomes non-interactive. Otherwise, the default value is FALSE and the component assumes its expected behavior.
commandNavigationItem.display-label=Navigation Item
commandNavigationItem.icon.description= the URI of an image to be displayed with the navigation item. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
commandNavigationItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandNavigationItem.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandNavigationItem.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandNavigationItem.itemListener.description=a method reference to an item listener
commandNavigationItem.launchListener.description=a method reference to a launch listener
commandNavigationItem.messageType.description=whether the item needs to be rendered in a manner that indicates an info, confirmation, warning or error exists within its contents. This property is currently used only within the train component.
commandNavigationItem.partialSubmit.description=whether the action should be done through a partial page submit or not. Default is false - no partial page submit; the full page will be refreshed. When set to true, the full page will not be refreshed. To re-render specific components on your page in response to the partial page submit, you have to tell ADF Faces. The easiest way to do this is with the partialTriggers attribute.
commandNavigationItem.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandNavigationItem.remove.description=sets the remove ability of the commandNavigationItem. The default value of "inherit" means that the item inherits its remove ability from its parent container. A value of "no" means that when in a container that supports item removal, this item is not allowed to be removed. A value of "disabled" means that when in a container that supports item removal, this item is not allowed to be removed and it should have a disabled remove indicator. Currently, only a NavigationPane with hint="tabs" supports item removal of child commandNavigationItems.
commandNavigationItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandNavigationItem.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandNavigationItem.selected.description=whether the item is currently selected.
commandNavigationItem.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandNavigationItem.showRequired.description=whether the item should show an indicator, indicating that its contents are required. This property is currently used only within the a train component.
commandNavigationItem.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandNavigationItem.targetFrame.description=the target frame for the navigation component.
commandNavigationItem.text.description=the text of the item.
commandNavigationItem.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandNavigationItem.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandNavigationItem.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandNavigationItem.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandNavigationItem.visited.description=whether the item is in visited state. Depending on the renderer the item may appear in a visited style, if true. This property is currently used only within the a train component.
commandNavigationItem.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandNavigationItem.windowHeight.description=the height of the window, if this command is used to launch a window.
commandNavigationItem.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandNavigationItem.windowWidth.description=the width of the window, if this command is used to launch a window.
commandToolbarButton.accessKey.description= a character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
commandToolbarButton.actionDelivery.description=how the action events generated by this component should be delivered. If 'none' is used and there is a popup facet, the popup will be shown when the user clicks anywhere on the button, not just on the launch icon. A value of "clientServer" delivers the event normally
commandToolbarButton.actionListener.description=a method reference to an action listener
commandToolbarButton.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
commandToolbarButton.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
commandToolbarButton.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
commandToolbarButton.depressedIcon.description= the URI of an image to be displayed on the toolbar button when the mouse has pressed the button. This attribute supports the same URI types described for the icon attribute. As depressedIcon does not allow alternative text to be provided for the image, in order to create an accessible product depressedIcon must only be used when its use is purely decorative. 
commandToolbarButton.description=The commandToolbarButton control creates a toolbar button representation of a UIXCommand.
commandToolbarButton.disabled.description=an attribute which if set to "true", the component becomes non-interactive. Otherwise,the default value is "false" and component assumes its expected behavior.
commandToolbarButton.disabledIcon.description= the URI of an image to be displayed on the toolbar button when the button is disabled. This attribute supports the same URI types described for the icon attribute. As disabledIcon does not allow alternative text to be provided for the image, in order to create an accessible product disabledIcon must only be used when its use is purely decorative. 
commandToolbarButton.display-label=Toolbar Button
commandToolbarButton.hoverIcon.description= the URI of an image to be displayed on the toolbar button when the mouse is hovering over the button. This attribute supports the same URI types described for the icon attribute. As hoverIcon does not allow alternative text to be provided for the image, in order to create an accessible product hoverIcon must only be used when its use is purely decorative. 
commandToolbarButton.icon.description= the URI of an image to be displayed on the toolbar button. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
commandToolbarButton.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
commandToolbarButton.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
commandToolbarButton.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
commandToolbarButton.launchListener.description=a method reference to a launch listener
commandToolbarButton.partialSubmit.description=whether the action should be done through a partial page submit or not. The default is true for commandToolBarButton, so be sure to specify partialTriggers if content needs to be updated.
commandToolbarButton.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
commandToolbarButton.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
commandToolbarButton.returnListener.description=a method reference to a return listener.This method is used to process dialog returnEvents which are generated as a result of either calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog directly or declaratively through the use of a returnActionListener tag.
commandToolbarButton.selected.description=whether the item is selected, for buttons of type radio or check. For radio buttons, there is no server model implemented for handling mutual exclusivity. If a user clicks a new button, the old selection will be unselected. If you programatically call setSelected(true) from code, you must call setSelected(false) on the prior selection as well.
commandToolbarButton.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
commandToolbarButton.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
commandToolbarButton.text.description=the text displayed in the toolbar item
commandToolbarButton.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
commandToolbarButton.type.description= the type of toolbar button. The default type is a normal toolbar button, while the other types provide special behavior. A check type toolbar button appears in a selected (depressed) state when it is selected. This type is useful to represent a boolean toggle. A radio type toolbar button also appears in a selected (depressed) state when it is selected. Radio type toolbar buttons are considered part of the same group by their container, either toolbar or group. When a radio type toolbar button is selected, other radio type toolbar buttons in the same group are unselected. This type is useful to represent a multiple choice toggle. 
commandToolbarButton.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
commandToolbarButton.useWindow.description=whether processes launched by this command should be launched in a secondary browser dialog window. 'useWindow' requires that the "action" attribute start with "dialog:". Set useWindow to 'false' for the outcome of the action to be targeted to the existing window.
commandToolbarButton.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
commandToolbarButton.windowEmbedStyle.description=Controls the embedded style of launched window. The "window" option will indicate a new browser window. The "inlineDocument" option will indicate an inline popup window. The default value is "window".
commandToolbarButton.windowHeight.description=the height of the window, if this command is used to launch a window.
commandToolbarButton.windowModalityType.description=Controls the modality of the launched Dialog. The default is modeless.
commandToolbarButton.windowWidth.description=the width of the window, if this command is used to launch a window.
componentDef.display-label=Component Def 
componentDragSource.display-label=Component Drag Source 
contextInfo.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
contextInfo.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
contextInfo.contextInfoListener.description=a method reference to a contextInfo listener.
contextInfo.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
contextInfo.description=The contextInfo control adds an area which can be clicked to show contextual information.
contextInfo.display-label=Context Info 
contextInfo.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
contextInfo.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
contextInfo.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
contextInfo.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
contextInfo.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
contextInfo.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
contextInfo.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
contextInfo.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
convertColor.display-label=Convert Color 
convertDateTime.display-label=Convert Date Time 
convertNumber.display-label=Convert Number 
dataFlavor.display-label=Data Flavor 
declarativeComponent.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
declarativeComponent.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
declarativeComponent.description=A dynamic declarative component.
declarativeComponent.display-label=Declarative Component 
declarativeComponent.id.description=The identifier for the component. The identifier must follow a subset of the syntax allowed in HTML
declarativeComponent.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
declarativeComponent.viewId.description=The view ID to include. This attribute should not be set on the component, but should be set using the JSP tag.
decorativeBox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
decorativeBox.centerLandmark.description=Specifies the WAI-ARIA landmark role for the content of the center facet.
decorativeBox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
decorativeBox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
decorativeBox.description=The decorativeBox component provides a bordered component that stretches the child in the center facet to fill all of available space.
decorativeBox.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the decorativeBox come from: <html:ul> <html:li>auto - either "children" or "parent", depending on the container the decorativeBox is inside; if the decorativeBox is being stretched by its ancestor then "parent" will be used, otherwise "children" will be used</html:li> <html:li>children - the decorativeBox will get its dimensions from the children (topHeight will still be honored so the contents of this facet will be constrained to those dimensions unless percent units are specified and then the default value will be used instead). Note that any height assignment (e.g. inlineStyle or styleClass) on the decorativeBox must be omitted or else there would be a competing assignment for how tall the component will be.</html:li> <html:li>parent (the default) - the decorativeBox will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin</html:li> </html:ul> 
decorativeBox.display-label=Decorative Box 
decorativeBox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
decorativeBox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
decorativeBox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
decorativeBox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
decorativeBox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
decorativeBox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
decorativeBox.theme.description=The component style theme to apply to this component. Themes are cascaded down through all child components. All HTML elements that are rendered by a rich component within a themed component will have the theme added to its list of style classes. Themes are not compatible with tonal styles and therefore only one method can be used per page (themes or tonal styles). A blank theme will remove the current theme, and a value of "inherit", null or not setting a theme will use the current theme. Skins are the sources of the the themes. Some skins may have no themed definitions. Suggested theme names include "dark", "medium", "light", and "default".
decorativeBox.topHeight.description=the height of the top facet specified as a CSS length. If dimensionsFrom resolves to "children", percent units are not allowed and the default value is used instead.
decorativeBox.topLandmark.description=Specifies the WAI-ARIA landmark role for the content of the top facet.
decorativeBox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
decorativeBox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
dialog.affirmativeTextAndAccessKey.description=An attribute that simultaneously sets the textual label of the ok and yes footer buttons as well as the an optional accessKey character used to gain quick access to the button. The accessKey is identified using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the textual label to "Text" and the accessKey to 'e'. For accessibility reasons, the access key functionality is not supported in screen reader mode. If the same accessKey appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This accessKey is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
dialog.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
dialog.cancelTextAndAccessKey.description=An attribute that simultaneously sets the textual label of the cancel footer button as well as the an optional accessKey character used to gain quick access to the button. The accessKey is identified using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the textual label to "Text" and the accessKey to 'e'. For accessibility reasons, the access key functionality is not supported in screen reader mode. If the same accessKey appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This accessKey is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
dialog.cancelVisible.description=the value that specifies if the Cancel button is visible. It will be ignored when the type attribute value is not equal to "okCancel".
dialog.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
dialog.closeIconVisible.description=whether the close icon is visible.
dialog.contentHeight.description=the height of the content area of the dialog in pixels.
dialog.contentWidth.description=the width of the content area of the dialog in pixels.
dialog.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
dialog.description=A dialog component that displays its children in a window and delivers DialogEvents when OK, Yes, No and Cancel buttons are activated.
dialog.dialogListener.description=a method reference to a dialog listener method
dialog.display-label=Dialog
dialog.helpTopicId.description=the id used to look up a topic in a helpProvider. If provided, a help icon will appear in the title bar.
dialog.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
dialog.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
dialog.modal.description=if the dialog is modal; by default, true. A modal dialog does not allow the user to make changes on the base page until the dialog is closed. A non-modal dialog will allow the user to make changes on the base page; if the user navigates away from the base page, the dialog will close.
dialog.noTextAndAccessKey.description=An attribute that simultaneously sets the textual label of the no footer button as well as the an optional accessKey character used to gain quick access to the button. The accessKey is identified using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the textual label to "Text" and the accessKey to 'e'. For accessibility reasons, the access key functionality is not supported in screen reader mode. If the same accessKey appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This accessKey is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
dialog.okVisible.description=the value that specifies if the OK button is visible. It will be ignored when the type attribute value is not equal to "okCancel".
dialog.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
dialog.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
dialog.resize.description=The dialog's resizing behavior. Acceptable values include: "off": the dialog automatically sizes to its content if stretchChildren is "none". "on": user can resize the dialog with their mouse by dragging any of the dialog edges. 
dialog.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
dialog.stretchChildren.description=The stretching behavior for children. Acceptable values include: "none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched) "first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched) 
dialog.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
dialog.title.description=the title of the window.
dialog.titleIconSource.description=the URI specifying the location of the title icon source. The title icon will typically be displayed in the top left corner of the window
dialog.type.description=the buttons in the dialog. For example, value yesNoCancel means there will be "Yes", "No" and "Cancel" buttons in the dialog.
dialog.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
dialog.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
display-label=ADF Faces
document.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
document.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
document.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
document.description=The document tag creates each of the standard root elements of an HTML page: &lt;html&gt;, &lt;body&gt;, and &lt;head&gt;. Only one document component per page is allowed.
document.display-label=Document
document.failedConnectionText.description=the text that is displayed in an alert message when the XMLHttpRequest data transfer fails.When this is not set, we log a default message to the client-side error console.
document.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
document.initialFocusId.description=the id of the component that you want to have focus when the full page renders. Note that if you are setting the initialFocusId to a component that is not normally available when rendered on the client, then you will also need to set the clientComponent attribute on that component to 'true'. Also, be aware that initialFocusId will be ignored when accessibility-mode is set to "screenReader". This is because there may be interesting content at the beginning of the page, like text content or a header. Identifiers are relative to the component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
document.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
document.maximized.description=an attribute which if set to "true" (the default) will cause the page's outer-most margin and padding collapse to 0px. If the document is set to be maximized and if there is only a single effective visual root component, that component will stretch automatically to consume the browser's viewable area--if supported by that component. Examples of components that support this are panelStretchLayout and panelSplitter. As a convenience, the effective visual root component detection will also look inside the form component if it is a direct child of the document component and it will not count popups nor non-inline messages as visual root components.
document.onunload.description=an onunload Javascript handler.
document.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
document.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
document.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
document.stateSaving.description=Specify the state saving behavior for this page. client=force to be (full) client; server=force to be server-side; default=follows the settings of the web.xml
document.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
document.theme.description=The component style theme to apply to this component. Themes are cascaded down through all child components. All HTML elements that are rendered by a rich component within a themed component will have the theme added to its list of style classes. Themes are not compatible with tonal styles and therefore only one method can be used per page (themes or tonal styles). A blank theme will remove the current theme, and a value of "inherit", null or not setting a theme will use the current theme. Skins are the sources of the the themes. Some skins may have no themed definitions. Suggested theme names include "dark", "medium", "light", and "default".
document.title.description=the title of the document. (This title doesn't have to match the title on any contained panelPage.)
document.uncommittedDataWarning.description=Specifies whether users should be warned about uncommitted data when navigating off the page or region. The default value is 'off' (warnings disabled). Setting this property to 'on' will enable the warnings.
document.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
document.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
dragSource.display-label=Drag Source 
dropTarget.display-label=Drop Target 
exportCollectionActionListener.display-label=Export Collection Action Listener 
facetRef.display-label=Facet Ref 
fileDownloadActionListener.display-label=File Download Action Listener 
forEach.display-label=For Each 
form.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
form.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
form.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
form.defaultCommand.description=the id attribute of the command button inside the form whose action should be invoked by default when the enter key is pressed with focus inside the form. If defaultCommand is not specified, no action is invoked when the enter key is pressed with focus inside the form. Identifiers are relative to the form component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
form.description=The form tag creates an HTML &lt;form&gt; element.
form.display-label=Form
form.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
form.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
form.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
form.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
form.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
form.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
form.targetFrame.description=the target frame for the form. Can either specify a user-defined frame name, or use one of the following values: _blank: The link opens the document in a new window. _parent: The link opens the document in the window of the parent. For example, if the link appeared in a dialog window, the resulting page would render in the parent window. _self: The link opens the document in the same page or region. _top: The link opens the document in a full window, replacing the entire page. 
form.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
form.usesUpload.description=whether the form supports file upload.
form.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
goButton.accessKey.description= a character used to gain quick access to this component. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this go component instance. If it does not, the user will receive no visual indication of the existence of the accessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
goButton.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
goButton.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
goButton.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
goButton.description=The goButton creates a push button that navigates directly to another location instead of delivering an action.
goButton.destination.description=the URI this go component references
goButton.disabled.description=whether the go component should be considered disabled. This attribute only has meaning when go components are used in certain container types, such as global headers and tab bars.
goButton.display-label=Go Button 
goButton.icon.description= the URI of an image to be displayed on the button. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
goButton.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
goButton.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
goButton.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
goButton.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
goButton.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
goButton.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
goButton.targetFrame.description=the target frame for the go component.
goButton.text.description=the textual label of the go component. Go components will also render children elements (including text nodes), though not all subclasses of the go component will necessarily support children.
goButton.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
goButton.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
goButton.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
goImageLink.accessKey.description= a character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
goImageLink.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
goImageLink.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
goImageLink.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
goImageLink.depressedIcon.description= the URI of an image to be displayed with this link when the mouse has pressed the link. This attribute supports the same URI types described for the icon attribute. As depressedIcon does not allow alternative text to be provided for the image, in order to create an accessible product depressedIcon must only be used when its use is purely decorative. 
goImageLink.description=The goImageLink tag is an HTML link with extra images added.
goImageLink.destination.description=the URI this go component references
goImageLink.disabled.description=whether the go component should be considered disabled. This attribute only has meaning when go components are used in certain container types, such as global headers and tab bars.
goImageLink.disabledIcon.description= the URI of an image to be displayed with this link when the link is disabled. This attribute supports the same URI types described for the icon attribute. As disabledIcon does not allow alternative text to be provided for the image, in order to create an accessible product disabledIcon must only be used when its use is purely decorative. 
goImageLink.display-label=Go Image Link 
goImageLink.hoverIcon.description= the URI of an image to be displayed with this link when the mouse is hovering over the link. This attribute supports the same URI types described for the icon attribute. As hoverIcon does not allow alternative text to be provided for the image, in order to create an accessible product hoverIcon must only be used when its use is purely decorative. 
goImageLink.icon.description= the URI of an image to be displayed with the link. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
goImageLink.iconPosition.description=an attribute specifying the position of the icon.
goImageLink.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
goImageLink.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
goImageLink.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
goImageLink.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
goImageLink.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
goImageLink.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
goImageLink.targetFrame.description=the target frame for the go component.
goImageLink.text.description=the textual label of the go component. Go components will also render children elements (including text nodes), though not all subclasses of the go component will necessarily support children.
goImageLink.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
goImageLink.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
goImageLink.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
goLink.accessKey.description= a character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
goLink.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
goLink.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
goLink.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
goLink.description=The goLink tag is an HTML link.
goLink.destination.description=the URI this go component references
goLink.disabled.description=whether the go component should be considered disabled. This attribute only has meaning when go components are used in certain container types, such as global headers and tab bars.
goLink.display-label=Go Link 
goLink.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
goLink.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
goLink.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
goLink.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
goLink.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
goLink.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
goLink.targetFrame.description=the target frame for the go component.
goLink.text.description=the textual label of the go component. Go components will also render children elements (including text nodes), though not all subclasses of the go component will necessarily support children.
goLink.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
goLink.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
goLink.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
goMenuItem.accelerator.description=the keystroke that will activate this command. This keystroke will be converted into a textual representation and displayed as the accelerator label for this menu item.
goMenuItem.accessKey.description= a character used to gain quick access to this item. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the text attribute of this item instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
goMenuItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
goMenuItem.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
goMenuItem.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
goMenuItem.description=The goMenuItem tag is a go link located in a menu.
goMenuItem.destination.description=the URI this go component references
goMenuItem.disabled.description=whether the go component should be considered disabled. This attribute only has meaning when go components are used in certain container types, such as global headers and tab bars.
goMenuItem.display-label=Go Menu Item 
goMenuItem.icon.description= the URI of an image to be displayed on the menu item. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
goMenuItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
goMenuItem.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
goMenuItem.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
goMenuItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
goMenuItem.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
goMenuItem.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
goMenuItem.targetFrame.description=the target frame for the go component.
goMenuItem.text.description=the textual label of the go component. Go components will also render children elements (including text nodes), though not all subclasses of the go component will necessarily support children.
goMenuItem.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
goMenuItem.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
goMenuItem.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
group.display-label=Group
icon.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
icon.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
icon.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
icon.description=Renders an icon.
icon.display-label=Icon
icon.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
icon.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
icon.name.description=a name identifying the icon that should be rendered. Valid values are "required", "warning", "info", "error", "logo" and "changed".
icon.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
icon.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
icon.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
icon.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
icon.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
icon.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
image.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
image.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
image.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
image.description=The image control creates an image tag.
image.display-label=Image
image.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
image.imageMapType.description=if a server-side image map is desired, specify "server" and place the image inside a CoreGoLink component. URI of the server-side image map file has to be given as a destination attribute for the goLink component. Default value for imageMapType is "none".
image.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
image.longDescURL.description=a URL to a document that contains a long description of the image. This description should supplement the short description. In the browser, longDescUrl renders as the longdesc attribute on &lt;img&gt;.
image.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
image.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
image.shortDesc.description=the short description of the image component. This text is commonly used by user agents as the image's alt text. Note that for accessibility purposes, all images must specify some value for the shortDesc attribute. For purely decorative images which provide no meaningful information, the value should be the empty string.
image.source.description=the URI specifying the location of the image resource.
image.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
image.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inlineFrame.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inlineFrame.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inlineFrame.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inlineFrame.description=The inlineFrame component is used to create an Inline Frame tag. Note that due to browser limitations, this component is not supported in Mobile Safari.
inlineFrame.display-label=Inline Frame 
inlineFrame.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inlineFrame.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inlineFrame.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inlineFrame.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inlineFrame.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inlineFrame.sizing.description=The sizing strategy used by the component. Sizing should only be set if the iframe source is from the same domain as the page. The following sizing values are supported: none-We provide no additional sizing strategy. The inlineFrame is sized using CSS, as normal. This is the default setting. preferred-The content is sized to its preferred size such that no scrollbars are needed. For an inlineFrame with no width specified through CSS, this will result in the content wrapping to maximum of the default width and minimum width for the content. The preferred size is recalculated whenever the content changes. Because we do not have rights to query and set DOM properties on remote pages, preferred sizing can only be set if the iframe source is served from the same domain as the page. Attempting to set preferred sizing on a foreign iframe source will result in a warning. 
inlineFrame.source.description=the URI specifying the location of the content.
inlineFrame.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inlineFrame.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inlineFrame.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputColor.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputColor.actionListener.description=a method reference to an action listener
inputColor.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputColor.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputColor.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputColor.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputColor.chooseId.description= the id of the chooseColor component which can be used to pick the Color value for this inputColor. If not set, the inputColor has its own popup chooseColor. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc. 
inputColor.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputColor.colorData.description=the list of colors to be displayed in the standard color palette. The number of provided colors can be 49, 64 and 121, depending on the width attribute. For example, if width is 7, the number should be 49. If the number does not match the width, extra color element in the list will be ignored and missing color elements will be displayed as no-color. The color list must be of an array of type TrColor in the client side. On the server side, it must be a java.util.List of java.awt.Color objects or a java.util.List of hex color code strings (in the tag only). Customer may define their own color palette, such as show 169 color palette with width of value 13.
inputColor.columns.description=the number of columns to display in the text control. If no value is specified, a default value will be derived from the current converter, if one is attached.
inputColor.compact.description=an attribute which when set to true, the color value text field will be hidden. 
inputColor.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputColor.converter.description=a converter object
inputColor.customColorData.description=the list of custom defined colors. The number of colors can be 7, 8, 11, equivalent to the width attribute. The color list must be of an array of type TrColor in the client side. On the server side, it must be a java.util.List of java.awt.Color objects or a java.util.List of hex color code strings (in the tag only).
inputColor.customVisible.description=whether the Custom Color button and custom color row are displayed. When set to true, the Custom Color Button and custom color row will be rendered.
inputColor.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputColor.defaultColor.description=the default color. When setting using the tag it could take a type java.lang.String of hex color code.
inputColor.defaultVisible.description=whether the Default button is displayed. When set to true, the Default Button will be rendered.
inputColor.description=Renders an input field for colors. The field can be tied to a ChooseColor element for easy color picking. When chooseId attribute is set, the field is tied to a chooseColor with the specified Id, and in that case values of attribute colorData, customColorData, defaultColor and width are ignored. When chooseId attribute is not set, the field has its own popup chooseColor, and attribute colorData, customColorData, defaultColor and width are used to specifiy properties of the popup chooseColor. Action event and Return event are not fired in rich client. They are only fired in PDA. Note: The value attribute should be a java.awt.Color object. 
inputColor.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputColor.display-label=Input Color 
inputColor.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputColor.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputColor.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputColor.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputColor.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes; you should use the skinning mechanism if you require any complex style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. Many components are composed of several DOM elements which may have their own styles applied to them. Defining a style in the inlineStyle may not always give you what you want. For example, if one of the inner DOM elements for this component has a background color specified for it in the skin, setting a background color in the inlineStyle may not provide any visible change (at least for where that inner DOM element exists) because the inner DOM element's background color will win (since that DOM element is essentially layered on top of the root element). In cases like this, you can use a different skin (or define your own) that defines a skinning key for that inner DOM element where its background color is inhibited (e.g. with -tr-inhibit: background-color) or otherwise set to the color you want.
inputColor.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputColor.labelAndAccessKey.description=an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
inputColor.lastUsedVisible.description=whether the Last Used button is displayed. When set to true, the Last Used Button will be rendered. Last used color information does not persist across browser sessions.
inputColor.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputColor.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputColor.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputColor.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputColor.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputColor.returnListener.description=a method reference to an return listener
inputColor.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputColor.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputColor.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputColor.styleClass.description=a CSS style class to use for this component. The styleClass attribute value is rendered on the root dom element. 
inputColor.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputColor.validator.description=a method reference to a validator method
inputColor.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputColor.valueChangeListener.description=a method reference to a value change listener
inputColor.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputColor.width.description=the width of the standard palette in cells. The supported values listed above will show the palette with 49, 64 and 121 colors respectively. In case the width specified is not one of the default supported values, the color palette with closest and less number of colors will be used unless a custom color palette is defined using the colorData attribute.
inputComboboxListOfValues.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputComboboxListOfValues.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputComboboxListOfValues.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputComboboxListOfValues.autoTab.description=an attribute which if set to TRUE, tells the component to automatically tab to the next focusable, when the maxlength for the current component has been reached.
inputComboboxListOfValues.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputComboboxListOfValues.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputComboboxListOfValues.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputComboboxListOfValues.columns.description=the size of the text control specified by the number of characters shown. The default value depends on the browser.
inputComboboxListOfValues.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputComboboxListOfValues.converter.description=a converter object
inputComboboxListOfValues.createPopupId.description=the id of the user-defined popup component relative to this component (accounting for NamingContainers). If this attribute is supplied, an af:toolbar with af:commandToolbarButton will be created internally, which will be displayed as create icon in the Search and Select dialog. Clicking the button launches the user-defined popup component. If the developer has added a dialog within the popup, then the decision to refresh the table is made by the component intelligently(table will be refreshed on pressing Ok button in the dialog). If the developer has not added a dialog to the popup, then the table will be refreshed always. Identifiers are relative to the component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
inputComboboxListOfValues.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputComboboxListOfValues.description=Used to present a list of values as a choice list control. RichInputComboboxListOfValues provides the user with a list of values to select, in a choice list control. User can either select a value from the list and return data for fields in the main page or click on a "Search..." link at the bottom of the drop down panel to launch the "Search and Select" dialog. The dialog enables the user to search for more values and select the desired value that should go into the LOV field on the base page.
inputComboboxListOfValues.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputComboboxListOfValues.display-label=Input Combobox List of Values 
inputComboboxListOfValues.editMode.description=the mode that controls how the user specifies a value. This attribute is only applicable when the 'readOnly' attribute is set to false. input: this mode allows the user to type in a value as well as browse and select from a list of available values. select: this mode allows the user only to browse and select from a list of available values. 
inputComboboxListOfValues.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputComboboxListOfValues.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputComboboxListOfValues.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputComboboxListOfValues.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputComboboxListOfValues.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputComboboxListOfValues.items.description=a list of data for the live content inside the drop down panel of the inputComboboxListOfValues component.
inputComboboxListOfValues.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputComboboxListOfValues.labelAndAccessKey.description=an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, using the conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the label to "Text" and the access key to 'e' .
inputComboboxListOfValues.launchPopupListener.description=a method reference to a LaunchPopupListener (called in response to a LaunchPopupEvent).
inputComboboxListOfValues.maximumLength.description=the maximum number of characters per line that can be entered into the text control.
inputComboboxListOfValues.model.description=A ListOfValuesModel object that represents the model for the LOV component. The ListOfValuesModel currently provides methods for use within the LOV component and in addition, to retrieve a QueryModel and TableModel in order to to display a table and/or a query component (which are then used to search and select a value for the LOV component). For details, please refer to the Javadocs for oracle.adf.view.rich.model.ListOfValuesModel
inputComboboxListOfValues.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputComboboxListOfValues.popupTitle.description=the title of the Search and Select popup dialog.
inputComboboxListOfValues.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputComboboxListOfValues.recentItems.description=a customized list of options that is part of a "Favorites" list. The recent items list is displayed before the list of items and can be a list of the most recently used (MRU) items in the dataset.
inputComboboxListOfValues.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputComboboxListOfValues.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputComboboxListOfValues.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputComboboxListOfValues.resultsTableColumnStretching.description=Indicates what kind of stretching you want applied to the columns of results table in 		search and select dialog.The default value is last which stretches the last column to 		fill up any unused space.If you want to have an empty blank column be automatically inserted 		and have it stretch (so the row background colors will span the entire width of the table), 		use the "blank" option. Note that row headers and frozen columns will not be stretched because doing so could easily leave the user unable to access the scrollable data body of the table.
inputComboboxListOfValues.returnPopupDataListener.description=A method reference to a ReturnPopupDataListener (called in response to a ReturnPopupDataEvent). The attrbite is deprecated and will be removed in the future release.
inputComboboxListOfValues.returnPopupDataValue.description=an attribute for returning the set value in custom popup by the user in listOfValues component.
inputComboboxListOfValues.returnPopupListener.description=a method reference to a ReturnPopupListener (called in response to a ReturnPopupEvent).
inputComboboxListOfValues.searchDesc.description=the search information that appears in the tooltip when user does a mouseover on the Search icon.
inputComboboxListOfValues.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputComboboxListOfValues.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputComboboxListOfValues.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputComboboxListOfValues.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputComboboxListOfValues.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputComboboxListOfValues.validator.description=a method reference to a validator method
inputComboboxListOfValues.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputComboboxListOfValues.valueChangeListener.description=a method reference to a value change listener
inputComboboxListOfValues.var.description=the name of the EL variable used to reference each row inside the drop down panel. Once this component has completed rendering, this variable is removed (or reverted back to it's previous value).
inputComboboxListOfValues.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputDate.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputDate.actionListener.description=a method reference to an action listener
inputDate.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputDate.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputDate.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputDate.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputDate.chooseId.description=the id of the chooseDate component which can be used to pick the Date value for this inputDate. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputDate.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputDate.columns.description=the number of columns to display in the text control. If no value is specified, a default value will be derived from the current converter, if one is attached.
inputDate.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputDate.converter.description=a converter object
inputDate.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputDate.description=Renders an input field for dates. The field can be tied to a ChooseDate element for easy date picking. When chooseId attribute is set, the field is tied to a chooseDate with the specified Id, and in that case values of attribute maxValue, minValue, disabledDays, disabledDaysOfWeek and disabledMonths are ignored. When chooseId attribute is not set, the field has its own popup chooseDate, and attribute maxValue, minValue, disabledDays, disabledDaysOfWeek and disabledMonths are used to specifiy properties of the popup chooseDate. Action event and Return event are not fired in rich client. They are only fired in PDA. By default, value attribute accepts java.util.Date type.
inputDate.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputDate.disabledDays.description=a binding to an implementation of the org.apache.myfaces.trinidad.model.DateListProvider interface. The getDateList method should generate a List of individual java.util.Date objects which will be rendered as disabled. The Dates must be in the context of the given base Calendar. Note: this binding requires periodic roundtrips. If you just want to disable certain weekdays (e.g. Saturday and Sunday), use the disabledDaysOfWeek attribute!
inputDate.disabledDaysOfWeek.description=a whitespace delimited list of weekdays that should be rendered as disabled in every week. The list should consist of one or more of the following abbreviations: sun, mon, tue, wed, thu, fri, sat. By default all days are enabled.
inputDate.disabledMonths.description=a whitespace delimited list of months that should be rendered as disabled in every year. The list should consist of one or more of the following abbreviations: jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec. By default all months are enabled.
inputDate.display-label=Input Date 
inputDate.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputDate.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputDate.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputDate.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputDate.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputDate.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputDate.labelAndAccessKey.description=an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the label to "Text" and the access key to 'e'.
inputDate.maxValue.description=the maximum value allowed for the Date value. When set to a fixed value on a tag, this will be parsed as an ISO 8601 date. ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's timezone, with the time components (hours, minutes, seconds, milliseconds) maximized. All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with maximum value for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds) to allow the largest range of values to be accepted.
inputDate.minValue.description=the minimum value allowed for the Date value. When set to a fixed value on a tag, this will be parsed as an ISO 8601 date. ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's timezone, with the time components (hous, minutes, seconds, milliseconds) zeroed-out. All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with zeroed-out values for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds) to allow the largest range of values to be accepted.
inputDate.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputDate.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputDate.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputDate.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputDate.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputDate.returnListener.description=a method reference to an return listener
inputDate.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputDate.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputDate.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputDate.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputDate.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputDate.validator.description=a method reference to a validator method
inputDate.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputDate.valueChangeListener.description=a method reference to a value change listener
inputDate.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputFile.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputFile.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputFile.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputFile.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputFile.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputFile.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputFile.columns.description=the size of the text control specified by the number of characters shown.The default value depends on the browser.
inputFile.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputFile.converter.description=a converter object
inputFile.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputFile.description=The inputFile component is a component that can be used to upload a file. It supports displaying a label, text, and messages.
inputFile.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputFile.display-label=Input File 
inputFile.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputFile.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputFile.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputFile.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputFile.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputFile.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputFile.labelAndAccessKey.description=an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation. For example, setting this attribute to "T&amp;ext" willset the label to "Text" and the access key to 'e'.
inputFile.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputFile.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputFile.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputFile.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputFile.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputFile.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputFile.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputFile.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputFile.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputFile.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputFile.validator.description=a method reference to a validator method
inputFile.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputFile.valueChangeListener.description=a method reference to a value change listener
inputFile.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputListOfValues.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputListOfValues.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputListOfValues.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputListOfValues.autoTab.description=an attribute which if set to TRUE, tells the component to automatically tab to the next focusable, when the maxlength for the current component has been reached.
inputListOfValues.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputListOfValues.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputListOfValues.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputListOfValues.columns.description=the size of the text control specified by the number of characters shown. The default value depends on the browser.
inputListOfValues.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputListOfValues.converter.description=a converter object
inputListOfValues.createPopupId.description=the id of the user-defined popup component relative to this component (accounting for NamingContainers). If this attribute is supplied, an af:toolbar with af:commandToolbarButton will be created internally, which will be displayed as create icon in the Search and Select dialog. Clicking the button launches the user-defined popup component. If the developer has added a dialog within the popup, then the decision to refresh the table is made by the component intelligently(table will be refreshed on pressing Ok button in the dialog). If the developer has not added a dialog to the popup, then the table will be refreshed always. Identifiers are relative to the component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
inputListOfValues.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputListOfValues.description=LOV input control. RichInputListOfValues provides the functionality to make selection and return data from a popup dialog.
inputListOfValues.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputListOfValues.display-label=Input List of Values 
inputListOfValues.editMode.description=the mode that controls how the user specifies a value. This attribute is only applicable when the 'readOnly' attribute is set to false. input: this mode allows the user to type in a value as well as browse and select from a list of available values. select: this mode allows the user only to browse and select from a list of available values. 
inputListOfValues.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputListOfValues.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputListOfValues.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputListOfValues.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputListOfValues.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputListOfValues.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputListOfValues.labelAndAccessKey.description=an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, using the conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the label to "Text" and the access key to 'e' .
inputListOfValues.launchPopupListener.description=a method reference to a LaunchPopupListener (called in response to a LaunchPopupEvent).
inputListOfValues.maximumLength.description=the maximum number of characters per line that can be entered into the text control.
inputListOfValues.model.description=A ListOfValuesModel object that represents the model for the LOV component. The ListOfValuesModel currently provides methods for use within the LOV component and in addition, to retrieve a QueryModel and TableModel in order to to display a table and/or a query component (which are then used to search and select a value for the LOV component). For details, please refer to the Javadocs for oracle.adf.view.rich.model.ListOfValuesModel
inputListOfValues.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputListOfValues.popupTitle.description=the title of the Search and Select popup dialog.
inputListOfValues.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputListOfValues.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputListOfValues.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputListOfValues.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputListOfValues.resultsTableColumnStretching.description=Indicates what kind of stretching you want applied to the columns of results table in 		search and select dialog.The default value is last which stretches the last column to 		fill up any unused space.If you want to have an empty blank column be automatically inserted 		and have it stretch (so the row background colors will span the entire width of the table), 		use the "blank" option. Note that row headers and frozen columns will not be stretched because doing so could easily leave the user unable to access the scrollable data body of the table.
inputListOfValues.returnPopupDataListener.description=A method reference to a ReturnPopupDataListener (called in response to a ReturnPopupDataEvent). The attrbite is deprecated and will be removed in the future release.
inputListOfValues.returnPopupDataValue.description=an attribute for returning the set value in custom popup by the user in listOfValues component.
inputListOfValues.returnPopupListener.description=a method reference to a ReturnPopupListener (called in response to a ReturnPopupEvent).
inputListOfValues.searchDesc.description=the search information that appears in the tooltip when user does a mouseover on the Search icon.
inputListOfValues.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputListOfValues.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputListOfValues.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputListOfValues.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputListOfValues.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputListOfValues.validator.description=a method reference to a validator method
inputListOfValues.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputListOfValues.valueChangeListener.description=a method reference to a value change listener
inputListOfValues.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputNumberSlider.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputNumberSlider.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputNumberSlider.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputNumberSlider.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputNumberSlider.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputNumberSlider.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputNumberSlider.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputNumberSlider.converter.description=a converter object
inputNumberSlider.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputNumberSlider.description=Represents an input number slider component.
inputNumberSlider.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputNumberSlider.display-label=Input Number Slider 
inputNumberSlider.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputNumberSlider.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputNumberSlider.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputNumberSlider.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputNumberSlider.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputNumberSlider.majorIncrement.description=the distance between two major tick marks. If &lt;= 0 major increments will not be shown. The major tick marks are the ones that will display a labeled value underneath the tick mark.
inputNumberSlider.maximum.description=the maximum value.
inputNumberSlider.minimum.description=the minimum value.
inputNumberSlider.minimumIncrement.description=the smallest possible increment. This is the increment that will be applied when the user presses the + and - buttons on the sides of the slider.
inputNumberSlider.minorIncrement.description=the distance between two minor tick marks. If &lt;= 0 minor increments will not be shown. The minor tick marks are those that will not show a label underneath the tick mark.
inputNumberSlider.orientation.description=whether a horizontal or vertical slider is created.
inputNumberSlider.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputNumberSlider.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputNumberSlider.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputNumberSlider.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputNumberSlider.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputNumberSlider.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputNumberSlider.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputNumberSlider.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputNumberSlider.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputNumberSlider.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputNumberSlider.validator.description=a method reference to a validator method
inputNumberSlider.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputNumberSlider.valueChangeListener.description=a method reference to a value change listener
inputNumberSlider.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputNumberSpinbox.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputNumberSpinbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputNumberSpinbox.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputNumberSpinbox.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputNumberSpinbox.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputNumberSpinbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputNumberSpinbox.columns.description=the size of the text control specified by the number of characters shown.
inputNumberSpinbox.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputNumberSpinbox.converter.description=a converter object
inputNumberSpinbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputNumberSpinbox.description=The inputNumberSpinbox tag creates a browser input widget; it is used to enter numbers and it has a spinbox to quickly increment or decrement the number.
inputNumberSpinbox.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputNumberSpinbox.display-label=Input Number Spinbox 
inputNumberSpinbox.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputNumberSpinbox.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputNumberSpinbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputNumberSpinbox.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputNumberSpinbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputNumberSpinbox.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputNumberSpinbox.maximum.description=the maximum number allowed in the input field.
inputNumberSpinbox.minimum.description=the minimum number allowed in the input field.
inputNumberSpinbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputNumberSpinbox.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputNumberSpinbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputNumberSpinbox.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputNumberSpinbox.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputNumberSpinbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputNumberSpinbox.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputNumberSpinbox.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputNumberSpinbox.stepSize.description=the step size by which the spinbox will increase or decrease the number in the input.
inputNumberSpinbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputNumberSpinbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputNumberSpinbox.validator.description=a method reference to a validator method
inputNumberSpinbox.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputNumberSpinbox.valueChangeListener.description=a method reference to a value change listener
inputNumberSpinbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputRangeSlider.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputRangeSlider.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputRangeSlider.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputRangeSlider.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputRangeSlider.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputRangeSlider.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputRangeSlider.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputRangeSlider.converter.description=a converter object
inputRangeSlider.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputRangeSlider.description=Represents an input range slider component.
inputRangeSlider.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputRangeSlider.display-label=Input Range Slider 
inputRangeSlider.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputRangeSlider.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputRangeSlider.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputRangeSlider.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
inputRangeSlider.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputRangeSlider.majorIncrement.description=the distance between two major tick marks. If &lt;= 0 major increments will not be shown. The major tick marks are the ones that will display a labeled value underneath the tick mark.
inputRangeSlider.maximum.description=the maximum value.
inputRangeSlider.minimum.description=the minimum value.
inputRangeSlider.minimumIncrement.description=the smallest possible increment. This is the increment that will be applied when the user presses the + and - buttons on the sides of the slider.
inputRangeSlider.minorIncrement.description=the distance between two minor tick marks. If &lt;= 0 minor increments will not be shown. The minor tick marks are those that will not show a label underneath the tick mark.
inputRangeSlider.orientation.description=whether a horizontal or vertical slider is created.
inputRangeSlider.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputRangeSlider.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputRangeSlider.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputRangeSlider.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputRangeSlider.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputRangeSlider.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputRangeSlider.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputRangeSlider.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputRangeSlider.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
inputRangeSlider.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputRangeSlider.validator.description=a method reference to a validator method
inputRangeSlider.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputRangeSlider.valueChangeListener.description=a method reference to a value change listener
inputRangeSlider.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputText.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
inputText.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
inputText.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
inputText.autoTab.description=whether focus will automatically move to the next tabstop when the maximum length for the current component is reached.
inputText.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
inputText.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
inputText.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
inputText.columns.description=the size of the text control specified by the number of characters shown. The number of columns is estimated based on the default font size of the browser.
inputText.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
inputText.converter.description=a converter object
inputText.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
inputText.description=An input text field control.
inputText.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the inputText come from: <html:ul> <html:li>auto - either "disclosedChild" or "parent", depending on the container the inputText is inside; if the inputText is being stretched by its ancestor then "parent" will be used, otherwise "content" will be used</html:li> <html:li>content (the default) - the inputText will get its dimensions from the parent component</html:li> <html:li>parent - the inputText will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin.</html:li> </html:ul> 
inputText.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
inputText.display-label=Input Text 
inputText.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
inputText.helpTopicId.description=the id used to look up a topic in a helpProvider.
inputText.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
inputText.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
inputText.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes; you should use the skinning mechanism if you require any complex style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. Many components are composed of several DOM elements which may have their own styles applied to them. Defining a style in the inlineStyle may not always give you what you want. For example, if one of the inner DOM elements for this component has a background color specified for it in the skin, setting a background color in the inlineStyle may not provide any visible change (at least for where that inner DOM element exists) because the inner DOM element's background color will win (since that DOM element is essentially layered on top of the root element). In cases like this, you can use a different skin (or define your own) that defines a skinning key for that inner DOM element where its background color is inhibited (e.g. with -tr-inhibit: background-color) or otherwise set to the color you want.
inputText.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
inputText.labelAndAccessKey.description= an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
inputText.maximumLength.description=the maximum number of characters that can be entered into the text control. This includes the characters representing the new line. If set to 0 or less, the maximumLength is ignored. Note that in some browsers like IE new line is treated as two characters.
inputText.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
inputText.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
inputText.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
inputText.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
inputText.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
inputText.rows.description=the height of the text control specified by the number of characters shown. The default value is 1, which generates a one-row input field. The number of rows is estimated based on the default font size of the browser.
inputText.secret.description=a boolean value that only applies to single line text controls. When set to "true", it hides the actual value of the text from the user, and will prevent the actual "value" from being shown to the user. When the user manually enters a value, each character will appear as an *. After the value is posted to the server, the value (if not null) will always appear (and be sent to the client) as "******", or whichever value is defined in UIConstants.SECRET_FIELD_DEFAULT_VALUE. If secret is set to true, be sure to not use a converter or validator tag with this inputText which would expose the value the user entered via its messages.
inputText.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
inputText.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
inputText.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
inputText.styleClass.description=a CSS style class to use for this component. The styleClass attribute value is rendered on the root dom element. We provide some public style classes you can set the styleClass to that will affect only the 'content' piece of the component. These are: AFAddressFieldTextMarker, AFPostalCodeFieldTextMarker, AFPhoneFieldTextMarker, AFFieldNumberMarker, AFFieldTextLTRMarker, AFFieldTextMarker, AFFieldNumberMarker. In LTR languages, these styles have no effect by default, other than AFFieldNumberMarker which right aligns the text. They have more styling in RTL mode. If needed, you can skin the public style definitions for these marker style classes (e.g., AFAddressFieldText, AFPostalCodeFieldText, etc.) and it will be picked up by using these "Marker" style class because in our base skin implementation we map to the public style by doing this: af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}. We recommend that you do not add style properties to the "Marker" style classes, since they are used solely in the CSS descendant selector to point to the content pseudo-element.
inputText.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
inputText.validator.description=a method reference to a validator method
inputText.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
inputText.valueChangeListener.description=a method reference to a value change listener
inputText.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
inputText.wrap.description=the type of text wrapping to be used in a multi-row text control. This attribute is ignored for single row inputText. By default (or "soft"), multirow text wraps visually, but does not include carriage returns in the submitted value. Setting this to "off" will disable wrapping; the multirow text will scroll horizontally. Setting it to "hard" specifies that the value of the text should include any carriage returns needed to wrap the lines.
insertTextBehavior.display-label=Insert Text Behavior 
iterator.display-label=Iterator
media.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
media.autostart.description=a boolean value that controls whether the media resource loads and plays automatically without user initiation. When set to "true", the media resource will load and play as soon as possible.
media.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
media.contentType.description=the MIME type of the media content returned by the "source" URI. This attribute is used as a hint when determining which player to pick, how the controls of the player are to be configured, and the default size of the media player. If it isn't specified, an attempt will be made to derive this information from the extension of the source URI.
media.controls.description= the set of controls made available to the user for controlling the media playback. The actual set of controls displayed for the same value may differ between players. Likewise, the amount of space occupied by the controls will differ from media player to media player. This can cause problems if the size of the media control has been specified by the "width" and "height" attributes rather than "innerWidth" and "innerHeight". "none" don't show any controls for the media player and don't allow control access through alternate means, such as context menus. This value is typically only used in kiosk-type applications where no user control over the playing of the media is allowed. It is typically used in conjunction with setting the "autostart" attribute to "true", and the "playCount" attribute to "0" to cause the media play immediately and then loop. "noneVisible" don't show any controls for the media player but allow control access through alternate means, such as context menus. This value is typically only used in applications where user control over the playing of the media is allowed, but not encouraged. It is typically used in conjunction with setting the "autostart" attribute to "true", and the "playCount" attribute to "0" to cause the media to play immediately and then loop. "minimal" show a minimal set of controls for playing media on the media player. This value gives users control over the most important media playing controls, while occupying the least amount of additional space on the user agent. "typical" show the typical set of controls for playing media on the media player. This value, the default, gives users control over the most common media playing controls, without occupying an inordinate amount of extra space on the user agent. "all" Show all available controls for playing media on the media player Using this setting can cause large amount of additional space to be required, depending on the media player used. The default of this attribute is "typical". 
media.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
media.description=The media component displays media content, such as audio, video, or image in a player embedded in the user agent.
media.display-label=Media
media.height.description=the height in pixels to reserve for the media player plus its content. As the extra height needed for the media player controls can vary from media player to media player and depend on the controls displayed in the media player, it is recommended that the "innerHeight" attribute be used in preference to this attribute. If both the "height" and "innerHeight" attributes are specified, the "height" attribute will be used. If no height is specified, the height of the media control is determined by calculating the "innerHeight" and adding any extra height necessary to display the media player controls. 
media.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
media.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
media.innerHeight.description=the height in pixels to reserve for the media player content. This will typically be set to the pixel height of the media resource to display. If no "innerHeight" is specified, the "innerHeight" will be defaulted based on the content type of the media resource to play. If both the "height" and "innerHeight" attributes are specified, the "height" attribute will be used. 
media.innerWidth.description=the width in pixels to reserve for the media player content. This will typically be set to the pixel width of the media resource to display. If no "innerWidth" is specified, the "innerWidth" will be defaulted based on the content type of the media resource to play. If both the "width" and "innerWidth" attributes are specified, the "width" attribute will be used. 
media.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
media.playCount.description=the number of times the media resource will play. If set to "0", the resource will loop until the user stops the playing.
media.player.description=which media player to use to play the media resource. If possible, the media control will accomodate this request. However, if the requested player is not available on the user agent, or does not support playing the media resource, an alternate player will be used instead. In all cases, the "link" player is used as a fallback if no other player is available, or the requested player fails for some reason. "none" use a link in the user agent page to launch the playing of the media resource. This player setting uses the least amount of space on the page and uses the user agent's built in content type mapping to determine how to display the media resource. "quicktime" use the Apple QuickTime player. "windows" use the Windows Media Player. "real" use the Real Player. 
media.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
media.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
media.source.description=the URI specifying the location of the media resource. If no contentType is specified, the contentType will be inferred from the extension of the source attribute.
media.standbyText.description=the message to display in the media player while the media resource is loading.
media.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
media.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
media.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
media.width.description=the width in pixels to reserve for the media player plus its content. As the extra width needed for the media player controls can vary from media player to media player and depend on the controls displayed in the media player, it is recommended that the "innerWidth" attribute be used in preference to this attribute. If both the "width" and "innerWidth" attributes are specified, the "width" attribute will be used. If no width is specified, the width of the media control is determined by calculating the "innerWidth" and adding any extra width necessary to display the media player controls. 
menu.accessKey.description= a character used to gain quick access to this menu. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this button instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. Beyond normal type menu access key behavior, menus and commandMenuItems support menu-type access key behavior when the focus is currently in a menu or menuBar. Menu-type access key behavior allows access to contained menus, submenus, and commandMenuItems without the need for any keyboard modifiers. When the focus is inside a menu or menuBar, you can simply press the accessKey, without modifiers, for a menu or commandMenuItem accessible within the menu or menuBar to immediately move focus to that menu item. 
menu.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
menu.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
menu.contentDelivery.description=whether the menu content is delivered with the initial page. When contentDelivery is "immediate", the content is inlined into the initial page. If contentDelivery is "lazy", the menu's content will be delivered to the client only after the first request to show that menu. By default, contentDelivery is immediate, which means the menu content will be sent to the client on initial rendering. Note that for a menu popup (a menu component placed directly inside a popup component) both the menu and the popup have a content delivery setting. In this case the popup's contentDelivery setting has precedence, and the menu's content delivery setting is ignored. 
menu.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
menu.description=Represents a vertical menu component. Typically, this is used as a child of a menuBar or popup.
menu.detachable.description=whether the item is detachable.
menu.disabled.description=whether the menu should be disabled.
menu.display-label=Menu
menu.icon.description=the URI of an image to be displayed on the menu item. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
menu.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
menu.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
menu.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
menu.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
menu.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
menu.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
menu.text.description=the text of the item
menu.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
menu.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
menu.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
menuBar.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
menuBar.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
menuBar.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
menuBar.description=Represents a MenuBar component. Its children are menu and menu item components.
menuBar.disabled.description=whether the menu bar should be disabled.
menuBar.display-label=Panel Menu Bar
menuBar.flex.description=a non-negative integer that indicates the flexibility of this component in its container. If the container supports it (the toolbox component), flex is used to determine how space is distributed among its children. Components with larger flex values will be made larger than components with lower flex values. This is done so at the ratio determined by the flex of each of the two components. The actual value is only relevant if there are other flexible components (components with flex values larger than zero) within the same container. Components that specify a stretchId should specify a flex value as well.
menuBar.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
menuBar.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
menuBar.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
menuBar.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
menuBar.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
menuBar.stretchId.description=the id of a child component that will be given all of the available space left in the menuBar if the contents of the menuBar do not use all of the space that the menuBar has available. A menuBar that specifies a stretchId should specify a flex value as well.
menuBar.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
menuBar.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
menuBar.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
message.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
message.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
message.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
message.description=Component that displays a message on behalf of a component. ADF input components typically support automatically showing their own messages, so this tag should only be used for non-ADF input components and when you do not want the automatic ADF input message behavior. It is also useful for component-level messages where either a note window pop up isn't supported or where you simply don't want a pop up for the message (this is especially useful when the component already has a pop up for selecting a color, date, etc. which would compete with the messaging pop up).
message.display-label=Message
message.for.description=the relative ID from this component to the component whose messages will be displayed
message.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
message.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
message.message.description=the error, warning, or informational text.
message.messageType.description=the type of the message. Defaults to "none".
message.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
message.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
message.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
message.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
message.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
message.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
messages.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
messages.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
messages.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
messages.description=The messages component gives the user important messaging information that may or may not be directly related to specific components.
messages.display-label=Messages
messages.globalOnly.description=whether to render all messages or just global messages. Normally global messages are rendered followed by messages for individual components. If this attribute is set to true, only the global messages will be rendered.
messages.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
messages.inline.description=whether to render the message list inline with the page or in a popup window. Normally these messages are rendered in a pop up. If this attribute is set to true, the messages list will be rendered inline wherever this component is located in the page layout.
messages.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
messages.message.description=the main text message for the box.
messages.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
messages.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
messages.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
messages.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
messages.text.description=the overridden title text.
messages.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
messages.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
navigationPane.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
navigationPane.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
navigationPane.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
navigationPane.description=The navigationPane component creates a series of navigation items representing one level in a navigation hierarchy.
navigationPane.disabled.description=whether the component is disabled.
navigationPane.display-label=Navigation Pane 
navigationPane.hint.description=how the navigational items are displayed. Options are: bar - display items separated by a bar buttons - display items with a vertical separator between them choice - display items in a popup list when icon is clicked list - display items in a bulleted list tabs - display each item in a tab 
navigationPane.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
navigationPane.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
navigationPane.itemRemoval.description= Determines if item removal is enabled. Item removal is only supported if hint=tabs. This attribute supports these itemRemoval types: <html:ul> <html:li> none - item removal is not enabled. This is the default value. </html:li> <html:li> all - item removal is enabled on all tabs, regardless if they are disclosed. The last tab in the navigationPane can be removed.</html:li> <html:li> allExceptLast - item removal is enabled on all tabs, regardless if they are disclosed. The last tab in the navigationPane cannot be removed.</html:li> </html:ul> Choosing to remove an item will cause an ItemEvent of type 'remove' to be launched. This event can be listened for on a commandNavigationItem using the itemEventListener attribute. It is up to the developer to handle this event and code the actual removal of the tab. This is because of the dynamic nature of the navigationPane component, which may have dynamic children. This also allows a finer level of control by the developer, who can then choose a custom implementation that may (for example) include warning dialogs, and control of which item gains focus after an item is removed. 
navigationPane.level.description=the level, based on a 0 based index, in the menuModel to render based on the focusPath of the menuModel.
navigationPane.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
navigationPane.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
navigationPane.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
navigationPane.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
navigationPane.title.description=the text that describes the items. (This attribute is only applicable if the rendering hint supports it, e.g. "choice".)
navigationPane.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
navigationPane.value.description=the hierarchy of navigation data - must be of type org.apache.myfaces.trinidad.model.MenuModel
navigationPane.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
navigationPane.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
navigationPane.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
noteWindow.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
noteWindow.autoDismissalTimeout.description=A period of seconds that the popup will be displayed before it is automatically dismissed. When a value is provided for this property it will override the default auto-dismissal behavior. The popup will dismiss after shown for the period of seconds provided by the property. The timeout period is revoked if the user moves the mouse over the content of the note window popup. The act of canceling the timeout dismissal period reverts the auto-dismissal rule back to the default for the note window, which will dismiss when focus changes from the launching source or from the content of the popup. Note: the use of this feature enabled by this property is not accessible friendly because the timeout cancelation period is triggered by a mouse over and does not provide any keyboard equivalence.
noteWindow.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
noteWindow.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
noteWindow.description=A note window is a floating panel that contains read-only information associated with a particular UI component. Note windows are used to display help and messages.
noteWindow.display-label=Note Window 
noteWindow.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
noteWindow.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
noteWindow.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
noteWindow.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
noteWindow.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
noteWindow.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
outputFormatted.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
outputFormatted.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
outputFormatted.converter.description=a converter object
outputFormatted.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
outputFormatted.description=The outputFormatted bean accepts a string in its "value" attribute containing a very limited set of HTML markup and outputs formatted results.
outputFormatted.display-label=Output Formatted 
outputFormatted.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
outputFormatted.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
outputFormatted.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
outputFormatted.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
outputFormatted.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
outputFormatted.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
outputFormatted.styleUsage.description=the style usage, intended to make it easier to put the correct style on the text. Set this attribute when the outputFormatted is for instruction text, page stamp text, or inContextBranding text. If styleUsage and styleClass attributes are both set, the styleClass attribute takes precedence.
outputFormatted.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
outputFormatted.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
outputFormatted.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
outputLabel.accessKey.description=a character used to gain quick access to the form element specified by the for attribute, if set. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
outputLabel.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
outputLabel.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
outputLabel.converter.description=a converter object
outputLabel.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
outputLabel.description=Component that displays a label for a form component.
outputLabel.display-label=Output Label 
outputLabel.for.description=the ID of the component that this component refers to. This must be set for the accessKey to work. Identifiers are relative to the component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
outputLabel.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
outputLabel.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
outputLabel.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
outputLabel.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
outputLabel.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
outputLabel.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed.
outputLabel.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
outputLabel.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
outputLabel.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
outputLabel.valueAndAccessKey.description=an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
outputLabel.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
outputText.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
outputText.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
outputText.converter.description=a converter object
outputText.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
outputText.description=The outputText component supports styled text.
outputText.description.description=an additional description to be attached to the text, for use in improving accessibility. The description will be available to screen readers and other accessibility agents, but will not be otherwise visible.
outputText.display-label=Output Text 
outputText.escape.description= an attribute controlling whether output will be escaped for the current markup language or not. This attribute defaults to true, and should only be set to false if absolutely necessary. When set to false, you may exposed to cross-site scripting attacks if the value of this component is any way derived from values supplied by a user; see outputFormatted for a safe alternative. In addition, nearly all attributes are ignored when "escape" is set to false (e.g., "styleClass" is not output).
outputText.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
outputText.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
outputText.noWrap.description=whether whitespace wrapping should be allowed in this component.
outputText.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
outputText.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
outputText.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
outputText.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
outputText.truncateAt.description=the length at which the text should automatically begin truncating. When set to zero (the default), the string will never truncate. Values from one to fifteen will display the first 12 characters followed by an ellipsis (...). The outputText component will not truncate strings shorter than fifteen characters. For example, for the value of 1234567890123456, setting truncateAt to 0 or 16 will not truncate. Setting truncateAt to any value between 1-15 will truncate to 123456789012...
outputText.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
outputText.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
outputText.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
pageTemplate.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
pageTemplate.description=Renders a PageTemplate.
pageTemplate.display-label=Page Template 
pageTemplate.id.description=The identifier for the component. The identifier must follow a subset of the syntax allowed in HTML
pageTemplate.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
pageTemplate.value.description=If this attribute is set to an instance of oracle.adf.view.rich.model.PageTemplateModel, the view ID will be taken from the model and the model will receive notifications of the starting and stopping of the template context. Otherwise, if the value is non-null the value is assigned to the "bindings" EL variable while this template is rendering or decoding.
pageTemplate.viewId.description=This is the viewId of the resource that contains the definition for this pageTemplate. Typically this points to another jsp page, that begins with the &lt;af:pageTemplateDef/&gt; tag. If the value attribute of the page template resolves to an instance of PageTemplateModel then the view ID will be retrieved from the the model instead of using the viewId tag attribute.
pageTemplateDef.display-label=Page Template Def 
panelAccordion.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelAccordion.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelAccordion.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelAccordion.description=The panelAccordion control creates, contains, and shows a series of items defined by showDetailItem nodes.
panelAccordion.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the panelAccordion come from: <html:ul> <html:li>auto - either "children" or "parent", depending on the container the panelAccordion is inside; if the panelAccordion is being stretched by its ancestor then "parent" will be used, otherwise "children" will be used</html:li> <html:li>children - the panelAccordion will get its dimensions from the currently disclosed showDetailItem children. As a result, the stretchChildren, flex, and inflexibleHeight attributes on each af:showDetailItem and any height assignment (e.g. inlineStyle, styleClass, or manual pane resizing) on the panelAccordion must be omitted or else there would be a competing assignment for how tall the component will be.</html:li> <html:li>parent (the default) - the panelAccordion will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin (stretchChildren, flex, and inflexibleHeight on af:showDetailItem will be honored)</html:li> </html:ul> 
panelAccordion.discloseMany.description=whether more than one detail item may be disclosed at a time. Use "false" (the default) to keep a maximum of one detail item disclosed at all times. Use "true" to make it possible for multiple detail items to be disclosed.
panelAccordion.discloseNone.description=whether a minimum of one detail item must be disclosed at a time. Use "false" (the default) to keep a minimum of one detail item disclosed at all times. Use "true" to make it possible for zero detail items to be disclosed.
panelAccordion.display-label=Panel Accordion 
panelAccordion.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelAccordion.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelAccordion.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelAccordion.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelAccordion.reorder.description=Sets if reordering of the panel accordion's items should be allowed. After a reorder, an event is sent to the server. If all the children components of the panel accordion are RichShowDetailItem components, the display indexes will be updated to reflect the new order. The accordion will update as many items as needed to ensure they appear in the proper order. This means that if there are five items all with the default index of -1, and the first is moved to position 3, the items now first, second and third (where the third is the old first) will have their display indexes updated to 0, 1 and 2 respectively. The updating of display indexes in flattened components is not supported at this time.
panelAccordion.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelAccordion.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelAccordion.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelAccordion.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelBorderLayout.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelBorderLayout.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelBorderLayout.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelBorderLayout.description=The panelBorderLayout component is a layout element which lays out all of its children consecutively in its middle, and supports the following facets: top, bottom, left, right, start, end, innerTop, innerBottom, innerLeft, innerRight, innerStart, and innerEnd
panelBorderLayout.display-label=Panel Border Layout 
panelBorderLayout.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelBorderLayout.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelBorderLayout.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelBorderLayout.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelBorderLayout.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelBorderLayout.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelBorderLayout.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelBorderLayout.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelBox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelBox.background.description=the appearance type of the content container. It should be one of "light", "medium", "dark", or "default"
panelBox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelBox.contentStyle.description=the inline style of the content region.
panelBox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelBox.description=The panelBox is used to place ancillary information on a page, offset by a certain color.
panelBox.disclosed.description=whether or not to disclose the children
panelBox.disclosureListener.description=a method reference to a disclosure listener
panelBox.display-label=Panel Box 
panelBox.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
panelBox.helpTopicId.description=the id used to look up a topic in a helpProvider.
panelBox.icon.description=the URI of an image to be displayed in the panelBox header. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
panelBox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelBox.immediate.description=whether data validation - client-side or server-side - should be skipped when events are generated by this component. When immediate is false (the default), the disclosure event will be delivered during the Invoke Application phase, which will trigger validation. When set to true, the disclosure event will be executed during the Apply Request Values phase.
panelBox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelBox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelBox.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
panelBox.ramp.description=the appearance type of the content container. It should be either "core" or "highlight"
panelBox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelBox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelBox.showDisclosure.description=Whether or not to render the disclosure icon. If this is set to false all other attributes that deal with disclosure are ignored.
panelBox.showHeader.description=the display strategy for the panelBox's header. It should be either "never", "ifNeeded", or "always". No header will be shown if the value is "never". If the value is "always", the header will always be shown. This value is useful when the panelBox has a drag source attached or when you want the user to have access to the disclosure control. If the value is "ifNeeded", the header will only be shown if the "icon" or "text" properties are set, if the "toolbar" facet is populated, or if the panelBox has a drag source attached. The default is "ifNeeded" for backwards compatibility
panelBox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelBox.text.description=the header text of the panelBox.
panelBox.titleHalign.description=the alignment of the text and icon within the title bar. Supported values are: "start": left side of the bar in left-to-right mode, right of the bar in right-to-left mode (this is the default) "end": right side of the bar in left-to-right mode, left side of the bar in right-to-left mode "center": in the center "left": left side of the bar "right": right side of the bar This valueis ignored if the toolbar facet is defined.
panelBox.type.description=how the panelBox will handle geometry management. Options are: default - either flow or stretch, depending on the container the panelBox is inside flow - does not support being stretched and will not attempt to stretch the children; the height of the panelBox will be determined by the browser based on the children stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of the panelBox is in no way determined by the children 
panelBox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelBox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelCollection.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelCollection.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelCollection.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelCollection.defaultToolbarItemDisplay.description=Attribute used to hide the text for the default toolbar items. Use "icon" to hide the text or "iconAndText" to display the text with the icon
panelCollection.description=A panel component that aggregates collection components like table, treeTable and tree to display standard/application menus, toolbars and statusbar items.
panelCollection.display-label=Panel Collection 
panelCollection.featuresOff.description=a space-separated list of default features to turn off for the panelCollection. Supported values are: ValueTurns off statusBarStatus bar viewMenu'View' menu formatMenu'Format' menu columnsMenuItem'Columns' sub-menu item columnsMenuItem:col1,col20Columns with column ID: 'col1' and 'col20' inside 'Columns' sub-menu freezeMenuItem'Freeze' menu item detachMenuItem'Detach' menu item sortMenuItem'Sort' menu item reorderColumnsMenuItem'Reorder Columns' menu item resizeColumnsMenuItem'Resize Columns' menu item wrapMenuItem'Wrap' menu item showAsTopMenuItemTree/TreeTable 'Show As Top' menu item scrollToFirstMenuItemTree/TreeTable 'Scroll To First' menu item scrollToLastMenuItemTree/TreeTable 'Scroll To Last' menu item freezeToolbarItem'Freeze' toolbar item detachToolbarItem'Detach' toolbar item wrapToolbarItem'Wrap' toolbar item showAsTopToolbarItemTree/TreeTable 'Show As Top' toolbar item wrap'Wrap' menu and toolbar items freeze'Freeze' menu and toolbar items detach'Detach' menu and toolbar items 
panelCollection.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelCollection.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelCollection.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelCollection.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelCollection.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelCollection.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelCollection.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelCollection.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelDashboard.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelDashboard.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelDashboard.columns.description=the number of columns the width of the dashboard will be divided into
panelDashboard.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelDashboard.description=The panelDashboard component arranges child panelBoxes (or regions with showHeader=always) into a grid of columns and rows. It will stretch its panelBox children to fill up the width of a column and the specified row height.
panelDashboard.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the panelDashboard come from: <html:ul> <html:li>auto - either "children" or "parent", depending on the container the panelDashboard is inside; if the panelDashboard is being stretched by its ancestor then "parent" will be used, otherwise "children" will be used</html:li> <html:li>children - the panelDashboard will get its dimensions from the children (rowHeight will still be honored so the contents of the rows will be constrained to those dimensions unless percent units are specified and then the default value will be used instead). Note that any height assignment (e.g. inlineStyle or styleClass) on the panelDashboard must be omitted or else there would be a competing assignment for how tall the component will be.</html:li> <html:li>parent (the default) - the panelDashboard will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin</html:li> </html:ul> 
panelDashboard.display-label=Panel Dashboard 
panelDashboard.dropListener.description=A method reference to a callback with the signature oracle.adf.view.rich.dnd.DnDAction method(oracle.adf.view.rich.event.DropEvent dropEvent) called when a drop occurs on the component. Since the panelDashboard will automatically adjust the positions of its children in the browser, this method should return DnDAction.NONE if your handler is successful in adjusting the position of the reordered children since this will cause the panelDashboard to be left as is. If you return DnDAction.MOVE, the panelDashboard will be redrawn. You may wish to use org.apache.myfaces.trinidad.change.ReorderChildrenComponentChange if you wish to preserve a new ordering of the children. The dropEvent.getDropSiteIndex() method will give you the location that the user desires the dragged component to end up at. Use dropEvent.getTransferable().getData(DataFlavor.UICOMPONENT_FLAVOR) to get the dragged component.
panelDashboard.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelDashboard.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelDashboard.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelDashboard.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelDashboard.rowHeight.description=the height of the rows of the grid layout as a CSS length. If dimensionsFrom resolves to "children", percent units are not allowed and the default value is used instead.
panelDashboard.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelDashboard.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelDashboard.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelDashboardBehavior.display-label=Panel Dashboard Behavior 
panelFormLayout.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelFormLayout.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelFormLayout.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelFormLayout.description=The panelFormLayout positions input form controls, such that their labels and fields line up vertically. It supports multiple columns, and also supports a footer facet.
panelFormLayout.display-label=Panel Form Layout 
panelFormLayout.fieldWidth.description=The preferred width of the fields. The web browser may override this dimension if it cannot fit the fields in the space allocated. You may define the fieldWidth using any CSS unit such as em, px, or %. The units used for this value must be identical to the units used in the labelWidth value. If a fieldWidth is provided as a percentage the labelWidth and the fieldWidth should total up to 100% (regardless of the number of columns). If the fieldWidth is not specified, the browser will let the children components have a natural flowing layout which may mean that the footer facet contents do not line up with the main form items. However, if the fieldWidth is not specified but a labelWidth is specified as a percentage, the fieldWidth will be derived as the appropriate percentage value for you. Note that if you are using a percentage value, multiple columns, and a footer, you may see a slight offset between the positioning of the main form items and the footer items in some web browsers if that browser does not honor fractional divisions of percentages. To minimize this effect, it is recommended that a percentage labelWidth be evenly divisible by the number of columns.
panelFormLayout.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelFormLayout.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelFormLayout.labelAlignment.description=the alignment of label prompts for the form items. 
panelFormLayout.labelWidth.description=The preferred width of the labels. The web browser may override this dimension if it cannot fit the labels in the space allocated. You may define the labelWidth using any CSS unit such as em, px, or %. The units used for this value must be identical to the units used in the fieldWidth value. If a labelWidth is provided as a percentage the labelWidth and the fieldWidth should total up to 100% (regardless of the number of columns). If the labelWidth is not specified, the browser will let the children components have a natural flowing layout which may mean that the footer facet contents do not line up with the main form items. However, if the labelWidth is not specified but a fieldWidth is specified as a percentage, the labelWidth will be derived as the appropriate percentage value for you. Note that if you are using a percentage value, multiple columns, and a footer, you may see a slight offset between the positioning of the main form items and the footer items in some web browsers if that browser does not honor fractional divisions of percentages. To minimize this effect, it is recommended that a percentage labelWidth be evenly divisible by the number of columns.
panelFormLayout.maxColumns.description=the maximum number of columns to show. This attribute defaults to 3 and 2 on PDAs. If this panelFormLayout is inside of another panelFormLayout, this will always be 1.
panelFormLayout.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelFormLayout.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelFormLayout.rows.description=the number of rows after which to start a new column. This attribute defaults to Integer.MAX_VALUE. The number of rows actually rendered depends also on the "maxColumns" property. If the children will not fit in the given number of rows and columns, the number of rows will increase to accomodate the children.
panelFormLayout.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelFormLayout.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelFormLayout.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelFormLayout.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelGroupLayout.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelGroupLayout.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelGroupLayout.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelGroupLayout.description=A panel component that displays its children in a group.
panelGroupLayout.display-label=Panel Group Layout 
panelGroupLayout.halign.description=the horizontal alignment for horizonal, vertical and scroll layouts. This is ignored if "layout" is "default". Note that if "layout" is "horizontal", the browsers can only reliably handle horizontal alignment of components that have either fixed widths or that are "inline" such as outputText.
panelGroupLayout.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelGroupLayout.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelGroupLayout.landmark.description=Specifies the WAI-ARIA landmark role for this panelGroupLayout.
panelGroupLayout.layout.description=the type of layout. Acceptable values include: "default": consecutive layout as defined by the browser, with wrapping allowed, and following the bidirectional layout algorithm. As a result, in the presence of mixed right-to-left and left-to-right text, contents may not display consecutively. "horizontal": strictly consecutive without wrapping "vertical": vertically stacked "scroll": vertical, with scrollbars displayed if content overflows (this layout option is only intended for cases where the panelGroupLayout is being stretched such as when inside of a decorativeBox, panelSplitter, panelStretchLayout, or showDetailItem with stretchChildren set to first) 
panelGroupLayout.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelGroupLayout.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelGroupLayout.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelGroupLayout.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelGroupLayout.theme.description=The component style theme to apply to the children of this component. By default, this component is not styled for the different themes, but can be used to change the theme without associated skin changes that will occur with af:document and af:decorativeBox. Themes are not compatible with tonal styles and therefore only one method can be used per page (themes or tonal styles). A blank theme will remove the current theme, and a value of "inherit", null or not setting a theme will use the current theme. Skins are the sources of the the themes. Some skins may have no themed definitions. Suggested theme names include "dark", "medium", "light", and "default".
panelGroupLayout.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelGroupLayout.valign.description=the vertical alignment of a horizontal layout. This is ignored if "layout" is not "horizontal".
panelGroupLayout.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelHeader.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelHeader.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelHeader.contentStyle.description=the inline style of the content region.
panelHeader.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelHeader.description=The Header Panel control places a label and optional icon at the top of a section.
panelHeader.display-label=Panel Header 
panelHeader.helpTopicId.description=the id used to look up a topic in a helpProvider.
panelHeader.helpType.description=Along with the help facet this is deprecated, helpTopicId should be used for providing help. Controls if the help is displayed inline or as a link to a popup.
panelHeader.icon.description= the URI of an image to be displayed in the header. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
panelHeader.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelHeader.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelHeader.messageType.description=whether an error, info, confirmation, or warning header is needed.
panelHeader.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelHeader.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelHeader.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelHeader.size.description=the size of this header. The largest is 0 and corresponds to an H1 header the smallest is 5 and corresponds to an H6 Header. Note that this version of the tag will display all sizes above 2 the same as size 2. Setting the size to a negative number will allow the header to be calculated according to its parent header. The default value for this property is -1.
panelHeader.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelHeader.text.description=the label of the header.
panelHeader.type.description=how the component will handle geometry management. Options are: default - either flow or stretch, depending on the container the panelBox is inside flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children 
panelHeader.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelHeader.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelLabelAndMessage.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
panelLabelAndMessage.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelLabelAndMessage.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
panelLabelAndMessage.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
panelLabelAndMessage.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelLabelAndMessage.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelLabelAndMessage.description=This component lays out a label and children. Typically, the only child of this component will be an input element of some sort, but as many children as necessary can be added. When using panelLabelAndMessage with ADF input components, you should always set simple="true" on the input components. Non-simple ADF input components already effectively have all the functionality of panelLabelAndMessage. To lay out multiple panelLabelAndMessage components - or multiple non-simple ADF input components - you can use the panelFormLayout component. When panelLabelAndMessage components are placed inside a panelFormLayout the labels will line up.
panelLabelAndMessage.display-label=Panel Label And Message 
panelLabelAndMessage.for.description=the ID of the component that this component's label refers to. Identifiers are relative to the component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
panelLabelAndMessage.helpTopicId.description=the id used to look up a topic in a helpProvider. Note that instructions text is not supported on this component, otherwise all helpTopicId functionality is supported.
panelLabelAndMessage.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelLabelAndMessage.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelLabelAndMessage.label.description=the label of the bean.
panelLabelAndMessage.labelAndAccessKey.description=an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the label to "Text" and the access key to 'e'.
panelLabelAndMessage.labelStyle.description=the inline styles for the label portion of the component, e.g. "vertical-align: bottom;" to align the label to the bottom of the container.
panelLabelAndMessage.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelLabelAndMessage.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelLabelAndMessage.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelLabelAndMessage.showRequired.description=whether the panel should show an indicator that its contents are required.
panelLabelAndMessage.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelLabelAndMessage.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelLabelAndMessage.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelList.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelList.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelList.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelList.description=The panelList control outputs each visible child in a list with a bullet next to it.
panelList.display-label=Panel List 
panelList.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelList.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelList.listStyle.description=an inline CSS style for the list. For example, you can style the list to be squares like this: listStyle='list-style-type:square'
panelList.maxColumns.description=the maximum number of columns to show. This attribute defaults to 3 and defaults to 2 for PDA's
panelList.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelList.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelList.rows.description=the number of rows after which to start a new column. This attribute defaults to Integer.MAX_VALUE. The number of rows actually rendered depends also on the "maxColumns" attribute. If the children will not fit in the given number of rows and columns, the number of rows will increase to accomodate the children.
panelList.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelList.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelList.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelList.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelSplitter.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelSplitter.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelSplitter.collapsed.description=whether the splitter is in a collapsed state. When the splitter is collapsed (collapsed="true") and the splitter is positioned from the beginning (positionedFromEnd="false"), the first pane is hidden such that the second pane stretches to fill all available space. When the splitter is positioned from the end (positionedFromEnd="true"), collapsing the splitter hides the second pane. By default collapse is "false", which means that both panes are displayed.
panelSplitter.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelSplitter.description=Use this to divide a region into two parts with a repositionable divider.
panelSplitter.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the panelSplitter come from: <html:ul> <html:li>auto - either "children" or "parent", depending on the container the panelSplitter is inside; if the panelSplitter is being stretched by its ancestor then "parent" will be used, otherwise "children" will be used</html:li> <html:li>children - the panelSplitter will get its dimensions from the children (note that if orientation="vertical" then the contents of the collapsible panel will not contribute to the size of the panelSplitter since that facet's contents must be constrained to the size specified in splitterPosition). Note that any height assignment (e.g. inlineStyle or styleClass) on the panelSplitter must be omitted or else there would be a competing assignment for how tall the component will be.</html:li> <html:li>parent (the default) - the panelSplitter will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin.</html:li> </html:ul> 
panelSplitter.disabled.description=an attribute which if set to "true", the component becomes non-interactive. Otherwise,the default value is "false" and component assumes its expected behavior.
panelSplitter.display-label=Panel Splitter 
panelSplitter.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
panelSplitter.firstBorder.description=Specifies how you want borders to be displayed around the contents of the "first" facet. The "first" facet contents will have a border surrounding it if either this value is set to "all" or if set to "skin" and the active skin's "-tr-first-border" property is set "all". The "first" facet contents will not have a border surrounding it if either this value is set to "none" or if set to "skin" and the active skin's "-tr-first-border" property is set "none". The default value is "skin". It is important to note that this attribute (just like inlineStyle) can easily be abused. More times than not, you should not use this attribute because by using it, you are likely optimizing your page design for a specific skin. You should only force the borders on or off for cases where the contents of the pane would either provide enough or not enough delineation among the 2 panes of your splitter. For example, forcing borders off on a splitter that surrounds your entire page or forcing borders on for a pane that needs emphasis. You may want to test your application in a variety of skins to see if your use of these kinds of styling attributes will prevent others from being able to display your application with custom skins.
panelSplitter.firstLandmark.description=Specifies the WAI-ARIA landmark role for the content of the first facet.
panelSplitter.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelSplitter.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelSplitter.orientation.description=whether a horizontal or vertical split is created. The string literal value of "horizontal" indicates that the splitter panes will be side-by-side, and a string literal value of "vertical" indicates the panes will be on top of each other.
panelSplitter.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelSplitter.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
panelSplitter.positionedFromEnd.description=an attribute which if set to "false" (the default), the initial position of the repositionable divider is measured from the start side (the top or start).If the value is "true", the initial position of the repositionable divider is measured from the end side (the bottom or end).
panelSplitter.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelSplitter.secondBorder.description=Specifies how you want borders to be displayed around the contents of the "second" facet. The "second" facet contents will have a border surrounding it if either this value is set to "all" or if set to "skin" and the active skin's "-tr-second-border" property is set "all". The "second" facet contents will not have a border surrounding it if either this value is set to "none" or if set to "skin" and the active skin's "-tr-second-border" property is set "none". The default value is "skin". It is important to note that this attribute (just like inlineStyle) can easily be abused. More times than not, you should not use this attribute because by using it, you are likely optimizing your page design for a specific skin. You should only force the borders on or off for cases where the contents of the pane would either provide enough or not enough delineation among the 2 panes of your splitter. For example, forcing borders off on a splitter that surrounds your entire page or forcing borders on for a pane that needs emphasis. You may want to test your application in a variety of skins to see if your use of these kinds of styling attributes will prevent others from being able to display your application with custom skins.
panelSplitter.secondLandmark.description=Specifies the WAI-ARIA landmark role for the content of the second facet.
panelSplitter.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelSplitter.splitterPosition.description=the initial position of the repositionable divider. The panelSplitter separates two areas with a separator. The user may drag this separator to adjust how much space is allocated for each area. This attribute specifies the number of pixels for the width or height (depending on the orientation) for one of the areas and the other area gets the remaining space. The positionedFromEnd attribute determines which area is sized and which area gets the remaining space.
panelSplitter.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelSplitter.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelSplitter.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelStretchLayout.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelStretchLayout.bottomHeight.description=the height of the bottom facet specified as a CSS length or auto such that this facet will no longer be stretched and instead will consume the initial offsetHeight given to its children by the browser. It is important to note that in an average page, a switch to a layout using automatic heights exhibited a 10 percent degradation in initial layout speed in Internet Explorer and a 5 percent degradation in Firefox. Results will vary but it is recommended that you use this sparingly in order to optimize your page. Also an automatic height will cause the facet child to not be stretched both vertically and horizontally. If necessary, you can make that automatic height child stretch horizontally by specifying a 100% width in the inlineStyle of that child. Note that many components such as the panelGroupLayout with layout set to scroll or vertical will have their own built-in stretched widths by default. If dimensionsFrom resolves to "children", percent units are not allowed and the default value will be used instead.
panelStretchLayout.bottomLandmark.description=Specifies the WAI-ARIA landmark role for the content of the bottom facet.
panelStretchLayout.centerLandmark.description=Specifies the WAI-ARIA landmark role for the content of the center facet.
panelStretchLayout.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelStretchLayout.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelStretchLayout.description=The panelStretchLayout component stretches the child in the center facet to fill all of available space.
panelStretchLayout.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the panelStretchLayout come from: <html:ul> <html:li>auto - either "children" or "parent", depending on the container the panelStretchLayout is inside; if the panelStretchLayout is being stretched by its ancestor then "parent" will be used, otherwise "children" will be used</html:li> <html:li>children - the panelStretchLayout will get its dimensions from the children (topHeight and bottomHeight will still be honored unless percent units are specified so the contents of these facets will be constrained to those dimensions and if those dimensions are set to auto then whatever those facets need for their height will contribute to the height of the panelStretchLayout). Note that any height assignment (e.g. inlineStyle or styleClass) on the panelStretchLayout must be omitted or else there would be a competing assignment for how tall the component will be.</html:li> <html:li>parent (the default) - the panelStretchLayout will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin (topHeight and bottomHeight will be honored)</html:li> </html:ul> 
panelStretchLayout.display-label=Panel Stretch Layout 
panelStretchLayout.endLandmark.description=Specifies the WAI-ARIA landmark role for the content of the end facet.
panelStretchLayout.endWidth.description=the width of the end facet specified as a CSS length or auto such that this facet will no longer be stretched and instead will consume the initial offsetWidth given to its children by the browser. It is important to note that in an average page, a switch to a layout using automatic widths exhibited a 10 percent degradation in initial layout speed in Internet Explorer and a 5 percent degradation in Firefox. Results will vary but it is recommended that you use this sparingly in order to optimize your page. Also an automatic width will cause the facet child to not be stretched both vertically and horizontally. Note that many components such as the panelGroupLayout with layout set to scroll or vertical will have their own built-in stretched widths by default which will then report an unstable offsetWidth so these components cannot be used in conjunction with auto. You may never use auto in conjunction with a child component that uses a percentage length for its width. The facet content cannot rely on percentage widths or be any component that would naturally consume the entire width of its surrounding container if you want auto to be effective. Instead, the contents must use a stable, stand-alone width (not dependent upon the width of its parent container) when auto is specified.
panelStretchLayout.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelStretchLayout.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelStretchLayout.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelStretchLayout.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelStretchLayout.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelStretchLayout.startLandmark.description=Specifies the WAI-ARIA landmark role for the content of the start facet.
panelStretchLayout.startWidth.description=the width of the start facet specified as a CSS length or auto such that this facet will no longer be stretched and instead will consume the initial offsetWidth given to its children by the browser. It is important to note that in an average page, a switch to a layout using automatic widths exhibited a 10 percent degradation in initial layout speed in Internet Explorer and a 5 percent degradation in Firefox. Results will vary but it is recommended that you use this sparingly in order to optimize your page. Also an automatic width will cause the facet child to not be stretched both vertically and horizontally. Note that many components such as the panelGroupLayout with layout set to scroll or vertical will have their own built-in stretched widths by default which will then report an unstable offsetWidth so these components cannot be used in conjunction with auto. You may never use auto in conjunction with a child component that uses a percentage length for its width. The facet content cannot rely on percentage widths or be any component that would naturally consume the entire width of its surrounding container if you want auto to be effective. Instead, the contents must use a stable, stand-alone width (not dependent upon the width of its parent container) when auto is specified.
panelStretchLayout.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelStretchLayout.theme.description=The component style theme to apply to the children of this component. By default, this component is not styled for the different themes, but can be used to change the theme without associated skin changes that will occur with af:document and af:decorativeBox. Themes are not compatible with tonal styles and therefore only one method can be used per page (themes or tonal styles). A blank theme will remove the current theme, and a value of "inherit", null or not setting a theme will use the current theme. Skins are the sources of the the themes. Some skins may have no themed definitions. Suggested theme names include "dark", "medium", "light", and "default".
panelStretchLayout.topHeight.description=the height of the top facet specified as a CSS length or auto such that this facet will no longer be stretched and instead will consume the initial offsetHeight given to its children by the browser. It is important to note that in an average page, a switch to a layout using automatic heights exhibited a 10 percent degradation in initial layout speed in Internet Explorer and a 5 percent degradation in Firefox. Results will vary but it is recommended that you use this sparingly in order to optimize your page. Also an automatic height will cause the facet child to not be stretched both vertically and horizontally. If necessary, you can make that automatic height child stretch horizontally by specifying a 100% width in the inlineStyle of that child. Note that many components such as the panelGroupLayout with layout set to scroll or vertical will have their own built-in stretched widths by default. If dimensionsFrom resolves to "children", percent units are not allowed and the default value will be used instead.
panelStretchLayout.topLandmark.description=Specifies the WAI-ARIA landmark role for the content of the top facet.
panelStretchLayout.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelStretchLayout.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelTabbed.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelTabbed.childCreation.description=Controls when the contetns of the ShowDetailItem children are created. Introduces a server-side performance enhancement by postponing construction of the components under the undisclosed ShowDetailItems until they are likely to be disclosed Legal values are: "immediate": All showDetailItem children will be populated immediately "lazy": ShowDetailItem children will be populated when they are likely to be disclosed. 
panelTabbed.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelTabbed.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelTabbed.description=The panelTabbed control creates, contains and shows a series of items defined by showDetailItem nodes.
panelTabbed.dimensionsFrom.description= determines how the component will handle geometry management. This specifies where the dimensions of the panelTabbed come from: <html:ul> <html:li>auto - either "disclosedChild" or "parent", depending on the container the panelTabbed is inside; if the panelTabbed is being stretched by its ancestor then "parent" will be used, otherwise "disclosedChild" will be used</html:li> <html:li>disclosedChild - the panelTabbed will get its dimensions from the currently disclosed showDetailItem child (as a result, the stretchChildren attribute on af:showDetailItem and any height assignment on the panelTabbed must be omitted or else it would mean a circular dependency and scrambled display in the browser)</html:li> <html:li>parent (the default) - the panelTabbed will get its dimensions from the inlineStyle and if not provided from there then from its parent or if not provided from the parent then from the skin (stretchChildren on af:showDetailItem will be honored)</html:li> </html:ul> 
panelTabbed.display-label=Panel Tabbed 
panelTabbed.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelTabbed.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelTabbed.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelTabbed.position.description=the position of the tab bar. Defaults to "above". In accessibility screen reader mode, tab bar position is always "above".
panelTabbed.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelTabbed.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelTabbed.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelTabbed.tabRemoval.description= determines if tab removal is enabled. This attribute supports these tabRemoval types: <html:ul> <html:li> none - tab removal is not enabled.</html:li> <html:li> all - tab removal is enabled on all tabs, regardless if they are disclosed. The last tab in the panelTabbed can be removed.</html:li> <html:li> allExceptLast - tab removal is enabled on all tabs, regardless if they are disclosed. The last tab in the panelTabbed cannot be removed.</html:li> </html:ul> Choosing to remove a tab will cause an ItemEvent of type 'remove' to be launched. This event can be listened for on a showDetailItem using the itemListener attribute. It is up to the developer to handle this event and code the actual removal of the tab. This is because of the dynamic nature of the panelTabbed component, which may have dynamic children. This also allows a finer level of control by the developer, who can then choose a custom implementation that may (for example) include warning dialogs, and control of which tab gains focus after a tab is removed. 
panelTabbed.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelTabbed.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
panelWindow.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
panelWindow.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
panelWindow.closeIconVisible.description=whether the close icon is visible.
panelWindow.contentHeight.description=the height of the content area of the dialog in pixels.
panelWindow.contentWidth.description=the width of the content area of the dialog in pixels.
panelWindow.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
panelWindow.description=A panel component that displays its children in a window.
panelWindow.display-label=Panel Window 
panelWindow.helpTopicId.description=the id used to look up a topic in a helpProvider. If provided, a help icon will appear in the title bar.
panelWindow.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
panelWindow.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
panelWindow.modal.description=whether the window is modal; by default false.
panelWindow.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
panelWindow.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
panelWindow.resize.description=The dialog's resizing behavior. Acceptable values include: "off": the dialog automatically sizes to its content if stretchChildren is "none". "on": user can resize the dialog with their mouse by dragging any of the dialog edges. 
panelWindow.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
panelWindow.stretchChildren.description=The stretching behavior for children. Acceptable values include: "none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched) "first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched) 
panelWindow.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
panelWindow.title.description=the title of the window.
panelWindow.titleIconSource.description=the URI specifying the location of the title icon source. The title icon will typically be displayed in the top left corner of the window
panelWindow.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
panelWindow.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
poll.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
poll.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
poll.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
poll.description=The poll component will deliver PollEvents to the server at fixed intervals.
poll.display-label=Poll
poll.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
poll.immediate.description=whether data validation should be skipped when poll events are generated by this component. When immediate is false (the default), events will be delivered during the Invoke Application phase, which will trigger validation. When set to true, events will be executed during the Apply Request Values phase.
poll.interval.description=the time between poll events, in milliseconds. The default is 5000. If the value is set to less than zero, polling will be disabled.
poll.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
poll.pollListener.description=a method reference to a poll listener
poll.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
poll.timeout.description=If polling is used to update a page, there is a high that a page will never timeout, since the client keeps sending poll requests to the server. However, if we notice user inactivity after a certain amout of time we stop polling to give the application a chance to time out. By default the framework will use the value which has been configured in the web.xml, for the "oracle.adf.view.rich.poll.TIMEOUT" parameter. If there is also no value defined in the web.xml, we will use 10 minutes as the default value. However we allow page authors to override the value that is specified in web.xml on a per page base. The timeout property takes the number of milliseconds after which polling will stop, if there was no activity by the user, e.g. via keyboard or mouse. If there are multiple poll components on a page we take the maximum of their timeout values.
popup.animate.description=Specifies the animation to be used for the popups. Animation of the popups is controlled by system animation setting("animation-enabled" in trinidad-config) and a skin property for individual popup types(af:menu, af:dailog, af:noteWindow etc). Use "false" to turn animation off for a popup regardless of the system settings. The default value is "default", which implies use the system settings and skin properties.
popup.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
popup.autoCancel.description=Controls how the popup reacts to an unexpected dismissal due to a document reload (full submit action command) or a DOM replacement (included in a PPR target). Acceptable values include: "enabled": the popup will be implicitly canceled due to a dom replacement or document reload. "disabled": the popup will restore visibility after a dom replacement or document reload. 
popup.childCreation.description=Controls when the children are created. Introduces a server-side performance enhancement by postponing construction of the components under the popup until its content is delivered whereby reducing the footprint of server-side state. Acceptable values include: "immediate": Children will always be added to the component tree. "deferred": Children will not be added to the component tree until content delivery is made. 
popup.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
popup.contentDelivery.description=whether the popup content is delivered with the initial page. When contentDelivery is "immediate", the content is inlined into the initial page. If contentDelivery is "lazy", the popup's content will be delivered to the client only after the first request to show that popup. If contentDelivery is "lazyUncached", the popup's content will be delivered fresh each and every time the popup is shown. By default, contentDelivery is lazy, which means the content will not be sent to the client up front, but will be cached once loaded.
popup.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
popup.description=The popup component is an invisible control whose contents will be used in popup windows, such as context menus.
popup.display-label=Popup
popup.eventContext.description= Whether events delivered by the popup and its descendents are delivered in the context of the launch source. What does 'in context' mean? In something like a table, for example, when an event is delivered 'in context' then the data for the row clicked is made 'current' before the event listener is called, so if getRowData() is called on the collectionModel in the event listener it will return the data of the row that triggered the event. In the case of a shared popup you really want the popup to 'act' as if it's been reparented to the launch source when the popup opens. In other words, you want any event from the popup delivered in the context of the launch source so that you can access data available to the launch source. When eventContext is set to 'launcher' both the popupFetch event and events fired from inside the popup are delivered in the context of the launch source. 
popup.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
popup.launcherVar.description=Name of the variable used to reference the launch component on the request, which makes it EL reachable. The launch component refers to the component that launched the popup. This variable is only available during event delivery on the popup or its descendents, outside of event delivery this variable is removed (or reverted back to its previous value). This value is only available when the eventContext is set to 'launcher'. If this value is not set, then the launch component is not made available on the request during event delivery.
popup.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
popup.popupCanceledListener.description=a method reference to a popupCanceledListener method. The PopupCancledEvent is delivered when the popup is unexpectedly dismissed or by invoking the cancel method on the client popup component.
popup.popupFetchListener.description=a method reference to a popupFetchListener method
popup.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
popup.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
progressIndicator.action.description=A reference to an action method sent by the progress component, or the static outcome of an action. This is invoked when the task under progress is complete.
progressIndicator.actionListener.description=A method reference to an action listener. This is invoked after the task in progress is complete.
progressIndicator.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
progressIndicator.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
progressIndicator.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
progressIndicator.description=The progressIndicator component can be used to give users an understanding that there is a back end task in progress.
progressIndicator.display-label=Progress Indicator 
progressIndicator.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
progressIndicator.immediate.description=whether data validation - client-side or server-side - will be skipped when events are generated by this component. When immediate is true, the command's action and ActionListeners, including the default ActionListener provided by the JavaServer Faces implementation, will be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase. Because validation runs during Process Validators (after Apply Request Values, but before Invoke Application), setting immediate to true will skip validation.
progressIndicator.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
progressIndicator.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
progressIndicator.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
progressIndicator.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
progressIndicator.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
progressIndicator.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
progressIndicator.value.description=The data model being used by this progress component. The model should be of type org.apache.myfaces.trinidad.model.BoundedRangeModel.
progressIndicator.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
query.addFieldsButtonAccessKey.description=what accessKey will the component set for the add fields button. Options are: null - No access key will be set for the add fields button. provide access key of your choice 
query.addFieldsButtonText.description=what Text will the component set for the add fields button. Options are: null - default add fields button text will be used. provide text of your choice 
query.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
query.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
query.conjunctionReadOnly.description=whether the conjunction is readOnly or not
query.criterionFeatures.description=Additional criterion attributes that can be configured/set by the user. Currently we support the following two features matchCaseDisplayed - This allows user to set matchCase for a criterion. This option is available only for String data types. requiredDisplayed - This allows user to set whether a criterion is required/selectively required. 
query.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
query.description=The query component provides the user the ability to perform a query, or personalize saved searches.
query.disclosed.description=a boolean value that determines if query component needs to be disclosed or not.
query.display-label=Query
query.displayMode.description=the mode of display for the query component. default: displays all parts of the query component. compact: Similar to 'default' except, in this mode : 	 		The header text will not be rendered and headerText property will always 		be ignored. 	 	 		The component will be rendered undisclosed unless the disclosed property 		is explicitly set to true. 	 	 		The mode button will be rendered in the footer unless the 'modeButtonPosition' 		property is set to 'toolbar'. If the modeChangeVisible' property is set to 		false, it is not rendered at all. 	 	 		The layout of the saved search dropdown will be left aligned on the header. 	 	 		No container or borders will be present around the header or toolbar. 	 	 simple: In this mode the header and footer will not be rendered and the following properties will be ignored - disclosed, headerText, modeButtonPosition, modeChangeVisible. design: Similar to 'simple' and used mostly for designing the Query Descriptor. 
query.fieldWidth.description=the preferred width of the value part of the search field. Usually a percentage, but may be specified as either a percentage or an absolute number of pixels. If the width is not specified, it will default appropriately. If specified as a percentage the sum of labelWidth and fieldWidth should add up to 100%, regardless of the number of columns. If the fieldWidth is specified and is a percentage the labelWidth will be derived appropriately if not specified.
query.headerText.description=the label of the query header.
query.helpTopicId.description=the id used to look up a topic in a helpProvider.
query.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
query.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
query.labelAlignment.description=the alignment of label prompts for a search field (criterion). 'start' places the label before the operator and value fields. 'top' renders the label above the operator and value fields.
query.labelWidth.description=the preferred width of the label. Usually a percentage, but may be specified as either a percentage or an absolute number of pixels. If the width is not specified, it will default appropriately. If specified as a percentage tthe sum of labelWidth and fieldWidth should add up to 100%, regardless of the number of columns. If the labelWidth is specified and is a percentage the fieldWidth will be derived appropriately if not specified.
query.maxColumns.description=the maximum number of columns to show. This property defaults to 3. If the panelForm (containing the search fields) is inside of another panelForm, this will always be 1.
query.modeButtonPosition.description=the location the mode button is displayed. Valid values are footer and toolbar (default).
query.modeChangeVisible.description=the rendering of mode change button. This button is used to switch the modes between basic and advanced. In addition if users choose to toggle between the query and quickQuery components, they can do so by adding a commandButton to the toolbar facet. The actionListener on the commandButton can then be wired to a method on a session scoped managed bean.
query.model.description=a QueryModel object that collectively represents the entire model for the query component. The QueryModel manages QueryDescriptors, iow, supports methods to create, clone (from an existing), delete, reset and update a QueryDescriptor. For details about QueryModel, please refer to the Javadocs for oracle.adf.view.rich.model.QueryModel.
query.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
query.queryListener.description=a method reference to a Querylistener
query.queryOperationListener.description=a method reference to a QueryOperationlistener
query.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
query.resetButtonAccessKey.description=what accessKey will the component set for the reset button. Options are: null - No access key will be set for the reset button. provide access key of your choice 
query.resetButtonText.description=what Text will the component set for the reset button. Options are: null - default reset button text will be used. provide text and access key of your choice 
query.resultComponentId.description=a search expression identifying the results component (usually a table or treeTable) that will display the results of the query. Expressions are relative to this source component and must account for NamingContainers. If the results component is already inside of a naming container, you can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc. Product teams should ensure that this value is set correctly so that the search operation triggers a partial page refresh of the component. Also, the 'Save Results Layout' feature, (applied on the current saved search) uses this value as a UIHint in the model.
query.rows.description=the number of rows after which to start a new column. This attribute defaults to Integer.MAX_VALUE. The number of rows actually rendered depends also on the "maxColumns" property. If the children will not fit in the given number of rows and columns, the number of rows will increase to accommodate the children.
query.saveButtonAccessKey.description=what accessKey will the component set for the save button. Options are: null - No access key will be set for the save button. provide access key of your choice 
query.saveButtonText.description=what Text will the component set for the save button. Options are: null - default save button text will be used. provide text of your choice 
query.saveQueryMode.description=the mode of display and usage for saved searches. default: all saved searches are displayed. In addition any saved search can be created but only user saved searches can be deleted/updated. readOnly: saved searches to be viewed/selected, but not edited hidden: all saved searches are hidden 
query.searchButtonAccessKey.description=what accessKey will the component set for the search button. Options are: null - no access key will be set. provide access key of your choice 
query.searchButtonText.description=what Text will the component set for the search button. Options are: null - default button text will be used. provide text of your choice 
query.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
query.simple.description=the boolean that determines if the header and footer will be rendered. This attribute is deprecated and displayMode=simple should be used instead.
query.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
query.type.description=how the component will handle geometry management. Options are: default - either flow or stretch, depending on the container the query is inside flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children 
query.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
query.value.description=a QueryDescriptor object. This provides information about the currently selected saved search. For details about QueryDescriptor, please refer to oracle.adf.view.rich.model.QueryDescriptor
query.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
quickQuery.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
quickQuery.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
quickQuery.conjunctionReadOnly.description=whether the conjunction is readOnly or not
quickQuery.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
quickQuery.description=The quickQuery component is used to perform a quick search - quick as the search is performed agianst the selected criterion.
quickQuery.display-label=Quick Query 
quickQuery.helpTopicId.description=the id used to look up a topic in a helpProvider. Note that instructions text is not supported on this component, otherwise all helpTopicId functionality is supported.
quickQuery.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
quickQuery.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
quickQuery.label.description=the label of the quickQuery.
quickQuery.layout.description=the type of layout.
quickQuery.model.description=a QueryModel object that collectively represents the entire model for the query component. The QueryModel manages QueryDescriptors, iow, supports methods to create, clone (from an existing), delete, reset and update a QueryDescriptor. For details about QueryModel, please refer to the Javadocs for oracle.adf.view.rich.model.QueryModel.
quickQuery.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
quickQuery.queryListener.description=a method reference to a Querylistener
quickQuery.queryOperationListener.description=a method reference to a QueryOperationlistener
quickQuery.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
quickQuery.searchDesc.description=the search description of the component. This text is displayed as tooltip help text when mousing over the search icon.
quickQuery.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
quickQuery.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
quickQuery.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
quickQuery.value.description=a QueryDescriptor object. This provides information about the currently selected saved search. For details about QueryDescriptor, please refer to oracle.adf.view.rich.model.QueryDescriptor
quickQuery.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
region.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
region.description=The region tag allows dynamic content to be included in a master page.
region.disclosed.description=whether or not to disclose the children
region.disclosureListener.description=a method reference to a disclosure listener
region.display-label=Region
region.helpTopicId.description=the id used to look up a topic in a helpProvider.
region.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
region.immediate.description=whether data validation - client-side or server-side - should be skipped when events are generated by this component. When immediate is false (the default), the disclosure event will be delivered during the Invoke Application phase, which will trigger validation. When set to true, the disclosure event will be executed during the Apply Request Values phase.
region.regionNavigationListener.description=a method reference to a RegionNavigationListener method
region.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
region.value.description=the model for this region.
resetActionListener.display-label=Reset Action Listener 
resetButton.accessKey.description= a character used to gain quick access to this button. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple input fields in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. Note that user agents are inconsistent about dealing with two links having same access key, and so the cycling behavior is dependent on what the user agent provides. This attribute is sometimes referred to as the "mnemonic". The character specified by this attribute must exist in the Text attribute of this button instance. If it does not, the user will receive no visual indication of the existence of the accessKey. The easiest, and most convenient way to specify both the text and the mnemonic together is to use textAndAccessKey. Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
resetButton.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
resetButton.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
resetButton.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
resetButton.description=The reset button control creates a push button which will reset the content of a form for all input and select components.
resetButton.disabled.description=whether the button should be disabled.
resetButton.display-label=Reset Button 
resetButton.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
resetButton.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
resetButton.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
resetButton.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
resetButton.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
resetButton.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
resetButton.text.description=the textual label of the button.
resetButton.textAndAccessKey.description= an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
resetButton.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
resetButton.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
resource.display-label=Resource
returnActionListener.display-label=Return Action Listener 
richTextEditor.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
richTextEditor.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
richTextEditor.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
richTextEditor.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
richTextEditor.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
richTextEditor.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
richTextEditor.columns.description=the width of the text control specified by the approximate number of characters shown.
richTextEditor.contentDelivery.description=whether content should be fetched when the component is rendered initially. When contentDelivery is "immediate", data is fetched and inlined into the component chrome. If contentDelivery is "lazy", content will be fetched and delivered to the client during a subsequent request.
richTextEditor.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
richTextEditor.converter.description=a converter object
richTextEditor.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
richTextEditor.description=An input control for richly formatted text.
richTextEditor.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
richTextEditor.display-label=Rich Text Editor 
richTextEditor.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
richTextEditor.editMode.description=the initial editing mode. Use "wysiwyg" for the what-you-see-is-what-you-get mode. Use "source" for the source code editing mode. The attribute defaults to "wysiwyg" unless the screen reader accessibility mode is enabled--in which case the default is "source". It is very important to note that source mode is not plain text editing. There are no guarantees that this component only records the minimal changes made by the user. This component might change non-meaningful whitespace (new line characters in the source are not preserved), element minimization, element types, order of attributes, or use of character entities.
richTextEditor.helpTopicId.description=the id used to look up a topic in a helpProvider.
richTextEditor.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
richTextEditor.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
richTextEditor.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
richTextEditor.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
richTextEditor.labelAndAccessKey.description= an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
richTextEditor.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
richTextEditor.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
richTextEditor.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
richTextEditor.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
richTextEditor.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
richTextEditor.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
richTextEditor.rows.description=the height of the text control specified by the approximate number of characters shown.
richTextEditor.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
richTextEditor.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
richTextEditor.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
richTextEditor.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
richTextEditor.toolboxLayout.description=Allows control over the layout of the toolbar. The built in strings the component recognizes are: "all" - all the buttons the richTextEditor provides by default - if "all" is in the list, all other built in strings are ignored "font" - The font selection and font size "history" - Undo and Redo "mode" - Rich Text Mode and Source Code Mode "color" - Foreground and Background color "formatAll" - Bold, Italic, Underline, Superscript, Subscript, Strikethrough. If "formatAll" is in the list, "formatCommon" and "formatUncommon" will be ignored. "formatCommon" - Bold, Italic, Underline "formatUncommon" - Superscript, Subscript, Strikethrough "justify" - Left, Center, Right and Full Justify "list" - Bullet and Numbered List "indent" - Outdent and Indent "link" - Add and Remove Link "newline" - put the next thing on a new line "stretch" - adds a stretched component Custom toolbox content: when the richTextEditor encounters a string in toolboxLayout that it doesn't recognize, like 'customToolbarXyz', it looks for a facet of that name and renders the content if it finds it. In the future new facets may be added to the richTextEditor. In order to avoid future name clashes strings starting with the word 'custom' should be used for custom facets. We make no guarantees for other names. The toolboxLayout attribute allows the user to add as many custom toolbars as desired, for example toolboxLayout="customToolbar1 all customToolbar2" stack as many toolbars as desired, for example toolboxLayout="all newline customToolbar newline customGroup" show multiple rows of toolbars. for example toolboxLayout="customToolbar1 newline all" reorder the button groups, for example toolboxLayout="format color mode stretch history font" remove toolbar content that isn't desired, for example the date buttons won't show up with this: toolboxLayout="font mode color format justify" 
richTextEditor.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
richTextEditor.validator.description=a method reference to a validator method
richTextEditor.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
richTextEditor.valueChangeListener.description=a method reference to a value change listener
richTextEditor.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
richTextEditorInsertBehavior.display-label=Rich Text Editor Insert Behavior 
scrollComponentIntoViewBehavior.display-label=Scroll Component Into View Behavior 
selectBooleanCheckbox.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectBooleanCheckbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectBooleanCheckbox.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectBooleanCheckbox.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectBooleanCheckbox.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectBooleanCheckbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectBooleanCheckbox.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectBooleanCheckbox.converter.description=a converter object
selectBooleanCheckbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectBooleanCheckbox.description=A component which allows the end user to select a checkbox.
selectBooleanCheckbox.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectBooleanCheckbox.display-label=Select Boolean Checkbox 
selectBooleanCheckbox.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectBooleanCheckbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectBooleanCheckbox.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectBooleanCheckbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectBooleanCheckbox.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectBooleanCheckbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectBooleanCheckbox.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectBooleanCheckbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectBooleanCheckbox.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectBooleanCheckbox.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectBooleanCheckbox.selected.description=whether or not the component is currently selected. This is a typesafe alias for the "value" attribute.
selectBooleanCheckbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectBooleanCheckbox.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectBooleanCheckbox.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectBooleanCheckbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectBooleanCheckbox.text.description=the text of the checkbox.
selectBooleanCheckbox.textAndAccessKey.description=an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the text to "Text" and the access key to 'e'.
selectBooleanCheckbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectBooleanCheckbox.validator.description=a method reference to a validator method
selectBooleanCheckbox.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectBooleanCheckbox.valueChangeListener.description=a method reference to a value change listener
selectBooleanCheckbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectBooleanRadio.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectBooleanRadio.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectBooleanRadio.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectBooleanRadio.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectBooleanRadio.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectBooleanRadio.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectBooleanRadio.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectBooleanRadio.converter.description=a converter object
selectBooleanRadio.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectBooleanRadio.description=A component which allows the end user to select a radio button in a group of radio buttons. The selectBooleanRadio components are meant to be grouped together with other selectBooleanRadio components to create similar functionality to selectOneRadio. The main reason for using selectBooleanRadio components instead of a selectOneRadio component is that you have more control over the layout of selectBooleanRadios. You should group your selectBooleanRadios together using the 'group' attribute, so when you select one radio in the group, the others will be unselected.
selectBooleanRadio.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectBooleanRadio.display-label=Select Boolean Radio 
selectBooleanRadio.group.description=the "group" the radio buttons will be placed in. Radio buttons in the same group will have mutually exclusive selection, regardless of their physical placement on the page. See selectOneRadio - it groups the radios automatically. The reason you would use selectBooleanRadio instead of selectOneRadio is that you have more control over the placement of each radio. Using a selectBooleanRadio alone is uncommon; in any case, you must set the group attribute.
selectBooleanRadio.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectBooleanRadio.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectBooleanRadio.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectBooleanRadio.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectBooleanRadio.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectBooleanRadio.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectBooleanRadio.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectBooleanRadio.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectBooleanRadio.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectBooleanRadio.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectBooleanRadio.selected.description=whether or not the component is currently selected. This is a typesafe alias for the "value" attribute.
selectBooleanRadio.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectBooleanRadio.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectBooleanRadio.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectBooleanRadio.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectBooleanRadio.text.description=the text of the radio button.
selectBooleanRadio.textAndAccessKey.description=an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the text to "Text" and the access key to 'e'.
selectBooleanRadio.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectBooleanRadio.validator.description=a method reference to a validator method
selectBooleanRadio.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectBooleanRadio.valueChangeListener.description=a method reference to a value change listener
selectBooleanRadio.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectItem.description=The selectItem tag represents a single item that the user may select from a list, choice, radio, or shuttle ADF control.
selectItem.disabled.description=whether the item is disabled. By default, no items are disabled.
selectItem.display-label=Select Item 
selectItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectItem.label.description=the user-visible text of the item
selectItem.longDesc.description=this attribute is deprecated. It is ignored and will be removed in a future release.
selectItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectItem.shortDesc.description=the short description of the option. This text is commonly used by user agents to display advisory information about the option.
selectItem.value.description=the value used to identify this item when the parent control is submitted to the server. If no value is specified for a particular item, the item's contents will be used as its value.
selectManyCheckbox.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectManyCheckbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectManyCheckbox.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectManyCheckbox.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectManyCheckbox.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectManyCheckbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectManyCheckbox.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectManyCheckbox.converter.description=a converter object
selectManyCheckbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectManyCheckbox.description=A component which allows the end user to select multiple valuesfrom a list of available options.
selectManyCheckbox.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectManyCheckbox.display-label=Select Many Checkbox 
selectManyCheckbox.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectManyCheckbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectManyCheckbox.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectManyCheckbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectManyCheckbox.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectManyCheckbox.labelAndAccessKey.description=an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;ext" will set the label to "Text" and the access key to 'e'.
selectManyCheckbox.layout.description=whether the control displays the buttons horizontally or vertically. The default is "vertical".
selectManyCheckbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectManyCheckbox.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectManyCheckbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectManyCheckbox.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectManyCheckbox.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectManyCheckbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectManyCheckbox.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectManyCheckbox.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectManyCheckbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectManyCheckbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectManyCheckbox.validator.description=a method reference to a validator method
selectManyCheckbox.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectManyCheckbox.valueChangeListener.description=a method reference to a value change listener
selectManyCheckbox.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectManyCheckbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectManyChoice.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectManyChoice.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectManyChoice.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectManyChoice.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectManyChoice.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectManyChoice.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectManyChoice.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectManyChoice.converter.description=a converter object
selectManyChoice.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectManyChoice.description=The selectManyChoice component creates a menu-style component, which allows the user to select multiple values from a dropdown list of items.
selectManyChoice.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectManyChoice.display-label=Select Many Choice 
selectManyChoice.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
selectManyChoice.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectManyChoice.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectManyChoice.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectManyChoice.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectManyChoice.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectManyChoice.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectManyChoice.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectManyChoice.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectManyChoice.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectManyChoice.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectManyChoice.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectManyChoice.selectAllVisible.description=whether the select-all option is visible.
selectManyChoice.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectManyChoice.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectManyChoice.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectManyChoice.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectManyChoice.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectManyChoice.validator.description=a method reference to a validator method
selectManyChoice.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectManyChoice.valueChangeListener.description=a method reference to a value change listener
selectManyChoice.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectManyChoice.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectManyListbox.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectManyListbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectManyListbox.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectManyListbox.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectManyListbox.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectManyListbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectManyListbox.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectManyListbox.converter.description=a converter object
selectManyListbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectManyListbox.description=The selectManyListbox component creates a component which allows the user to select multiple values from a list of items.
selectManyListbox.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectManyListbox.display-label=Select Many Listbox 
selectManyListbox.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectManyListbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectManyListbox.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectManyListbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectManyListbox.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectManyListbox.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectManyListbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectManyListbox.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectManyListbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectManyListbox.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectManyListbox.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectManyListbox.selectAllVisible.description=whether the select-all option is visible.
selectManyListbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectManyListbox.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectManyListbox.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectManyListbox.size.description=the number of items that should be visible in the list. The renderer may constrain the maximum and minimum number of items shown.
selectManyListbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectManyListbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectManyListbox.validator.description=a method reference to a validator method
selectManyListbox.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectManyListbox.valueChangeListener.description=a method reference to a value change listener
selectManyListbox.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectManyListbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectManyShuttle.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectManyShuttle.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectManyShuttle.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectManyShuttle.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectManyShuttle.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectManyShuttle.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectManyShuttle.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectManyShuttle.converter.description=a converter object
selectManyShuttle.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectManyShuttle.description=The selectManyShuttle component provides a mechanism for selecting multiple values from a list of values by allowing the user to move items between two lists.
selectManyShuttle.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectManyShuttle.display-label=Select Many Shuttle 
selectManyShuttle.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectManyShuttle.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectManyShuttle.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectManyShuttle.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectManyShuttle.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectManyShuttle.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectManyShuttle.layout.description=this attribute describes the layout of the shuttle. Default value is 'horizontal'.
selectManyShuttle.leadingDescShown.description=whether or not the leading list has an area to display descriptions.
selectManyShuttle.leadingHeader.description=the header of the leading list of the shuttle.
selectManyShuttle.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectManyShuttle.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectManyShuttle.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectManyShuttle.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectManyShuttle.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectManyShuttle.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectManyShuttle.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectManyShuttle.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectManyShuttle.size.description=the display size (number of items) of the lists. The size specified must be between 10 and 20 items. If the attribute is not set or has a value less than 10, the size would have a default or minimum value of 10. If the attribute value specified is more than 20 items, the size would have the maximum value of 20.
selectManyShuttle.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectManyShuttle.trailingDescShown.description=whether or not the trailing list has an area to display descriptions.
selectManyShuttle.trailingHeader.description=the header of the trailing list of the shuttle.
selectManyShuttle.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectManyShuttle.validator.description=a method reference to a validator method
selectManyShuttle.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectManyShuttle.valueChangeListener.description=a method reference to a value change listener
selectManyShuttle.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectManyShuttle.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectOneChoice.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectOneChoice.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectOneChoice.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectOneChoice.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectOneChoice.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectOneChoice.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectOneChoice.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectOneChoice.converter.description=a converter object
selectOneChoice.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectOneChoice.description=The selectOneChoice component creates a menu-style component, which allows the user to select a single value from a list of items.
selectOneChoice.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectOneChoice.display-label=Select One Choice 
selectOneChoice.editable.description=the editable look and feel to use for input components. 'always' indicates that the input component should always look editable. 'onAccess' indicates that the input will only look editable when accessed (hover, focus). 'inherit' indicates that we want to use the component parent's setting. None of the ancestor components define 'always' or 'onAccess', then 'always' will be used.
selectOneChoice.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectOneChoice.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectOneChoice.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectOneChoice.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectOneChoice.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectOneChoice.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectOneChoice.mode.description=the mode of the component. When set to "compact", the selected value box is hidden, the drop down icon changes to smaller one, and the component can never be disabled. If compact and disabled are both true, the component is hidden.
selectOneChoice.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectOneChoice.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectOneChoice.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectOneChoice.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectOneChoice.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectOneChoice.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectOneChoice.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectOneChoice.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectOneChoice.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectOneChoice.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectOneChoice.unselectedLabel.description=The label for the option that represents a value of null, meaning nothing is selected. If unselectedLabel is not set and if the component does not have a selected value, then an option with an empty string as the label and value is rendered as the first option in the choice box (if there isn't an empty option already defined). Once an option has been successfully selected, and if unselectedLabel is not set, then the empty option will not be rendered.
selectOneChoice.validator.description=a method reference to a validator method
selectOneChoice.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectOneChoice.valueChangeListener.description=a method reference to a value change listener
selectOneChoice.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectOneChoice.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectOneListbox.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectOneListbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectOneListbox.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectOneListbox.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectOneListbox.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectOneListbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectOneListbox.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectOneListbox.converter.description=a converter object
selectOneListbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectOneListbox.description=The selectOneListbox component creates a component which allows the user to select a single value from a list of items.
selectOneListbox.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectOneListbox.display-label=Select One Listbox 
selectOneListbox.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectOneListbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectOneListbox.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectOneListbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectOneListbox.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectOneListbox.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectOneListbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectOneListbox.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectOneListbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectOneListbox.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectOneListbox.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectOneListbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectOneListbox.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectOneListbox.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectOneListbox.size.description=the number of items that should be visible in the list. The renderer may constrain the maximum and minimum number of items shown.
selectOneListbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectOneListbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectOneListbox.unselectedLabel.description=the label for an additional item that indicates no selection has been made. When the user selects this item, "required" validation will not pass, or a null value will be set if the component is not "required".
selectOneListbox.validator.description=a method reference to a validator method
selectOneListbox.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectOneListbox.valueChangeListener.description=a method reference to a value change listener
selectOneListbox.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectOneListbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectOneRadio.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectOneRadio.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectOneRadio.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectOneRadio.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectOneRadio.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectOneRadio.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectOneRadio.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectOneRadio.converter.description=a converter object
selectOneRadio.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectOneRadio.description=A component which allows the end user to select a single value from a list of available options.
selectOneRadio.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectOneRadio.display-label=Select One Radio 
selectOneRadio.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectOneRadio.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectOneRadio.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectOneRadio.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectOneRadio.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectOneRadio.labelAndAccessKey.description=an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation.For example, setting this attribute to "T&amp;ext" willset the text to "Text" and the access key to 'e'.
selectOneRadio.layout.description=whether the buttons display horizontally or vertically. The default is "vertical".
selectOneRadio.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectOneRadio.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectOneRadio.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectOneRadio.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectOneRadio.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectOneRadio.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectOneRadio.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectOneRadio.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectOneRadio.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectOneRadio.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectOneRadio.unselectedLabel.description=the label for an additional item that indicates no selection has been made. When the user selects this item, "required" validation will not pass, or a null value will be set if the component is not "required".
selectOneRadio.validator.description=a method reference to a validator method
selectOneRadio.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectOneRadio.valueChangeListener.description=a method reference to a value change listener
selectOneRadio.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectOneRadio.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
selectOrderShuttle.accessKey.description= a character used to gain quick access to the form element specified by the for, if set (or this component itself, if it is a "non-simple" form element). For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
selectOrderShuttle.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
selectOrderShuttle.autoSubmit.description=an attribute which if set to TRUE on a form element, the component will automatically submit when an appropriate action takes place (a click, text change, etc.). Since autoSubmit is a partial submit, also submitted and re-rendered are any other components with partialTriggers pointing to this component.
selectOrderShuttle.changed.description=an attribute which if set to true, the changed indicator icon will be displayed on the component. This value defaults to false.
selectOrderShuttle.changedDesc.description=the text commonly used by user agents to display tooltip text on the changed indicator icon. Default value is "Changed". The behavior of the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
selectOrderShuttle.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
selectOrderShuttle.contentStyle.description=the style of the content piece of the component. You can style width by setting this attribute like this: width: 100px.
selectOrderShuttle.converter.description=a converter object
selectOrderShuttle.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
selectOrderShuttle.description=The selectOrderShuttle component provides a mechanism for selecting multiple values from a list of values by allowing the user to move items between two lists, and reordering that list of values.
selectOrderShuttle.disabled.description=whether the element is disabled. Unlike a readonly component, a disabled component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to be able to scroll through the component's text or values, use the 'readOnly' attribute, not the 'disabled' attribute.
selectOrderShuttle.display-label=Select Order Shuttle 
selectOrderShuttle.helpTopicId.description=the id used to look up a topic in a helpProvider.
selectOrderShuttle.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
selectOrderShuttle.immediate.description=whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default. By default, values are converted and validated together in the Process Validators phase. However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
selectOrderShuttle.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
selectOrderShuttle.label.description=the label of the component. If you want the label to appear above the control, use a panelFormLayout.
selectOrderShuttle.labelAndAccessKey.description= an attribute that will simultaneously set both the "value" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "L&amp;amp;abel" will set the label to "Label" and the access key to 'a'. 
selectOrderShuttle.layout.description=this attribute describes the layout of the shuttle. Default value is 'horizontal'.
selectOrderShuttle.leadingDescShown.description=whether or not the leading list has an area to display descriptions.
selectOrderShuttle.leadingHeader.description=the header of the leading list of the shuttle.
selectOrderShuttle.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
selectOrderShuttle.readOnly.description=whether the control is displayed as an editable field or as an output-style text control. Unlike a disabled component, a readonly component is able to receive focus.
selectOrderShuttle.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
selectOrderShuttle.reorderOnly.description=whether the shuttle is in "reorder only" mode, where the user can reorder the list of values, but cannot add or remove them.
selectOrderShuttle.required.description=whether a non-null, non-empty value must be entered. If false, validators will not be executed when the value is null or empty.
selectOrderShuttle.requiredMessageDetail.description= the message to be displayed, if 'required' validation fails. Parameters: {0} the label that identifies the component 
selectOrderShuttle.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
selectOrderShuttle.showRequired.description=whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the "showRequired" attribute must be false for the visual indication not to be displayed. An example of when it can be desirable to use the showRequired property is if you have a field that is initially empty and is required only if some other field on the page is touched.
selectOrderShuttle.simple.description=a boolean value that controls whether the component provides label support; when set to "true", the component will not display the label (these may be ignored: label, labelAndAccessKey, accessKey, showRequired, help facet) and may use simpler layout primitives. One of the usecases can be when the component is used in repeatable elements like in table, for-each etc., where label is not required.
selectOrderShuttle.size.description=the display size (number of items) of the lists. The size specified must be between 10 and 20 items. If the attribute is not set or has a value less than 10, the size would have a default or minimum value of 10. If the attribute value specified is more than 20 items, the size would have the maximum value of 20.
selectOrderShuttle.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
selectOrderShuttle.trailingDescShown.description=whether or not the trailing list has an area to display descriptions.
selectOrderShuttle.trailingHeader.description=the header of the trailing list of the shuttle.
selectOrderShuttle.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
selectOrderShuttle.validator.description=a method reference to a validator method
selectOrderShuttle.value.description=the value of the component. If the EL binding for the "value" points to a bean property with a getter but no setter, and this is an editable component, the component will be rendered in read-only mode.
selectOrderShuttle.valueChangeListener.description=a method reference to a value change listener
selectOrderShuttle.valuePassThru.description=whether or not the values are passed through to the client. When valuePassThru is false the value and the options' values are converted to indexes before being sent to the client. Therefore, when valuePassThru is false, there is no need to write your own converter when you are using custom Objects as your values and/or options. If you need to know the actual values on the client-side, then you can set valuePassThru to true. This will pass the values through to the client, using your custom converter if it is available; a custom converter is needed if you are using custom objects. For drag and drop it is recommended to set valuePassThru to true for both the drag source and drop target since values are usually required on the client for drag and drop operations. The default is false.
selectOrderShuttle.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
separator.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
separator.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
separator.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
separator.description=The seperator is used anywhere to create a horizontal separator between items.
separator.display-label=Separator
separator.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
separator.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
separator.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
separator.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
separator.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
separator.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
separator.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
separator.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
serverListener.display-label=Server Listener 
setActionListener.display-label=Set Action Listener 
setPropertyListener.display-label=Set Property Listener 
showDetail.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
showDetail.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
showDetail.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
showDetail.description=The showDetail provides a means of toggling a group of components between being hidden or shown. If the "prompt" facet is present, the component in the facet will be put next to the disclosure icon. If the prompt facet is not present but either the disclosedText or the undisclosedText attributes are set, then the text in that attribute will be displayed next to the disclosure icon. If the prompt facet is not set but both the disclosedText and undisclosedText attributes are set then the disclosedText will be displayed when disclosed="true" and undisclosedText will be displayed when disclosed="false". If the prompt facet is not set and neither the disclosedText or undisclosedText attributes are set, then the label will default to "Hide" for the disclosed text and "Show" for the undisclosed text. For the purposes of EL, setting disclosedText or undisclosedText to null is the same as not setting the value.
showDetail.disclosed.description=whether or not to disclose the children
showDetail.disclosedText.description=the text to display when the children are disclosed. If this attribute is set and the undisclosedText attribute is not set, this text will be displayed for both the disclosed state AND the undisclosed state.
showDetail.disclosedTransient.description=stops the local value of disclosed from being set by renderers. This allows the value to always be taken from the value of the disclosed value expression. Disclosed values must be updated in other ways (i.e. from a disclosure listener)
showDetail.disclosureListener.description=a method reference to a disclosure listener
showDetail.display-label=Show Detail 
showDetail.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
showDetail.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
showDetail.immediate.description=whether data validation - client-side or server-side - should be skipped when events are generated by this component. When immediate is false (the default), the disclosure event will be delivered during the Invoke Application phase, which will trigger validation. When set to true, the disclosure event will be executed during the Apply Request Values phase.
showDetail.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
showDetail.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
showDetail.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
showDetail.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
showDetail.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
showDetail.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
showDetail.undisclosedText.description=the text to display when the children are undisclosed. If this attribute is set and the disclosedText attribute is not set, this text will be displayed for both the disclosed state AND the undisclosed state.
showDetail.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
showDetail.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
showDetailHeader.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
showDetailHeader.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
showDetailHeader.contentStyle.description=the inline style of the content region.
showDetailHeader.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
showDetailHeader.description=The showDetailHeader provides a means of toggling the contents under a header between being disclosed(shown) or undisclosed(hidden).
showDetailHeader.disclosed.description=whether or not to disclose the children
showDetailHeader.disclosedTransient.description=stops the local value of disclosed from being set by renderers. This allows the value to always be taken from the value of the disclosed value expression. Disclosed values must be updated in other ways (i.e. from a disclosure listener)
showDetailHeader.disclosureListener.description=a method reference to a disclosure listener
showDetailHeader.display-label=Show Detail Header 
showDetailHeader.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
showDetailHeader.helpTopicId.description=the id used to look up a topic in a helpProvider.
showDetailHeader.helpType.description=Along with the help facet this is deprecated, helpTopicId should be used for providing help. Controls if the help is displayed inline or as a link to a popup.
showDetailHeader.icon.description= the URI of an image to be displayed in the header. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
showDetailHeader.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
showDetailHeader.immediate.description=whether data validation - client-side or server-side - should be skipped when events are generated by this component. When immediate is false (the default), the disclosure event will be delivered during the Invoke Application phase, which will trigger validation. When set to true, the disclosure event will be executed during the Apply Request Values phase.
showDetailHeader.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
showDetailHeader.messageType.description=whether an error, info, confirmation, or warning header is needed.
showDetailHeader.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
showDetailHeader.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
showDetailHeader.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
showDetailHeader.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
showDetailHeader.size.description=the size of this header. The largest is 0 and corresponds to an H1 header the smallest is 5 and corresponds to an H6 Header. Note that this version of the tag will display all sizes above 2 the same as size 2. Setting the size to a negative number will allow the header to be calculated according to its parent header. The default value for this property is -1.
showDetailHeader.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
showDetailHeader.text.description=the label of the header.
showDetailHeader.type.description=how the component will handle geometry management. Options are: default - either flow or stretch, depending on the container the panelBox is inside flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children 
showDetailHeader.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
showDetailHeader.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
showDetailItem.accessKey.description=a character used to gain quick access to this showDetailItem. For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. This attribute is sometimes referred to as the "mnemonic". Note that the accessKey is triggered by browser-specific and platform-specific modifier keys. It even has browser-specific meaning. For example, Internet Explorer 7.0 will set focus when you press Alt+&lt;accessKey&gt;. Firefox 2.0 on some operating systems you press Alt+Shift+&lt;accessKey&gt;. Firefox 2.0 on other operating systems you press Control+&lt;accessKey&gt;. Refer to your browser's documentation for how it treats accessKey. 
showDetailItem.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
showDetailItem.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
showDetailItem.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
showDetailItem.description=The showDetailItem represents a single item with specific contents that can be selected by users to be shown in a panelAccordion or panelTabbed component.
showDetailItem.disabled.description=a boolean which if the value is "true", the component becomes non-interactive. Otherwise,the default value is "false" and component assumes its expected behavior.
showDetailItem.disclosed.description=whether or not to disclose the children
showDetailItem.disclosedTransient.description=stops the local value of disclosed from being set by renderers. This allows the value to always be taken from the value of the disclosed value expression. Disclosed values must be updated in other ways (i.e. from a disclosure listener)
showDetailItem.disclosureListener.description=a method reference to a disclosure listener
showDetailItem.display-label=Show Detail Item 
showDetailItem.displayIndex.description=When placed inside of a component that supports reordering, this attribute is used to determine the index that the child should be displayed in. It will be updated when the component is reordered in the parent. A display index of -1 (default) means that items will appear at the end, in the order they appear in the component tree. All values at 0 or above appear before the -1 values in ascending order.
showDetailItem.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
showDetailItem.flex.description= a non-negative integer that indicates the flexibility of this component in its container. If the container supports it, flex is used to determine how space is distributed among its children. Components with larger flex values will be made larger than components with lower flex values. This is done so at the ratio determined by the flex of each of the two components. The actual value is only relevant if there are other flexible components (components with flex values larger than zero) within the same container. This attribute is only applicable when used with the panelAccordion. 
showDetailItem.icon.description=the URI of an image to be displayed with the showDetailItem. This attribute supports these various types of URIs: absolute - an absolute path to the image, like "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif" relative - a path located relatively to the source page, like "bullet.jpg" context relative - a path relatively based on the web application's context root, like "/images/error.png" server relative - a path relatively based on the web server by application name, like "//adf-richclient-demo-context-root/images/error.png" As icon does not allow alternative text to be provided for the image, in order to create an accessible product icon must only be used when its use is purely decorative. 
showDetailItem.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
showDetailItem.immediate.description=whether data validation - client-side or server-side - should be skipped when events are generated by this component. When immediate is false (the default), the disclosure event will be delivered during the Invoke Application phase, which will trigger validation. When set to true, the disclosure event will be executed during the Apply Request Values phase.
showDetailItem.inflexibleHeight.description= the number of pixels that the item will use when in a container that allocates size among multiple sibling items. If this item has flex="0", this is the size that will be used and the remaining space will be dispersed among the non-zero flex items. If this item cannot fit within its container using this number of pixels, other nearby items may be pushed out into overflow menus. This attribute is only applicable when used with the panelAccordion. 
showDetailItem.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
showDetailItem.itemListener.description=a method reference to an item listener
showDetailItem.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
showDetailItem.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
showDetailItem.remove.description=sets the remove ability of the showDetailItem. The default value of "inherit" means that the item inherits its remove ability from its parent container. A value of "no" means that when in a container that supports item removal, this item is not allowed to be removed. A value of "disabled" means that when in a container that supports item removal, this item is not allowed to be removed and it should have a disabled remove indicator. Currently, only panelTabbed supports item removal of child showDetailItems.
showDetailItem.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
showDetailItem.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
showDetailItem.stretchChildren.description=The stretching behavior for children. Acceptable values include: "none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched) "first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched) 
showDetailItem.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
showDetailItem.text.description=the textual label of the showDetailItem.
showDetailItem.textAndAccessKey.description=an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand ('&amp;') notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'. 
showDetailItem.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
showDetailItem.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
showPopupBehavior.display-label=Show Popup Behavior 
showPrintablePageBehavior.display-label=Show Printable Page Behavior 
skipLinkTarget.display-label=Skip Link Target 
spacer.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
spacer.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
spacer.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
spacer.description=Used anywhere to add spacing between items. Note that some browsers give page containers a minimum height equal to the line height of the font for that container rather than the height of the container's content. In some cases your container may have only a spacer in it. In that case, you may notice more height is allocated than the height you set for your spacer. To make that container use the height you desire, you may specify a line-height style on your container with a pixel value equal to your desired height.
spacer.display-label=Spacer
spacer.height.description=the height value assigned to the spacer. The value entered is directly applied to the underlying HTML IMG tag's height attribute. The value can be a pixel or percentage value. A percentage value should be entered as a number folowed by the "%" symbol. A number will be interpreted as a pixel value (as will a number followed by the text "px").
spacer.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
spacer.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
spacer.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
spacer.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
spacer.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
spacer.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
spacer.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
spacer.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
spacer.width.description=the width value assigned to the spacer. The value entered is directly applied to the underlying HTML IMG tag's width attribute. The value can be a pixel or percentage value. A percentage value should be entered as a number folowed by the "%" symbol. A number will be interpreted as a pixel value (as will a number followed by the text "px").
statusIndicator.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
statusIndicator.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
statusIndicator.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
statusIndicator.description=Used to display a busy/idle status indicator that displays the status of ppr activity.
statusIndicator.display-label=Status Indicator 
statusIndicator.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
statusIndicator.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
statusIndicator.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
statusIndicator.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
statusIndicator.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
statusIndicator.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
statusIndicator.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
statusIndicator.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
subform.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
subform.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
subform.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
subform.default.description=whether the subform should assume it has been submitted. When set to "true", "submitted" will be considered true if no other subform has been submitted.
subform.defaultCommand.description=the client id of the command component inside the subform whose action should be invoked by default, when the enter key is pressed with focus inside the subform. This attribute overrides the defaultCommand set on form. Identifiers are relative to the subform component, and must account for NamingContainers. You can use a single colon to start the search from the root, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container and begin the search from there, ":::" will pop out of two naming containers and begin the search from there, etc.
subform.description=The subform tag represents an independently submittable region of a page. The contents of a subform will only be validated (or otherwise processed) if a component inside of the subform is responsible for submitting the page.
subform.display-label=Subform
subform.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
subform.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
switcher.display-label=Switcher
table.activeRowKey.description=this is the row that is currently active on the client. In click-to-edit mode, the active row will be made editable and is brought into view (if not already visible). Upon initial display, the click-to-edit component defaults the active row to the first visible row.
table.allDetailsEnabled.description=whether or not to enable the show/hide all links above the table, which allow the user to show/hide all the detail rows. To enable the detail rows, a "detailStamp" facet must be set on this Table. This attribute existed in 10.1.3, but is currently not supported in RichTable
table.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
table.autoHeightRows.description=The number of rows used to size the component height. The default value is -1 (no auto-sizing for any number of rows). The height of the component can grow to a maximum of 'autoHeightRows' after which a scrollbar is displayed. This attribute is also supported when the component is inside PanelCollection. A value of 0 can be used to default the autoHeightRows to the current fetchSize. 'autoHeightRows' value cannot be larger than "fetchSize" attribute. If a value larger than fetchSize is specified, the value is capped at the fetchSize. If a value larger than the number of rows is specified, the number of rows in the component is used to size the component height. 'autoHeightRows' works with contentDelivery=immediate/lazy/whenAvailable. 'autoHeightRows' attribute has no effect in screen reader mode. Note that specifying a CSS "height" in the "inlineStyle" attribute will have no effect and will get overriden by the auto-sized height. Specifying CSS "min-height" and "max-height" values in the "inlineStyle" attribute is not recommended and is incompatible with the autoHeightRows attribute. When the component is placed in a layout-managing container, such as panelSplitter, it will be sized by the container (no auto-sizing will occur). 
table.bodyContextMenuId.description=A search expression to identify the popup component containing the context menu that will be shown within the table body, for clicks outside of any table row. Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components). You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
table.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
table.columnBandingInterval.description=the interval between which the column banding occurs. This value controls the display of the column banding in the table. For e.g, columnBandingInterval=1 would display alternately banded columns in the Grid.
table.columnResizing.description=Setting this value to "disabled" will turn off user column resizing. The default is "enabled".
table.columnSelection.description=whether columns in this table are selectable.
table.columnSelectionListener.description=a method reference to a ColumnSelectionListener
table.columnStretching.description=Indicates what kind of stretching you want applied to the columns. For optimal performance, use the "none" (default) option. If you want the last column to stretch to fill up any unused space inside of the viewport, use the "last" option. If you want to have an empty blank column be automatically inserted and have it stretch (so the row background colors will span the entire width of the table), use the "blank" option. If you want to have a specific leaf (non-group) column stretch to fill up any unused space inside of the viewport, use the option where you specify "column:" followed by the ID of the column that you want to have stretched, e.g. "column:myColId". If you want more than one column stretched, use the "multiple" option. When the "multiple" option is used you can set the widths in the columns (non-group) to be percentages. See the column documentation for how percentages are handled. Note that row headers and frozen columns will not be stretched because doing so could easily leave the user unable to access the scrollable data body of the table.
table.contentDelivery.description=whether data should be fetched when the component is rendered initially. When contentDelivery is "immediate", data is fetched and inlined into the component chrome. If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request. If contentDelivery is set to "whenAvailable", upon initial rendering, the renderer queries the model for available data. Data is fetched and rendered immediately if model indicates that data is available. So contentDelivery="whenAvailable" behaves like "immediate" if data is available upon initial rendering.
table.contextMenuId.description=A search expression to identify the popup component containing the context menu that will be shown on right click of any table row. Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components). You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
table.contextMenuSelect.description=Indicates if we should actually select the row clicked when right clicking to show a context menu. By default the row is selected before the context menu is displayed. However if contextMenuSelect="false", and if user right clicks a row, the new row is highlighted and the highlighting for the currently selected row(s) is cleared when the context menus is displayed. The highlighting of the currently selected row(s) is restored after the context menu is dismissed. It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected row(s). The highlighted row key is established as a currency in the table when the action for context menu item is executed. The currency in the table can be retrieved by calling "table.getRowKey()".
table.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
table.description=The Table is used to display tabular data. It also supports selection (both single and multiple), sorting, and record navigation.
table.disableColumnReordering.description=whether column reordering is disabled in the table. Column reordering is on by default.
table.disclosedRowKeys.description=the set of disclosed rows for this component. Each entry in the set is a rowKey.
table.display-label=Table
table.displayRow.description=the row to display in the table during intial display. The possible values are "first" to display the first row, "last" to display the last row and "selected" to display the first selected row in the table. The default value for this is null which means that the first row is displayed. Please note that this API will have no effect if the total number of rows are not known from the table model (model.getRowCount()==-1).
table.displayRowKey.description=the rowkey to display in the table during intial display. Specifying this attribute will override the displayRow attribute. Please note that this API will have no effect if the total number of rows are not known from the table model (model.getRowCount()==-1).
table.dontPersist.description=a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
table.editingMode.description=Indicates the mode used to edit the table when it contains editable components. The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area. In "clickToEdit" mode a single row is editable at a time. The following is the behavior: Stay in edit mode: If in edit mode, stay in edit mode when a read/only cell is reached via keyboard navigation. Enter key navigation: When in edit mode, ensure that pressing Enter or Shift+Enter navigates to the adjacent cell when possible. Esc key reverts cell edits: When in edit mode, pressing the Esc key reverts all edits made to cells in a row and disables edit mode. (NEW) Navigation pattern recognition: Using the Tab and Enter keys to navigate in edit mode establishes a row-wise navigation pattern that is repeated in adjacent rows. Input Field Text Selection: When a cell contains an input text field widget, the text is selected automatically when the widget has focus. Arrow Key Navigation: When in edit mode, pressing the arrow key allows the user to navigate from cell to cell in the same row or between rows. 
table.emptyText.description=the text of an empty table. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component. If it is not enclosed in an open and closing html tag, it will not be formatted.
table.fetchSize.description=the number of rows in the data fetch block
table.filterModel.description=the model used for filtering of data in the table. This attribute must be bound to an instance of FilterableQueryDescriptor class.
table.filterVisible.description=whether the filter fields are displayed on the top of the table.
table.first.description=the index of the first row in the currently range of rows. This index is zero-based. This attribute is used to control which range of rows to display to the user.
table.horizontalGridVisible.description=whether the Horizontal GridLines are to be drawn.
table.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
table.immediate.description=whether or not data validation - client-side or server-side - should take place when events are generated by this component. When immediate is true, the default ActionListener provided by the JavaServer Faces implementation should be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase.
table.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
table.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
table.persist.description=a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
table.queryListener.description=a method reference to a Querylistener
table.rangeChangeListener.description=a method reference to a rangeChange listener that will be called when a new range is selected.
table.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
table.rowBandingInterval.description=the interval between which the row banding occurs. This value controls the display of the row banding in the table. For e.g, rowBandingInterval=1 would display alternately banded rows in the Grid.
table.rowDisclosureListener.description=a method reference to an ExpansionListener
table.rowSelection.description=whether rows in this table are selectable.
table.rows.description=the maximum number of rows to display in a single range of rows. Some ranges might have fewer than the number of rows specified by this attribute (eg: the last range might have an insufficient number of rows). To display all rows at once, set this attribute to 0. The default is 25.
table.selectedRowKeys.description=the selection state for this component.
table.selectionListener.description=a method reference to a selection listener
table.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
table.sortListener.description=a method reference to a sort listener
table.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
table.summary.description=the summary of this table's purpose and structure for user agents rendering to non-visual media.
table.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
table.value.description=the data model being used by this component. The specific model class is org.apache.myfaces.trinidad.model.CollectionModel. You may also use other model instances, e.g., java.util.List , array, and javax.faces.model.DataModel. This component will automatically convert the instance into a CollectionModel.
table.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
table.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
table.verticalGridVisible.description=whether the vertical GridLines are to be drawn.
table.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
table.width.description=the width of this component. Default value is 300 PX
toolbar.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
toolbar.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
toolbar.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
toolbar.description=A toolbar that usually contains commandToolbarButtons.
toolbar.display-label=Toolbar
toolbar.flex.description=a non-negative integer that indicates the flexibility of this component in its container. If the container supports it (the toolbox component), flex is used to determine how space is distributed among its children. Components with larger flex values will be made larger than components with lower flex values. This is done so at the ratio determined by the flex of each of the two components. The actual value is only relevant if there are other flexible components (components with flex values larger than zero) within the same container. Components that specify a stretchId should specify a flex value as well.
toolbar.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
toolbar.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
toolbar.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
toolbar.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
toolbar.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
toolbar.stretchId.description=the id of a child component that will be given all of the available space left in the toolbar if the contents of the toolbar do not use all of the space that the toolbar has available. A toolbar that specifies a stretchId should specify a flex value as well.
toolbar.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
toolbar.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
toolbar.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
toolbox.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
toolbox.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
toolbox.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
toolbox.description=A container for Toolbars and MenuBars, with built-in functionality like overflow and reordering.
toolbox.display-label=Toolbox
toolbox.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
toolbox.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
toolbox.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
toolbox.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
toolbox.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
toolbox.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
toolbox.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
toolbox.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
train.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
train.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
train.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
train.description=The train component indicates the location of the current page within a multi-step process. Each step is represented as a train stop.
train.display-label=Train
train.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
train.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
train.layout.description=whether to layout the stops in a train horizontally or vertically. Default is horizontal.
train.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
train.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
train.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
train.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
train.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
train.value.description=the hierarchy of data - must be of type org.apache.myfaces.trinidad.model.MenuModel
train.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
train.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
train.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
trainButtonBar.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
trainButtonBar.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
trainButtonBar.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
trainButtonBar.description=The trainButtonBar component is a collection of buttons that provides an additional means to navigate the stops in a train.
trainButtonBar.display-label=Train Button Bar 
trainButtonBar.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
trainButtonBar.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
trainButtonBar.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
trainButtonBar.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
trainButtonBar.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
trainButtonBar.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
trainButtonBar.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
trainButtonBar.value.description=the hierarchy of data - must be of type org.apache.myfaces.trinidad.model.MenuModel
trainButtonBar.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
trainButtonBar.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
trainButtonBar.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
tree.activeRowKey.description=this is the row that is currently active on the client. In click-to-edit mode, the active row will be made editable and is brought into view (if not already visible). Upon initial display, the click-to-edit component defaults the active row to the first visible row.
tree.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
tree.autoHeightRows.description=The number of rows used to size the tree height. The default value is -1 (no auto-sizing for any number of rows). In a flow layout, specifying the 'autoHeightRows' attribute causes the height of the tree to shrink/grow as nodes are expanded/collapsed in the UI. The height will grow to a maximum of 'autoHeightRows' after which a scrollbar is shown. This attribute is also supported when the component is inside PanelCollection. A value of 0 can be used to default the autoHeightRows to the current fetchSize. autoHeightRows value cannot be larger than "fetchSize" attribute. If a value larger than fetchSize is specified, the value is capped at the fetchSize. If a value larger than the number of rows is specified, the number of rows in the component is used to size the component height. autoHeightRows works with contentDelivery=immediate/lazy/whenAvailable. autoHeightRows attribute has no effect in screen reader mode. Note that specifying a CSS "height" in the "inlineStyle" attribute will have no effect and will get overriden by the auto-sized height. Specifying CSS "min-height" and "max-height" values in the "inlineStyle" attribute is not recommended and is incompatible with the autoHeightRows attribute. When the component is placed in a layout-managing container, such as panelSplitter, it will be sized by the container (no auto-sizing will occur).
tree.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
tree.contentDelivery.description=whether data should be fetched when the component is rendered initially. When contentDelivery is "immediate", data is fetched and inlined into the component chrome. If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request. If contentDelivery is set to "whenAvailable", upon initial rendering, the renderer queries the model for available data. Data is fetched and rendered immediately if model indicates that data is available. So contentDelivery="whenAvailable" behaves like "immediate" if data is available upon initial rendering.
tree.contextMenuId.description=A search expression to identify the popup component containing the context menu that will be shown within the tree body. Expressions are relative to this tree component and must account for NamingContainers (for example, tree and panelCollection are NamingContainer components). You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of one NamingContainer (including component itself if it is a NamingContainer) and begin search from there, ":::" will pop out of two NamingContainers, etc.
tree.contextMenuSelect.description=Indicates if we should actually select the node clicked when right clicking to show a context menu. By default the node is selected before the context menu is displayed. However if contextMenuSelect="false", and if user right clicks a node, the new node is highlighted and the highlighting for the currently selected node(s) is cleared when the context menus is displayed. The highlighting of the currently selected nodes(s) is restored after the context menu is dismissed. It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected node(s). The highlighted row key is established as a currency in the tree when the action for context menu item is executed. The currency in the tree can be retrieved by calling "tree.getRowKey()".
tree.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
tree.description=Represents an interactive tree component.
tree.disclosedRowKeys.description=the set of disclosed rows for this component. Each entry in the set is a rowKey.
tree.display-label=Tree
tree.displayRow.description=the row to display in the tree during intial display. The possible values are "first" to display the first row, "last" to display the last row and "selected" to display the first selected row in the tree. The default value for this is null which means that the first row is displayed.
tree.displayRowKey.description=the rowkey to display in the tree during intial display. Specifying this attribute will override the displayRow attribute.
tree.editingMode.description=Indicates the mode used to edit the tree when it contains editable components. The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area. In "clickToEdit" mode a single node is editable at a time. In "clickToEdit" mode a single row editable at a time. The following is the behavior: Stay in edit mode: If in edit mode, stay in edit mode when a read/only cell is reached via keyboard navigation. Enter key navigation: When in edit mode, ensure that pressing Enter or Shift+Enter navigates to the adjacent node when possible. Esc key reverts cell edits: When in edit mode, pressing the Esc key reverts all edits made to cells in a node and disables edit mode. Input Field Text Selection: When a cell contains an input text field widget, the text is selected automatically when the widget has focus. 
tree.emptyText.description=the text of an empty tree. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component. If it is not enclosed in an open and closing html tag, it will not be formatted.
tree.expandAllEnabled.description=Indicates whether the "Expand/Collapse All", and "Expand/Collapse All Below" menu items are rendered. These menu items are rendered by default.
tree.fetchSize.description=the number of rows in the data fetch block
tree.focusListener.description=a method reference to a focus listener
tree.focusRowKey.description=the rowKey of the currently focused row. The rowKeys of the ancestor rows of the focus row are added to the expandedRowKeys RowKeySet by default.
tree.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
tree.immediate.description=whether or not data validation - client-side or server-side - should take place when events are generated by this component. When immediate is true, the default ActionListener provided by the JavaServer Faces implementation should be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase.
tree.initiallyExpanded.description=If upon initial rendering, the current subtree under the focused row path should be expanded. A RowDisclosureEvent is broadcast from the encode begin of the component so that listeners are properly notified of the disclosure.
tree.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
tree.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
tree.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
tree.rowDisclosureListener.description=a method reference to an ExpansionListener
tree.rowSelection.description=whether rows in this table are selectable.
tree.selectedRowKeys.description=the selection state for this component.
tree.selectionListener.description=a method reference to a selection listener
tree.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
tree.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
tree.summary.description=the summary of this tree's purpose and structure for user agents rendering to non-visual media.
tree.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
tree.value.description=the hierarchy of tree data - must be of type org.apache.myfaces.trinidad.model.TreeModel
tree.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
tree.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
tree.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
treeTable.activeRowKey.description=this is the row that is currently active on the client. In click-to-edit mode, the active row will be made editable and is brought into view (if not already visible). Upon initial display, the click-to-edit component defaults the active row to the first visible row.
treeTable.attributeChangeListener.description=a method reference to an attribute change listener. Attribute change events are not delivered for any programmatic change to a property. They are only delivered when a renderer changes a property without the application's specific request. An example of an attribute change events might include the width of a column that supported client-side resizing.
treeTable.autoHeightRows.description=The number of rows used to size the component height. The default value is -1 (no auto-sizing for any number of rows). The height of the component can grow to a maximum of 'autoHeightRows' after which a scrollbar is displayed. This attribute is also supported when the component is inside PanelCollection. A value of 0 can be used to default the autoHeightRows to the current fetchSize. 'autoHeightRows' value cannot be larger than "fetchSize" attribute. If a value larger than fetchSize is specified, the value is capped at the fetchSize. If a value larger than the number of rows is specified, the number of rows in the component is used to size the component height. 'autoHeightRows' works with contentDelivery=immediate/lazy/whenAvailable. 'autoHeightRows' attribute has no effect in screen reader mode. Note that specifying a CSS "height" in the "inlineStyle" attribute will have no effect and will get overriden by the auto-sized height. Specifying CSS "min-height" and "max-height" values in the "inlineStyle" attribute is not recommended and is incompatible with the autoHeightRows attribute. When the component is placed in a layout-managing container, such as panelSplitter, it will be sized by the container (no auto-sizing will occur). 
treeTable.bodyContextMenuId.description=A search expression to identify the popup component containing the context menu that will be shown within the table body, for clicks outside of any table row. Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components). You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
treeTable.clientComponent.description=whether a client-side component will be generated. A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence. Client component objects that are generated today by default may not be present in the future; setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior. However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
treeTable.columnBandingInterval.description=the interval between which the column banding occurs. This value controls the display of the column banding in the table. For e.g, columnBandingInterval=1 would display alternately banded columns in the Grid.
treeTable.columnResizing.description=Setting this value to "disabled" will turn off user column resizing. The default is "enabled".
treeTable.columnSelection.description=whether columns in this table are selectable.
treeTable.columnSelectionListener.description=a method reference to a ColumnSelectionListener
treeTable.columnStretching.description=Indicates what kind of stretching you want applied to the columns. For optimal performance, use the "none" (default) option. If you want the last column to stretch to fill up any unused space inside of the viewport, use the "last" option. If you want to have an empty blank column be automatically inserted and have it stretch (so the row background colors will span the entire width of the table), use the "blank" option. If you want to have a specific leaf (non-group) column stretch to fill up any unused space inside of the viewport, use the option where you specify "column:" followed by the ID of the column that you want to have stretched, e.g. "column:myColId". If you want more than one column stretched, use the "multiple" option. When the "multiple" option is used you can set the widths in the columns (non-group) to be percentages. See the column documentation for how percentages are handled. Note that row headers and frozen columns will not be stretched because doing so could easily leave the user unable to access the scrollable data body of the table.
treeTable.contentDelivery.description=whether data should be fetched when the component is rendered initially. When contentDelivery is "immediate", data is fetched and inlined into the component chrome. If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request. If contentDelivery is set to "whenAvailable", upon initial rendering, the renderer queries the model for available data. Data is fetched and rendered immediately if model indicates that data is available. So contentDelivery="whenAvailable" behaves like "immediate" if data is available upon initial rendering.
treeTable.contextMenuId.description=A search expression to identify the popup component containing the context menu that will be shown on right click of any table row. Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components). You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers. For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
treeTable.contextMenuSelect.description=Indicates if we should actually select the row clicked when right clicking to show a context menu. By default the row is selected before the context menu is displayed. However if contextMenuSelect="false", and if user right clicks a row, the new row is highlighted and the highlighting for the currently selected row(s) is cleared when the context menus is displayed. The highlighting of the currently selected row(s) is restored after the context menu is dismissed. It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected row(s). The highlighted row key is established as a currency in the table when the action for context menu item is executed. The currency in the table can be retrieved by calling "table.getRowKey()".
treeTable.customizationId.description=This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
treeTable.description=Represents an interactive hierarchical table component.
treeTable.disableColumnReordering.description=whether column reordering is disabled in the table. Column reordering is on by default.
treeTable.disclosedRowKeys.description=the set of disclosed rows for this component. Each entry in the set is a rowKey.
treeTable.display-label=Tree Table 
treeTable.displayRow.description=the row to display in the table during intial display. The possible values are "first" to display the first row, "last" to display the last row and "selected" to display the first selected row in the table. The default value for this is null which means that the first row is displayed. Please note that this API will have no effect if the total number of rows are not known from the table model (model.getRowCount()==-1).
treeTable.displayRowKey.description=the rowkey to display in the table during intial display. Specifying this attribute will override the displayRow attribute. Please note that this API will have no effect if the total number of rows are not known from the table model (model.getRowCount()==-1).
treeTable.editingMode.description=Indicates the mode used to edit the table when it contains editable components. The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area. In "clickToEdit" mode a single row is editable at a time. The following is the behavior: Stay in edit mode: If in edit mode, stay in edit mode when a read/only cell is reached via keyboard navigation. Enter key navigation: When in edit mode, ensure that pressing Enter or Shift+Enter navigates to the adjacent cell when possible. Esc key reverts cell edits: When in edit mode, pressing the Esc key reverts all edits made to cells in a row and disables edit mode. (NEW) Navigation pattern recognition: Using the Tab and Enter keys to navigate in edit mode establishes a row-wise navigation pattern that is repeated in adjacent rows. Input Field Text Selection: When a cell contains an input text field widget, the text is selected automatically when the widget has focus. Arrow Key Navigation: When in edit mode, pressing the arrow key allows the user to navigate from cell to cell in the same row or between rows. 
treeTable.emptyText.description=the text of an empty table. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component. If it is not enclosed in an open and closing html tag, it will not be formatted.
treeTable.expandAllEnabled.description=Indicates whether the "Expand/Collapse All", and "Expand/Collapse All Below" menu items are rendered. These menu items are rendered by default.
treeTable.fetchSize.description=the number of rows in the data fetch block
treeTable.focusListener.description=a method reference to a focus listener
treeTable.focusRowKey.description=the rowKey of the currently focused row. The rowKeys of the ancestor rows of the focus row are added to the expandedRowKeys RowKeySet by default.
treeTable.horizontalGridVisible.description=whether the Horizontal GridLines are to be drawn.
treeTable.id.description=the identifier for the component. The identifier must follow a subset of the syntax allowed in HTML: Must not be a zero-length String. First character must be an ASCII letter (A-Za-z) or an underscore ('_'). Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-'). 
treeTable.immediate.description=whether or not data validation - client-side or server-side - should take place when events are generated by this component. When immediate is true, the default ActionListener provided by the JavaServer Faces implementation should be executed during Apply Request Values phase of the request processing lifecycle, rather than waiting until the Invoke Application phase.
treeTable.initiallyExpanded.description=If upon initial rendering, the current subtree under the focused row path should be expanded. A RowDisclosureEvent is broadcast from the encode begin of the component so that listeners are properly notified of the disclosure.
treeTable.inlineStyle.description=the CSS styles to use for this component. This is intended for basic style changes. The inlineStyle is a set of CSS styles that are applied to the root DOM element of the component. If the inlineStyle's CSS properties do not affect the DOM element you want affected, then you will have to create a skin and use the skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
treeTable.partialTriggers.description=the IDs of the components that should trigger a partial update. This component will listen on the trigger components. If one of the trigger components receives an event that will cause it to update in some way, this component will request to be updated too. Identifiers are relative to the source component (this component), and must account for NamingContainers. If your component is already inside of a naming container, you can use a single colon to start the search from the root of the page, or multiple colons to move up through the NamingContainers - "::" will pop out of the component's naming container (or itself if the component is a naming container) and begin the search from there, ":::" will pop out of two naming containers (including itself if the component is a naming container) and begin the search from there, etc.
treeTable.rangeChangeListener.description=a method reference to a rangeChange listener that will be called when a new range is selected.
treeTable.rendered.description=whether the component is rendered. When set to false, no output will be 		delivered for this component (the component will not in any way be rendered, 		and cannot be made visible on the client). If you want to change a component's 		rendered attribute from false to true using PPR, set the partialTrigger attribute of its parent component so the parent refreshes and in turn will render this component.
treeTable.rootNodeRendered.description=If the root node should be rendered or not. Defaults to true.
treeTable.rowBandingInterval.description=the interval between which the row banding occurs. This value controls the display of the row banding in the table. For e.g, rowBandingInterval=1 would display alternately banded rows in the Grid.
treeTable.rowDisclosureListener.description=a method reference to an ExpansionListener
treeTable.rowSelection.description=whether rows in this table are selectable.
treeTable.rowsByDepth.description=the maximum number of records that can be displayed at one time (range size). Each level of depth in the tree can have a different range size. The first number in the array sets the range size for the root collection. Each subsequent number sets the range size for the corresponding depth. The last number becomes the default for each subsequent level of depth. If a node has more children than the range size, navigation rows will be rendered above and below the child nodes.
treeTable.selectedRowKeys.description=the selection state for this component.
treeTable.selectionListener.description=a method reference to a selection listener
treeTable.shortDesc.description=the short description of the component. This text is commonly used by user agents to display tooltip help text, in which case the behavior for the tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips. For form components, the shortDesc is displayed in a note window. For components that support the helpTopicId attribute it is recommended that helpTopicId is used as it is more flexible and is more accessibility-compliant.
treeTable.styleClass.description=a CSS style class to use for this component. The style class can be defined in your jspx page or in a skinning CSS file, for example, or you can use one of our public style classes, like 'AFInstructionText'.
treeTable.summary.description=the summary of this table's purpose and structure for user agents rendering to non-visual media.
treeTable.unsecure.description=A whitespace separated list of attributes whose values ordinarily can be set only on the server, but need to be settable on the client. Currently, this is supported only for the "disabled" attribute.
treeTable.value.description=the hierarchy of tree data - must be of type org.apache.myfaces.trinidad.model.TreeModel
treeTable.var.description=Name of the EL variable used to reference each element of this collection. Once this component has completed rendering, this variable is removed (or reverted back to its previous value).
treeTable.varStatus.description= Name of the EL variable used to reference the varStatus information. Once this component has completed rendering, this variable is removed (or reverted back to its previous value). The VarStatus provides contextual information about the state of the component to EL expressions. For components that iterate, varStatus also provides loop counter information. Please see the this component's documentation for the specific properties on the varStatus. The common properties on varStatus include:"model" - returns the CollectionModel for this component"index" - returns the zero based row index
treeTable.verticalGridVisible.description=whether the vertical GridLines are to be drawn.
treeTable.visible.description=the visibility of the component. If it is "false", the component will be hidden on the client. Unlike "rendered", this does not affect the lifecycle on the server - the component may have its bindings executed, etc. - and the visibility of the component can be toggled on and off on the client, or toggled with PPR. When "rendered" is false, the component will not in any way be rendered, and cannot be made visible on the client. In most cases, use the "rendered" property instead of the "visible" property.
treeTable.width.description=the width of this component. Default value is 300 PX
validateByteLength.display-label=Validate Byte Length 
validateDateRestriction.display-label=Validate Date Restriction 
validateDateTimeRange.display-label=Validate Date Time Range 
validateDoubleRange.display-label=Validate Double Range 
validateLength.display-label=Validate Length 
validateLongRange.display-label=Validate Long Range 
validateRegExp.display-label=Validate Reg Exp 
xmlContent.display-label=Xml Content 
