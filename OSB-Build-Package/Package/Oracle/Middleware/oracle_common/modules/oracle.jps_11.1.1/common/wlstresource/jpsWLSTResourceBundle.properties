opss_shortDescription=\
Oracle platform security services Commands.\

opss_description=\
Oracle platform security services Commands.\

#######################################################################################################################################################
getOpssService_shortDescription=\
Gets a service command object that can be used to list command help or execute commands for the given service. This command is valid only in a WLST shell.

getOpssService_description=\
\nGets a service command object that can be used to list command help or execute commands for the given service. This command is valid only in a WLST shell.\n

getOpssService_example=\
\n svc = getOpssService(name='KeyStoreService') \
\n       The service command reference object is returned in the variable svc.\
\n svc.help() \
\n       This shows the list of all keystore service commands.\
\n svc.help('listKeyStores') \
\n       This shows the help for the keystore service command listKeyStores. \
\n svc.listKeyStores(...) \
\n       This invokes the command listKeyStores with the provided parameters.\n\

getOpssService_syntax=\
\n variable = getOpssService(name='<service_name>') \
\n     name = Name of the service command object to be obtained. The only valid value is 'KeyStoreService'. \
\n variable.help() \
\n     Displays the list of all commands for this service.\
\n variable.help('<command_name>') \
\n     Displays the help for the specified command. \
\n variable.<command_name>(...) \
\n     Invokes the given command with the provided parameters.\n\

############################################################################################################################################################
listCred_shortDescription=\
List Credential information for given map and key names. A generic credential will not be listed.

listCred_description=\
\nList Credential information for given map and key names. A generic credential will not be listed \n

listCred_example=\
\nlistCred(map="myMap",key="myKey")\n

listCred_syntax=\
listCred(map="<map>", key="<key>)\
\n map= Also known as alias and folder. It defines the name of the map where the credential exists\
\n key= It defines the value of the key which addresses the credential in a map in credential store\n

############################################################################################################################################################

listAppRoles_shortDescription=\
List all application roles defined in a given application.\

listAppRoles_description=\
\nList all application roles defined in a given application. \n

listAppRoles_example=\
\nlistAppRoles(appStripe="myApplication")\n

listAppRoles_syntax=\
\nlistAppRoles(appStripe="<application stripe id>")\
\n appStripe= application stripe representing the application. \n

##############################################################################################################################################################
 
listAppRoleMembers_shortDescription=\
List members of an application role. \

listAppRoleMembers_description=\
\nList members of an application role. \n

listAppRoleMembers_example=\
\nlistAppRoleMembers(appStripe="myApplication", appRoleName="myRole")\n

listAppRoleMembers_syntax=\
\nlistAppRoleMembers(appStripe="<application stripe name>", appRoleName="<application role name>")\
\n appStripe= application stripe representing the application. \
\n appRoleName = Name of the application role, whose members need to be listed. \n

###############################################################################################################################################################

listPermissions_shortDescription=\
List permissions assigned to the given principal in application scoped/ global policies. \

listPermissions_description=\
\nList permissions assigned to the given principal in application scoped/ global policies. \n

listPermissions_example=\
\nExample1: list permissions assigned to a principal in application policies:\
\n\tlistPermissions(appStripe="myApplication",principalClass="oracle.security.jps.service.policystore.ApplicationRole", principalName="appAdministrator")\
\nExample2: list permissions assigned to a principal in global policies:\
\n\tlistPermissions(principalClass="weblogic.security.principal.WLSGroupImpl", principalName="Administrators")\n

listPermissions_syntax=\
\nlistPermissions([appStripe="<application stripe if application policy>",] principalClass="<principal class>",principalName="<principal name>")\
\n appStripe= application stripe representing the application, if application specific policies are being queried \
\n principalClass= class name of the principal whose permissions need to be listed \
\n principalName= Name of the principal whose permissions need to be listed \n

###############################################################################################################################################################

listCodeSourcePermissions_shortDescription=\
List permissions assigned to the given code source in application scoped/ global policies. \

listCodeSourcePermissions_description=\
\nList permissions assigned to the given code source in application scoped/ global policies. \n

listCodeSourcePermissions_example=\
\nExample1: list permissions assigned to a code source in application policies:\
\n\tlistCodeSourcePermissions(appStripe="myApplication", codeBaseURL="file:/tmp/bea/user_projects/domains/jpsdomain/lib/jps-internal.jar")\
\nExample2: list permissions assigned to a code source in global policies:\
\n\tlistCodeSourcePermissions(codeBaseURL="file:/tmp/bea/user_projects/domains/jpsdomain/lib/jps-internal.jar")\n

listCodeSourcePermissions_syntax=\
\nlistCodeSourcePermissions([appStripe="<application stripe if application policy>",] codeBaseURL=" <url of code base>")\
\n appStripe = application stripe representing the application, if application specific policies are being queried \
\n codeBaseURL = name of the grantee codebase URL \n

##########################################################################################################################################################################

createCred_shortDescription=\
Create a new password credential. \

createCred_description=\
\nCreate a new password credential. \n

createCred_example=\
\ncreateCred(map="myMap", key="myKey", user="myUser", password="<password>", desc="<description>") \n

createCred_syntax=\
\nCreate a new password credential. \
\ncreateCred(map="<mapname>", key="<keyname>", user="<userName>", password="<password>",[desc="<description>"]) \
\n map= Also known as alias and folder. It defines the name of the map where the credential exists\
\n key= It defines the value of the key which addresses the credential in a map in credential store\
\n user= user name part of the credential\
\n password= password part of the credential\
\n desc= short text describing the credential\n

############################################################################################################################################################################

createAdminRole_shortDescription=\
Creates an admin role for a given application. \

createAdminRole_description=\
\nCreates an admin role for a given application. \n

createAdminRole_example=\
\ncreateAdminRole(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator", displayName="myAdminRole", description="an admin role") \n

createAdminRole_syntax=\
\ncreateAdminRole(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<new admin role name>", displayName="<display name>", description="<description of admin role>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName = Name of the administration role to be created. \
\n displayName = The display name of the administration role to be created. \
\n desc= The description of the administration role to be created. \n

############################################################################################################################################################################
deleteAdminRole_shortDescription=\
Deletes an admin role for a given application. \

deleteAdminRole_description=\
\nDeletes an admin role for a given application. \n

deleteAdminRole_example=\
\ndeleteAdminRole(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator") \n


deleteAdminRole_syntax=\
\ndeleteAdminRole(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName = Name of the administration role to be deleted. \n


############################################################################################################################################################################
listAdminRoles_shortDescription=\
Lists all admin roles defined in a given application/policy domain. \

listAdminRoles_description=\
\n Lists all admin roles defined in a given application or policy domain. \n

listAdminRoles_example=\
\nlistAdminRoles(appStripe="myApplication", policyDomainName="myDomain") \n

listAdminRoles_syntax=\
\nlistAdminRoles(appStripe="<application stripe name>", policyDomainName="<policy domain name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \



############################################################################################################################################################################
  
listAdminRoleMembers_shortDescription=\
Lists the principals granted to this administration role. \

listAdminRoleMembers_description=\
\n Lists the principals granted to this administration role. \n

listAdminRoleMembers_example=\
\nlistAdminRoleMembers(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator") \n

listAdminRoleMembers_syntax=\
\nlistAdminRoleMembers(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName= The name of the administration for which the members are to be listed. \n




############################################################################################################################################################################

grantAdminRole_shortDescription=\
Grant an Admin Role rights to a given principal who exists in the ID store. \

grantAdminRole_description=\
\n Grant an Admin Role rights to a given principal who exists in the ID store. \n

grantAdminRole_example=\
\ngrantAdminRole(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator", principalClass="com.example.xyzPrincipal", principalName="manager") \n

grantAdminRole_syntax=\
\ngrantAdminRole(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>", principalClass="<member principal class>", principalName="<member principal name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName= The name of the administration role to which a principal must be granted.\
\n principalClass= Class name of the member principal. \
\n principalName= Name of the member principal. \n


############################################################################################################################################################################

revokeAdminRole_shortDescription=\
Revoke an Admin Role rights from a given principal who exists in the ID store.. \

revokeAdminRole_description=\
\n Revoke an Admin Role rights from a given principal who exists in the ID store. \n

revokeAdminRole_example=\
\nrevokeAdminRole(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator", principalClass="com.example.xyzPrincipal", principalName="manager") \n

revokeAdminRole_syntax=\
\ngrantAdminRole(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>", principalClass="<member principal class>", principalName="<member principal name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName = The name of the administration role that has to be revoked from the principal. \
\n principalClass= Class name of the member principal. \
\n principalName= Name of the member principal. \n

############################################################################################################################################################################

grantAdminResource_shortDescription=\
Grant Administrative resource actions to an admin role. \

grantAdminResource_description=\
\n Grant Administrative resource actions to an admin role. \n

grantAdminResource_example=\
\ngrantAdminResource(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator", adminResource="RESOURCE", action="MANAGE") \n

grantAdminResource_syntax=\
\ngrantAdminResource(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>", adminResource="<admin resource name>", action="<action name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName= The name of the administration role that has to be granted from the resource. \
\n adminResource= The admin resource name. It can be one of the values (in String) from the Admin Resource Enum. \
\n action= The admin action name. It can be one of the values (in String) from the Admin Action Enum. \n

############################################################################################################################################################################

revokeAdminResource_shortDescription=\
Revoke Administrative resource actions from an admin role. \

revokeAdminResource_description=\
\n Revoke Administrative resource actions from an admin role. \n

revokeAdminResource_example=\
\nrevokeAdminResource(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator", adminResource="RESOURCE", action="MANAGE") \n

revokeAdminResource_syntax=\
\nrevokeAdminResource(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>", adminResource="<admin resource name>", action="<action name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName= The name of the administration role that has to be revoked from the resource. \
\n adminResource= The admin resource name. It can be one of the values (in String) from the Admin Resource Enum. \
\n action= The admin action name. It can be one of the values (in String) from the Admin Action Enum. \n



############################################################################################################################################################################

listAdminResources_shortDescription=\
Lists the Administrative resource actions for an admin role. \

listAdminResources_description=\
\n Lists the Administrative resource actions for an admin role. \n

listAdminResources_example=\
\nlistAdminResources(appStripe="myApplication", policyDomainName="myDomain", adminRoleName="appAdministrator")

listAdminResources_syntax=\
\nlistAdminResources(appStripe="<application stripe name>", policyDomainName="<policy domain name>", adminRoleName="<admin role name>") \
\n appStripe= application stripe representing the application. If the stripe is not supplied then the search is performed against the system policy.\
\n policyDomainName = The policy domain name, which is the context for the admin role. \
\n adminRoleName= The name of the admin role for which the permissions have to be listed. \n


############################################################################################################################################################################

createAppRole_shortDescription=\
Creates an application Role for a given application. \

createAppRole_description=\
\nCreates an application Role for a given application. \n

createAppRole_example=\
\ncreateAppRole(appStripe="myApplication", appRoleName="appAdministrator") \n

createAppRole_syntax=\
\ncreateAppRole(appStripe="<application stripe name>", appRoleName="<new application role name>") \
\n appStripe= application stripe representing the application. \
\n appRoleName = Name of the application role to be created. \n

############################################################################################################################################################################
createResourceType_shortDescription=\
Creates a ResourceType for a given application. \

createResourceType_description=\
\nCreates a ResourceType for a given application. \n

createResourceType_example=\
\ncreateResourceType(appStripe="myApplication", resourceTypeName="Printer", displayName="PRINTER", description="A ResourceType representing a Printer", provider="Printer", matcher="com.printer.Printer", allowedActions="BWPrint,ColorPrint", delimiter=",") \n

createResourceType_syntax=\
\ncreateResourceType(appStripe="<application stripe name>", resourceTypeName="<Name of the ResourceType>"[, displayName="<diplay name>", description="<description of the ResourceType>"][, provider="<Provider of the ResourceType>"][, matcher="<Matcher class for ResourceType>"][, allowedActions="Allowed set of actions for ResourceType"[, delimiter="delimiter for the ResourceType"]])  \
\n appStripe= application stripe representing the application. \
\n resourceTypeName = Name of the ResourceType to be created. \
\n displayName = Display name of this ResourceType. This is an optional parameter. \
\n description = Description for this ResourceType. This is an optional parameter. \
\n provider = Provider for this ResourceType. This is an optional parameter. \
\n matcher = Matcher class for this ResourceType. This is an optional parameter. \
\n allowedActions = Allowed set of actions for this ResourceType. A comma separated list of actions needs to be provided as input. This is an optional parameter. \
\n delimiter = Delimiter for this ResourceType. This is an optional parameter. If unspecified, the default delimiter is "," \n

############################################################################################################################################################################
getResourceType_shortDescription=\
Print a ResourceType for a given application. \

getResourceType_description=\
\nPrint a ResourceType for a given application. \n

getResourceType_example=\
\ngetResourceType(appStripe="myApplication", resourceTypeName="Printer") \n

getResourceType_syntax=\
\ngetResourceType(appStripe="<application stripe name>", resourceTypeName="<Name of the ResourceType>") \
\n appStripe= application stripe representing the application. \
\n resourceTypeName = Name of the ResourceType to be fetched. \n

############################################################################################################################################################################
deleteResourceType_shortDescription=\
Delete a ResourceType for a given application. \

deleteResourceType_description=\
\nDelete a ResourceType for a given application. \n

deleteResourceType_example=\
\ndeleteResourceType(appStripe="myApplication", resourceTypeName="Printer") \n

deleteResourceType_syntax=\
\deleteResourceType(appStripe="<application stripe name>", resourceTypeName="<Name of the ResourceType>") \
\n appStripe= application stripe representing the application. \
\n resourceTypeName = Name of the ResourceType to be deleted. \n

############################################################################################################################################################################
createFunction_shortDescription=\
Creates a function in a given application. \

createFunction_description=\
\nCreates a function for a given application. \n

createFunction_example=\
\ncreateFunction(appStripe="myApplication", functionName="MyFunction", displayName="CONCATENATE", description="A function representing concatenate operation on string", className="MyClass", returnType="oracle.security.jps.service.policystore.info.OpssString", paramTypes="oracle.security.jps.service.policystore.info.OpssString,oracle.security.jps.service.policystore.info.OpssString") \n

createFunction_syntax=\
\ncreateFunction(appStripe="<application stripe name>", functionName="<Name of the function>"[, displayName="<diplay name>"][, description="<description of the function>"], className="<Name of the class to which the function belongs>", returnType="<Return type of the function>"[, paramTypes="<Parameter types of the function delimited by ','>"])  \
\n appStripe = application stripe representing the application. \
\n functionName = Name of the function to be created. \
\n displayName = Display name of this function. This is an optional parameter. \
\n description = Description for this function. This is an optional parameter. \
\n className = Name of the class to which the function belongs. \
\n returnType = Return type of the function. \
\n paramTypes = Types of parameters concatenated using ','. This is an optional parameter. If unspecified, the function doesn't take any parameter as input. \n

############################################################################################################################################################################
getFunction_shortDescription=\
Prints a function in a given application. \

getFunction_description=\
\nPrints a function for a given application. \n

getFunction_example=\
\ngetFunction(appStripe="myApplication", functionName="MyFunction") \n

getFunction_syntax=\
\ngetFunction(appStripe="<application stripe name>", functionName="<Name of the function>")  \
\n appStripe = application Id representing the application. \
\n functionName = Name of the function to be created. \n

############################################################################################################################################################################
listFunctions_shortDescription=\
Lists the functions present in a given application. \

listFunctions_description=\
\nLists the functions present in a given application. \n

listFunctions_example=\
\nlistFunctions(appStripe="myApplication", hideBuiltIn=true) \n

listFunctions_syntax=\
\nlistFunctions(appStripe="<application stripe name>"[, hideBuiltIn="<whether to hide built in functions>"])  \
\n appStripe = application stripe representing the application. \
\n hideBuiltIn = boolean value indicating whether to hide built in functions. Its default value is true. \n

############################################################################################################################################################################
deleteFunction_shortDescription=\
Deletes a function in a given application. \

deleteFunction_description=\
\nDeletes a function for a given application. \n

deleteFunction_example=\
\ndeleteFunction(appStripe="myApplication", functionName="MyFunction") \n

deleteFunction_syntax=\
\ndeleteFunction(appStripe="<application stripe name>", functionName="<Name of the function>")  \
\n appStripe = application stripe representing the application. \
\n functionName = Name of the function to be deleted. \

############################################################################################################################################################################
updateFunction_shortDescription=\
Updates a function in a given application. \

updateFunction_description=\
\nUpdates a function for a given application. \n

updateFunction_example=\
\nupdateFunction(appStripe="myApplication", functionName="MyFunction", displayName="CONCATENATE", description="A function representing concatenate operation on string", className="MyClass", returnType="oracle.security.jps.service.policystore.info.OpssString", paramTypes="oracle.security.jps.service.policystore.info.OpssString,oracle.security.jps.service.policystore.info.OpssString") \n

updateFunction_syntax=\
\nupdateFunction(appStripe="<application stripe name>", functionName="<Name of the function>"[, displayName="<diplay name>"][, description="<description of the function>"][, className="<Name of the class to which the function belongs>"][, returnType="<Return type of the function>"][, paramTypes="<Parameter types of the function delimited by ','>"])  \
\n appStripe = application stripe representing the application. \
\n functionName = Name of the function to be updated. \
\n displayName = Display name of this function. This is an optional parameter. If unspecified display name of the function is not changed. If empty string is given as the value, the function is updated not to have this value set. \
\n description = Description for this function. This is an optional parameter. If unspecified description of the function is not changed. If empty string is given as the value, the function is updated not to have this value set. \
\n className = Name of the class to which the function belongs. This is an optional parameter. If unspecified class of the function is not changed. \
\n returnType = Return type of the function. This is an optional parameter. If unspecified return type of the function is not changed. \
\n paramTypes = Types of parameters concatenated using ','. This is an optional parameter. If unspecified, parameter types of the function is not changed. If empty string is given as the value, the function is updated to take no input parameter. \n

##############################################################################################################################################################################
deleteCred_shortDescription=\
Delete a credential. \

deleteCred_description=\
\nDelete a credential. \n

deleteCred_example=\
\ndeleteCred(map="map1", key="key1") \n

deleteCred_syntax=\
\ndeleteCred(map="<mapname>", key="<keyname>") \
\n map= Also known as alias and folder. It defines the name of the map where the credential exists\
\n key= It defines the value of the key which addresses the credential in a map in credential store\n

##############################################################################################################################################################################

deleteAppRole_shortDescription=\
Delete a given application Role for a given application. \

deleteAppRole_description=\
\nDelete a given application Role for a given application. \n

deleteAppRole_example=\
\ndeleteAppRole(appStripe="myApplication", appRoleName="appAdministrator") \n

deleteAppRole_syntax=\
\ndeleteAppRole(appStripe="<application stripe name>", appRoleName="<application role name to be deleted>") \
\n appStripe= application stripe representing the application. \
\n appRoleName = Name of the application role to be created. \n

################################################################################################################################################################################

deleteAppPolicies_shortDescription=\
Delete policies specific to an application. \

deleteAppPolicies_description=\
\nDelete policies specific to an application. \n

deleteAppPolicies_example=\
\ndeleteAppPolicies(appStripe="myApplication") \n

deleteAppPolicies_syntax=\
\ndeleteAppPolicies(appStripe="<application stripe name>") \
\n appStripe= application stripe representing the application. \n

################################################################################################################################################################################

grantAppRole_shortDescription=\
Grant an application Role to a given principal who exists in the ID store. \

grantAppRole_description=\
\nGrant an application Role to a given principal who exists in the ID store. \n

grantAppRole_example=\
\ngrantAppRole(appStripe="myApplication", appRoleName="appAdministrator", principalClass="com.example.xyzPrincipal", principalName="manager") \n

grantAppRole_syntax=\
\ngrantAppRole(appStripe="<application stripe name>", appRoleName="<application role name>", principalClass="<member principal class>", principalName="<member principal name>") \
\n appStripe= application stripe representing the application. \
\n appRoleName= name of the application role. \
\n principalClass= class name of the member principal \
\n principalName= name of the member principal \n

###################################################################################################################################################################################

grantPermission_shortDescription=\
Grant permission to a principal or codebase in application scoped/ global policies. \

grantPermission_description=\
\nGrant permission to a principal or codebase in application scoped/ global policies. \n


grantPermission_example=\
\nExample1: grant permission to a principal in application policies:\
\n\tgrantPermission(appStripe="myApplication", principalClass="oracle.security.jps.service.policystore.ApplicationRole", principalName="appAdministrator", permClass="java.security.AllPermission")\
\nExample2: grant permission to a principal in global policies:\
\n\tgrantPermission(principalClass="", principalName="manager", permClass="java.io.FilePermission", permTarget="/resources/-", permActions="read,write")\n

grantPermission_syntax=\
\nGrant permission to a principal in application scoped policies. \
\n\tgrantPermission(appStripe="<application stripe if application policy>", principalClass="<principal class>", principalName="<principal name>",\
\npermClass="<permission class>",[permTarget="<permission name/target if applicable>",] [permActions="<comma separated perm actions>"]) \
\nGrant permission to a principal in global scoped policies. \
\n\tgrantPermission(principalClass="<principal class>", principalName="<principal name>",\
\npermClass="<permission class>",[permTarget="<permission name/target if applicable>",] [permActions="<comma separated perm actions>"]) \
\nGrant permission to codesource in global scoped policies. \
\n\tgrantPermission(codeBaseURL=" <url of code base if code based permissions>", permClass="<permission class>" [,permTarget="<permission name/target if applicable>"] [,permActions="<comma separated perm actions>"])\
\n appStripe= application stripe representing the application, if application policies are being updated \
\n principalClass= class name of the grantee principal \
\n principalName= name of the grantee principal \
\n codeBaseURL= name of the grantee codebase URL \
\n permClass= class name of the permission being granted \
\n permTarget= target part of the permission that is being granted \
\n permActions= permission actions are being granted \n

#######################################################################################################################################################################################

revokeAppRole_shortDescription=\
Revoke an application Role from a given principal who exists in the ID store. \

revokeAppRole_description=\
\nRevoke an application Role from a given principal who exists in the ID store.\n

revokeAppRole_example=\
\nrevokeAppRole(appStripe="<application stripe name>", appRoleName="<application role name>", principalClass="<member principal class>", principalName="<member principal name>") \n

revokeAppRole_syntax=\
\nrevokeAppRole(appStripe="myApplication", appRoleName="appAdministrator", principalClass="com.example.xyzPrincipal", principalName="manager")\
\n appStripe= application stripe representing the application. \
\n appRoleName= name of the application role. \
\n principalClass= class name of the member principal. \
\n principalName= name of the member principal. \n

#######################################################################################################################################################################################

revokePermission_shortDescription=\
Revoke permission from a principal or codebase in application scoped/global policies

revokePermission_description=\
\nRevoke permission from a principal or codebase in application scoped/global policies \n

revokePermission_example=\
\nExample1: revoke permission from a principal in application policies:\
\n\trevokePermission(appStripe="myApplication", principalClass="oracle.security.jps.service.policystore.ApplicationRole", principalName="appAdministrator", permClass="java.security.AllPermission")\
\nExample2: revoke permission from a principal in global policies:\
\n\trevokePermission(principalClass="", principalName="manager", permClass="java.io.FilePermission", permTarget="/resources/-", permActions="read,write")\n

revokePermission_syntax=\
\nRevoke permission from a principal in application scoped policies. \
\n\trevokePermission(appStripe="<application stripe if application policy>", principalClass="<principal class>", principalName="<principal name>",\
\npermClass="<permission class>",[permTarget="<permission name/target if applicable>",] [permActions="<comma separated perm actions>"]) \
\nRevoke permission from a principal in global scoped policies. \
\n\tgrantPermission(principalClass="<principal class>", principalName="<principal name>",\
\nrevokeClass="<permission class>",[permTarget="<permission name/target if applicable>",] [permActions="<comma separated perm actions>"]) \
\nRevoke permission from some codebase in global scoped policies. \
\n\trevokePermission(codeBaseURL=" <url of code base if code based permissions>", permClass="<permission class>" [,permTarget="<permission name/target if applicable>"] [,permActions="<comma separated perm actions>"]) \
\n appStripe= application stripe representing the application, if application policies are being updated \
\n principalClass= class name of the grantee principal \
\n principalName= name of the grantee principal \
\n codeBaseURL= name of the grantee codebase URL \
\n permClass= class name of the permission being revoked \
\n permTarget= target part of the permission that is being revoked \
\n permActions= permission actions are being revoked \n


#######################################################################################################################################################################################

updateCred_shortDescription=\
Update a password credential. \n 

updateCred_description=\
\nUpdate a password credential. \n

updateCred_example=\
\nupdateCred(map="map1", key="key1", user="user1", password="<password>", desc="description of the credential") \n

updateCred_syntax=\
\nUpdate a password credential \
\n\tupdateCred(map="<mapname>", user="<userName>", password="<password>", desc="<description>") \
\n map= Also known as alias and folder. It defines the name of the map where the credential exists\
\n key= It defines the value of the key which addresses the credential in a map in credential store\
\n user= user name part of the credential\
\n password= password part of the credential\
\n desc= short text describing the credential\n

#########################################################################################################################################################################################

migrateSecurityStore_shortDescription=\
Migrates identity store/ credential store/ policy store/keystore/ audit store/ application policies /global policies from one store to another.\

migrateSecurityStore_description=\
\nMigrates identity store/ credential store/ policy store/keystore/ audit store/ application policies /global policies from one store to another.\
\nThe source store as well as the destination store could be of any type as defined by context.\
\nIn case of scope being idStore, if the destination store is of LDAP(OID/Embedded LDAP) type, and LDIF file will be created, at the defined location.\
\nEntries will not be directly written to the LDAP server.\
\nIn case of scope being appPolicies, if migrateIdStoreMapping is false , then only application specific policies are migrated ignoring all identity store artifacts.\

migrateSecurityStore_example=\
\nMigrate identity store data to another identity store.\
\n\tmigrateSecurityStore(type="idStore", configFile="/folder/jps-config.xml", src="sourceContext", dst="destinationContext") \
\nMigrate application specific policies in policy store to another policy store.\
\n\tmigrateSecurityStore(type="appPolicies", configFile="/folder/jps-config.xml", src="sourceContext", srcApp="sourceApplication", dstApp="destinationApplication", dst="destinationContext")\
\nMigrate only application policies in policy store to another policy store ignoring the identity store artifacts\
\n\tmigrateSecurityStore(type="appPolicies", configFile="/folder/jps-config.xml", src="sourceContext", srcApp="sourceApplication", dstApp="destinationApplication", dst="destinationContext", migrateIdStoreMapping="false", reportFile="/tmp/report.html")\
\nMigrate contents of one keystore to another keystore\
\n\tmigrateSecurityStore(type="keyStore", srcConfigFile="/srcFolder/jps-config.xml", configFile="/dstFolder/jps-config.xml", src="ksSrc", dst="ksDst")\n

migrateSecurityStore_syntax=\
\n\tmigrateSecurityStore(type="{credStore|globalPolicies}", configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>")\
\nMigrate policy store.\
\n\tmigrateSecurityStore(type="policyStore", configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>" [,migrateIdStoreMapping="{true|false}"][,preserveAppRoleGuid="{true|false}"][,mode="{strict|lax}"])\
\nMigrate identity store.\
\n\tmigrateSecurityStore(type="idStore", configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>" [,dstLdifFile="<LDIFFilePath>"])\
\nMigrate application specific policies.\
\n\tmigrateSecurityStore(type="appPolicies", configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>", srcApp="<sourceApplication>" [,dstApp="<destinationApplication>"] [,overWrite="{true|false}"] [,migrateIdStoreMapping="{true|false}"][,preserveAppRoleGuid="{true|false}][,mode="{lax}"][,reportFile="<report file loc>"])\
\nMigrate folder specific credentials.\
\n\tmigrateSecurityStore(type="folderCred" [,srcFolder="<srcFolderName>"] [,srcConfigFile="<srcConfigFileLocation>"],  configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>" [,dstFolder="<dstFolderName>"] [,overWrite="{true|false}"])\
\nMigrate keystore from one domain to another or in same domain.\
\n\tmigrateSecurityStore(type="keyStore" [,srcConfigFile="<srcConfigFileLocation>"],  configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>")\
\nMigrate stripe specific keystores.\
\n\tmigrateSecurityStore(type="stripeKeyStore" [,srcStripe="<srcStripeName>"] ,  configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>" [,dstStripe="<dstStripeName>"] [,overWrite="{true|false}"]\
\n\tmigrateSecurityStore(type="auditStore",  configFile="<jps config file loc>", src="<sourceContext>", dst="<destinationContext>" [,overWrite="{true|false}"]\
\n\
\ntype= This argument specifies the scope and type of the data to be migrated. Valid values are the following:\
\n idStore - To migrate users/roles specified in identity store.\
\n credStore - To migrate all credentials.\
\n keyStore - To migrate all keystores.\
\n policyStore - To migrate all policies (system and app-specific, for all apps). If destination is non-existant or empty XML file, then the serviceInstance for destination in configuration file should have property createNew set as true.\
\n globalPolicies  - To migrate just system policies. If destination is non-existant or empty XML file, then the serviceInstance for destination in configuration file should have property createNew set as true.\
\n appPolicies  - To migrate just application-specific policies, for one application. If destination is non-existant or empty XML file, then the serviceInstance for destination in configuration file should have property createNew set as true.\
\n folderCred  - To migrate just one credential folder.\
\n stripeKeyStore  - To migrate just one keystore stripe.\
\n auditStore - To migrate audit store components.\
\nconfigFile= Location of a jps-config.xml file relative to the directory where the command is run, must include two jps-contexts, which are referenced by the arguments src and dst.\
\nsrc=This argument specifies the name of a jps-context in the configuration file jps-config.xml passed to the argument configFile.\
\ndst=This argument specifies the name of a jps-context in the configuration file jps-config.xml passed to the argument configFile.\
\ndstLdifFile=Location where an ldif file need to be created while migrating identities and the destination store is of type OID or Embedded LDAP.\
\nsrcApp=This argument specifies the name of the application whose policies are being migrated. This name is also known as the application stripe.\
\ndstApp=This argument specifies the name of the application whose policies are being written by the migration. This name is also known as the application stripe. Optional. If unspecified, defaults to the name passed to srcApp.\
\nsrcFolder=This argument specifies the folder from where credentials are migrated. Optional, If unspecified, the credential store is assumed to have only one folder and the value of this argument defaults to the name of that folder.\
\ndstFolder=This argument specifies the folder to where the source credentials are migrated. Optional, if unspecified, it defaults to the folder passed to srcFolder.\
\nsrcStripe=This argument specifies the stripe from where keystores are migrated. Optional, If unspecified, the keystore service is assumed to have only one stripe and the value of this argument defaults to the name of that stripe.\
\ndstStripe=This argument specifies the stripe to where the source keystores are migrated. Optional, if unspecified, it defaults to the stripe passed to srcStripe.\
\nsrcConfigFile=This argument specifies the location of an alternate configuration file, and it is used in two special cases - (1) when credentials are not configured in the file passed to configFile (2) when domain of source keystore is different from that of destination keystore. Optional. If unspecified, defaults to the value passed to configFile; if specified, the value passed to configFile is ignored.\
\noverWrite=This argument when set to true, when type is folderCred, overwrites any existing credential in the destination credential store if source store defines a different value. When type is appPolicies, the policies specific to the destination application are replaced by the policies from the source application. When type is stripeKeyStore, overwrites any existing keystore in the destination keystore service. When type is auditStore, overwrites any existing component definition in the destination audit store. If unspecified, defaults to false.\
\nmigrateIdStoreMapping=This argument when set to false, is used for migrating only application policies ignoring the identity store artifacts. If unspecified, defaults to true.\
\npreserveAppRoleGuid=While migrating policies containing application role definition, if this argument is set to true, the GUIDs for application roles defined in the source repository will be migrated. If unspecified, defaults to false.\
\nmode=This argument specifies the mode in which you want to migrate the application policies or system policies. This is an optional argument. If the mode is specified as lax,then it migrates the application policies or system policies even if there are exceptions by logging a warning.If unspecified, it defaults to normal behaviour.\
\nreportFile=optional, after migration of type:appPolicies, if specified creates a new report file with the value and generates a report in it.\n

#########################################################################################################################################################################################

reassociateSecurityStore_shortDescription=\
Re-associate a policy, credential, audit and key store to a LDAP or database based provider.

reassociateSecurityStore_description=\
\nRe-associate a policy, credential, audit and key store to a LDAP or database based provider. It will change the configuration of PolicyStore, CredentialStore, AuditStore and KeyStore services to the specified LDAP or database. This command also migrates the policy data, credential data, audit metadata and key data to the ldap or database depending on the value of "join" parameter.\n

reassociateSecurityStore_example=\
\nreassociateSecurityStore(domain="mydomain",admin="cn=admin", password="<password>", ldapurl="ldap://myhost.example.com:3060", servertype="OID", jpsroot="cn=jpsTestNode") \
\nreassociateSecurityStore(domain="mydomain",admin="cn=admin", password="<password>", ldapurl="ldap://myhost.example.com:3060", servertype="OID", jpsroot="cn=jpsTestNode",join="true") \
\nreassociateSecurityStore(domain="farm", servertype="DB_ORACLE", jpsroot="cn=jpsroot", datasourcename="opssds") \
\nreassociateSecurityStore(domain="farm", servertype="DB_ORACLE", jpsroot="cn=jpsroot", datasourcename="opssds", admin="admin", password="<password>", join="true") \
\nreassociateSecurityStore(domain="farm", servertype="DB_ORACLE", jpsroot="cn=jpsroot", datasourcename="opssds", admin="admin", password="<password>", jdbcurl="jdbc:oracle:thin:@myhost.oracle.com:5521:testdb", dbUser="opss_user", dbPassword="mypass", jdbcdriver="oracle.jdbc.xa.client.OracleXADataSource", odbcdsn="odbcdsn", join="true") \
\nreassociateSecurityStore(domain="farm", servertype="DB_ORACLE", jpsroot="cn=jpsroot", datasourcename="opssds", admin="admin", password="<password>", join="true", keyFilePath="/tmp/myFileDirectory", keyFilePassword="<password>")\n

reassociateSecurityStore_syntax=\
\nreassociateSecurityStore(domain="<domain>", admin="<admin>", password="<password>", ldapurl="<ldapurl>", servertype="<servertype>", jpsroot="<jpsroot>"[,join="{true|false}",[ keyFilePath="<directory location>", keyFilePassword="<password>"]]) \
\nreassociateSecurityStore(domain="<domain>", servertype="<servertype>", jpsroot="<jpsroot>", datasourcename="<datasourcename>"[,admin="<admin>", password="<password>", jdbcurl="<jdbc URL string>", dbUser="<db user name>", dbPassword="<db user password>", jdbcdriver="<jdbc driver class name>", odbcdsn="<odbc dsn name>", join="{true|false}",[ keyFilePath="<directory location>", keyFilePassword="<password>"]]) \
\n domain= specify the domain in which the re-association has to take place\
\n admin= user name to connect to LDAP or to look up data source. This parameter is optional in case of database when data source is not secured\
\n password= password to connect to LDAP or to look up data source. This parameter is optional in case of database when data source is not secured\
\n ldapurl= URL which should be used to connect to the LDAP Server. The format is host:port\
\n servertype= the valid values for server type is OID or DB_ORACLE\
\n jpsroot= JPS root node\
\n join= This option when set to true, will configure PolicyStore, CredentialStore, AuditStore and KeyStore services to join with the existing jps policy, credential, audit and key stores in LDAP or database. This will only be a jps configuration change and there will not be any migration of credential data, policy data, audit metadata or key data to the joining store. This parameter is optional. If unspecified, it defaults to false\
\n datasourcename= JNDI name of the data source created on the application server. This parameter is required in case of database\
\n jdbcurl= JDBC URL string used in JSE mode to connect to database\
\n dbUser= Specify the name of the database user in the credential to be addedd to bootstrap cred store in JSE mode\
\n dbPassword= Specify the password of the database user in the credential to be added to bootstrap cred store in JSE mode\
\n jdbcdriver= The JDBC driver class used to connect to a specific database\
\n odbcdsn= the odbc DSN name used by C CSF API\
\n keyFilePath= Directory location where ewallet.p12 to be imported is present. Optional, only applicable when join="true". If specified keyFilePassword should also be specified.\
\n keyFilePassword= Password that was chosen while importing the key(s) to ewallet.p12. Optional only applicable when join="true" If specified keyFilePath should also be specified. 
#########################################################################################################################################################################################
upgradeSecurityStore_shortDescription=\
migrates identity store/ policy store/credential data from a one version based store to another version based store.

upgradeSecurityStore_description=\
\nmigrates identity store/ policy store/credential data from a one version based store to another version based store. The destination store could be of any type as defined by the context. Source store is defined by the file location or in case of oidPolicyStore, by a config file where the policy store is configured.

upgradeSecurityStore_example=\
\nThis command will migrate 10.1.3 xml identity store data to a 11.1.1.1.0 xml identity store.\
\nupgradeSecurityStore(type='xmlIdStore', jpsConfigFile='/folder/jps-config.xml', srcJaznDataFile='/jazn-data.xml', srcRealm='jazn.com', dst='destinationContext')\
\nThis command will migrate policies in 10.1.3 xml policy store to 11.1.1.1.0 policy store\
\nupgradeSecurityStore(type='xmlpolicyStore', jpsConfigFile='/folder/jps-config.xml', srcJaznDataFile='/jazn-data.xml', dst='destinationContext')\
\nThis command will migrate policies in 10.1.3 OID policy store to 11.1.1.1.0 policy store\
\nupgradeSecurityStore(type='oidPolicyStore', jpsConfigFile='/folder/jps-config.xml', srcJaznConfigFile='/jazn.xml', dst='destinationContext')\
\nThis command will migrate application policies in 11.1.1.1.0 based policy store to 11.1.1.2.0 based policy store.\
\nupgradeSecurityStore(type='xmlAppPolicies', srcApp='myApp', jpsConfigFile='/folder/jps-config.xml', srcJaznDataFile='/jazn-data.xml', dstJaznDataFile='/dst/jazn-data.xml', resourceTypeFile='/res/jazn-data.xml')\
\nThis command will upgrade application policies in 11.1.1.1.0 based policy store to 11.1.1.2.0 format.\
\nupgradeSecurityStore(type='appPolicies', srcApp='myApp', dst='myContext', jpsConfigFile='/folder/jps-config.xml').\

upgradeSecurityStore_syntax=\
\nupgrade XML identity store from 10.1.x to 11.1.1.1.0\
\n\tupgradeSecurityStore(type='xmlIdStore', jpsConfigFile='<filepath>',srcRealm='<realmname>', srcJaznDataFile='<dataFile>' [, dst='<destinationContext>'])\
\nupgrade XML policy store from 10.1.x to 11.1.1.1.0\
\n\tupgradeSecurityStore(type='xmlPolicyStore', jpsConfigFile='<filepath>', srcJaznDataFile='<dataFile>' [,dst='<destinationContext>'])\
\nupgrade OID policy store from 10.1.x to 11.1.1.1.0\
\n\tupgradeSecurityStore(type='oidPolicyStore', jpsConfigFile='<filepath>', srcJaznConfigFile='<configFile>' [,dst='<destinationContext>'])\
\nupgrade XML credential store from 10.1.x to 11.1.1.1.0\
\n\tupgradeSecurityStore(type='xmlCredStore', jpsConfigFile='<filepath>', srcJaznDataFile='<dataFile>', targetUsers='<realm1/user1,realm2/user2,..>' [,dst='<destinationContext>'])\n\
\nupgrade XML based application policies from 11.1.1.1.0 to 11.1.1.2.0\
\n\tupgradeSecurityStore(type='xmlAppPolicies', srcApp='<applicationName>', jpsConfigFile='<filepath>', srcJaznDataFile='<dataFile>', dstJaznDataFile='<dataFile>, resourceTypeFile='<dataFile>'])\n\
\n\tupgrade application policies in 11.1.1.1.0 based policy store to 11.1.1.2.0 format. The upgrade happens in-place and involves creation of resources corresponding to permissions\
\nupgradeSecurityStore(type='appPolicies' [, srcApp='<applicationName>', dst='<destinationContext>', jpsConfigFile='<filepath>').\
\ntype: valid values are xmlIdStore, xmlPolicyStore, oidPolicyStore, xmlCredStore, xmlAppPolicies.\
\njpsConfigFile: path of a valid jps configuration file where the destination store is configured. For xmlAppPolicies, this can be any jps configuration file.\
\nsrcJaznDataFile: path of a valid 10.1.x jazn data file, this is required only if the type is xmlIdStore, xmlPolicyStore or xmlCredStore. For xmlAppPolicies, this should be a 11 based jazn data file\
\nsrcJaznConfigFile: path of a valid 10.1.x jazn configuration file. This is required only if the type is oidPolicyStore.\
\nusers:comma seperated values of users supplied as <realm-name>/<username>. This is required only if the type is xmlCredStore.\
\ndst: Name of the jps context in jpsConfigFile where destination store is configured. This is optional, default jps context defined in jpsConfigFile is assumed if not defined. This parameter is not valid for type=xmlAppPolicies.\n\
\nsrcRealm: Realm name from which the identities need to be migrated. This is required only if the type is xmlIdstore.\n\
\ndstJaznDataFile: This parameter is required and valid only if type = xmlAppPolicies. It defines path of a valid 11 based jazn-data.xml file. If the file does not exist, a new file will be created.\n\
\nresourceTypeFile: This parameter is required and valid only if type = xmlAppPolicies. It defines path of a valid 11 based jazn-data.xml file containing the resource type definitions.\n\
\nsrcApp: This parameter is required and valid only if type = xmlAppPolicies or appPolicies. for type = xmlAppPolicies, It defines the application stripe name to be used while reading the policies fron srcJaznDataFile and resourceTypeFile. A new application Stripe with the same application name will be created in the dstJaznDataFile.

#########################################################################################################################################################################################
modifyBootStrapCredential_shortDescription=\
\nModifies the bootstrap credential of a policy store and credential store services configured in default JPS context. \

modifyBootStrapCredential_description=\
\nModifies the bootstrap credential of a policy store and credential store services configured in default JPS context. \n

modifyBootStrapCredential_example=\
\nmodifyBootStrapCredential(jpsConfigFile='/folder/jps-config.xml',username='username1', password='<password>') \n

modifyBootStrapCredential_syntax=\
\nmodifyBootStrapCredential(jpsConfigFile='<filepath>',username='<username>', password='<password>') \
\n jpsConfigFile = Path of the valid jps config file from which the context is read \
\n username= Distinguished name of the user.\
\n password= The password to be reset.\n

#########################################################################################################################################################################################
addBootStrapCredential_shortDescription=\
\nAdds a credential to the bootstrap credential store. \

addBootStrapCredential_description=\
\nAdds a credential to the bootstrap credential store. \n

addBootStrapCredential_example=\
\naddBootStrapCredential(jpsConfigFile='/folder/jps-config.xml', map='mapname', key='keyname', username='username1', password='<password>') \n

addBootStrapCredential_syntax=\
\naddBootStrapCredential(jpsConfigFile='<filepath>', map = '<mapname>', key = '<keyname>', username='<username>', password='<password>') \
\n jpsConfigFile = Path of the valid jps config file from which the context is read \
\n map = map name \
\n key = key name \
\n username= username part of the credential.\
\n password= password part of the credential.\n

#########################################################################################################################################################################################
listSecurityStoreInfo_shortDescription=\
\nLists store-type, location and user-name. \

listSecurityStoreInfo_description=\
\nLists store-type, location and user-name. \n

listSecurityStoreInfo_example=\
\nlistSecurityStoreInfo(domainConfig='/folder') \n

listSecurityStoreInfo_syntax=\
\nlistSecurityStoreInfo(domainConfig='<dirPath>') \
\n domainConfig = Absolute path of config directory where jps-config.xml and jps-config-jse.xmli are present. \n

#########################################################################################################################################################################################
patchPolicyStore_shortDescription=\
\nPatches the production policy store with the changes introduced by new version of the policy store shipped.\

patchPolicyStore_description=\
\nPatches the production policy store with the changes introduced by new version of the policy store shipped. If such changes conflict with the customizations done in production, the conflicts are reported for the user to make decisions and apply accordingly.\
\nThe command has to be run in two phases: analyze and apply.

patchPolicyStore_example=\
\nThe following invocation reports changes to in the directory /tmp/delta:\
\npatchPolicyStore(phase="analyze", baselineFile="/tmp/baseline/jazn-data.xml", patchFile="/tmp/new/jazn-data.xml", productionJpsConfig="/tmp/jps-config.xml", patchDeltaFolder="/tmp/delta", baselineAppStripe="theOldApplication", productionAppStripe="myApplication", patchAppStripe="theNewApplication", ignoreEnterpriseMembersOfAppRole="true")\n\
\nThe following invocation applies the changes found in /tmp/delta to the policies in the stripe myApp of the LDAP domain store pointed to by the default context in the file /tmp/jps-config.xml:\
\npatchPolicyStore(phase="apply", patchDeltaFolder="/tmp/delta", productionJpsConfig="/tmp/jps-config.xml", productionAppStripe="myApp")\

patchPolicyStore_syntax=\
\nIn analysis phase:\
\npatchPolicyStore(phase="analyze", baselineFile="<location of file>", patchFile="<location of file>", productionJpsConfig="<location of file>", patchDeltaFolder="<location of the folder>", baselineAppStripe="<name of application stripe>" [,productionAppStripe="<name of application stripe>"] [,patchAppStripe="<name of application stripe>"] [, silent={"true"|"false"}] [,ignoreEnterpriseMembersOfAppRole={"true"|false"} ][,reportFile="<location of report file to be created>"])\n\
\nIn apply phase:\
\npatchPolicyStore(phase="apply", patchDeltaFolder="<location of folder>", productionJpsConfig="<location of file>", productionAppStripe="<name of application stripe>")\
\nArgument:\
\nphase:Can be analyze or apply only.\
\nIn analyze phase, the command identifies:\
\na.	The changes that should be applied to the policy store caused by the introduction of new version of the policy store.\
\nb.	Any conflicts between those changes and the customizations performed on the policy store since it was installed.\
\nThese changes, categorized as safe or conflicting, are reported in the patchDeltaFolder.\
\nIn apply phase, the command applies just the following changes to the policy store:\
\na.	All safe changes.\
\nb.	All conflicting changes that have been resolved.\
\nbaselineFile: Specifies the location of the baseline jazn-data.xml, that is, the 11gR1 out-of-the-box XML policy store. Applicable only in analyze phase.\
\npatchFile: Specifies the location of the patch  jazn-data.xml, that is, the new released out-of-the-box XML policy store. Applicable only in analyze phase.\
\nproductionJpsConfig: Specifies the location of jps-config.xml file whose default context points to the production LDAP store.\
\npatchDeltaFolder: Specifies the location of the directory where the patch delta files are created.\
\nbaselineAppStripe: Specifies the application stripe name in baselineFile. Applicable only in analyze phase.\
\nproductionAppStripe: In apply phase, it specifies the application stripe name in production store; otherwise, if analyze phase, it defaults to the value of baselineAppStripe.\
\nnewlineAppStripe: Specifies the application stripe name in patchFile; if unspecified, it defaults to the value of baselineAppStripe.\
\nsilent: Specifies whether to apply changes when there are no conflicts found. Applicable only to analyze phase.\
\nignoreEnterpriseMembersOfAppRole: Boolean to indicate whether to generate the app role to enterprise relationship or not.\
\nreportFile: Specifies the location of the report file to be generated. Applicable only in analyze phase. Simple file name can be specied if file needs to be created in the patchdelta folder \
########################################################################################################################################################################################

listKeyStores_shortDescription=\
Lists the keystores in a stripe. \n

listKeyStores_description=\
\nLists all the keystores in a stripe. \n

listKeyStores_example=\
\nlistKeyStores(appStripe="system") \
\nlistKeyStores(appStripe="*") \n

listKeyStores_syntax=\
\nlistKeyStores(appStripe="<stripe>") \
\n appStripe= the name of the stripe whose keystores are listed.\n

########################################################################################################################################################################################

createKeyStore_shortDescription=\
Creates a new keystore. \n

createKeyStore_description=\
\nCreates a new keystore. \n

createKeyStore_example=\
\ncreateKeyStore(appStripe="system", name="keystore1", password="<password>", permission=true) \n

createKeyStore_syntax=\
\ncreateKeyStore(appStripe="<stripe>", name="<keystore>", password="<password>", permission=true|false) \
\n appStripe= the name of the stripe in which keystore is created.\
\n name= the name of the keystore.\
\n password= Password of the keystore.\
\n permission= true if keystore is protected by permission only, false if protected by both permission and password.\n

########################################################################################################################################################################################

deleteKeyStore_shortDescription=\
Deletes the named keystore. \n

deleteKeyStore_description=\
\nDeletes the named keystore. \n

deleteKeyStore_example=\
\ndeleteKeyStore(appStripe="system", name="keystore1", password="<password>") \n

deleteKeyStore_syntax=\
\ndeleteKeyStore(appStripe="<stripe>", name="<keystore>", password="<password>") \
\n appStripe= the name of the stripe in which keystore is deleted.\
\n name= the name of the keystore to be deleted.\
\n password= password of the keystore to be deleted.\n

########################################################################################################################################################################################

changeKeyStorePassword_shortDescription=\
Changes the password of a keystore. \n

changeKeyStorePassword_description=\
\nChanges the password of a keystore. \n

changeKeyStorePassword_example=\
\nchangeKeyStorePassword(appStripe="system", name="keystore2", currentpassword="<currentpassword>", newpassword="<newpassword>") \n

changeKeyStorePassword_syntax=\
\nchangeKeyStorePassword(appStripe="<stripe>", name="<keystore>", currentpassword="<currentpassword>", newpassword="<newpassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore whose password is changed.\
\n currentpassword= current keystore password.\
\n newpassword= new keystore password.\n

########################################################################################################################################################################################

generateKeyPair_shortDescription=\
Generates a key pair in a keystore. \n

generateKeyPair_description=\
\nGenerates a key pair in a keystore and wraps it in a demo CA signed certificate. \n

generateKeyPair_example=\
\ngenerateKeyPair(appStripe="system", name="keystore2", password="<password>", dn="cn=www.oracle.com", keysize="1024", alias="orakey", keypassword="<keypassword>") \n

generateKeyPair_syntax=\
\ngenerateKeyPair(appStripe="<stripe>", name="<keystore>", password="<password>", dn="<distinguishedname>", keysize="<keysize>", alias="<alias>", keypassword="<keypassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore where key pair is generated.\
\n password= the keystore password.\
\n dn= the distinguished name of the certificate wrapping the key pair.\
\n keysize= the key size.\
\n alias= the alias of the key pair entry.\
\n keypassword= the key password.\n

########################################################################################################################################################################################

generateSecretKey_shortDescription=\
Generates a symmetric key in a keystore. \n

generateSecretKey_description=\
\nGenerates a symmetric key in a keystore. \n

generateSecretKey_example=\
\n generateSecretKey(appStripe="system", name="keystore2", password="<password>", algorithm="AES", keysize="128", alias="seckey", keypassword="<keypassword>") \n

generateSecretKey_syntax=\
\ngenerateSecretKey(appStripe="<stripe>", name="<keystore>", password="<password>", algorithm="<algorithm>", keysize="<keysize>", alias="<alias>", keypassword="<keypassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore where symmetric key is generated.\
\n password= the keystore password.\
\n algorithm= the symmetric key algorithm.\
\n keysize= the key size.\
\n alias= the alias of the key entry.\
\n keypassword= the key password.\n

########################################################################################################################################################################################

listKeyStoreAliases_shortDescription=\
Lists the aliases in a keystore. \n

listKeyStoreAliases_description=\
\nLists the aliases in a keystore for a given type of entry. \n

listKeyStoreAliases_example=\
\nlistKeyStoreAliases(appStripe="system", name="keystore2", password="<password>", type="Certificate") \
\nlistKeyStoreAliases(appStripe="system", name="keystore2", password="<password>", type="TrustedCertificate") \
\nlistKeyStoreAliases(appStripe="system", name="keystore2", password="<password>", type="SecretKey") \
\nlistKeyStoreAliases(appStripe="system", name="keystore2", password="<password>", type="*") \n

listKeyStoreAliases_syntax=\
\nlistKeyStoreAliases(appStripe="<stripe>", name="<keystore>", password="<password>", type="<entrytype>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n type= the type of entry for which aliases are listed. Valid values are "Certificate", "TrustedCertificate", "SecretKey" or "*".\n

########################################################################################################################################################################################

changeKeyPassword_shortDescription=\
Changes the password for a key. \n

changeKeyPassword_description=\
\nChanges the password for a key. \n

changeKeyPassword_example=\
\nchangeKeyPassword(appStripe="system", name="keystore", password="<password>", alias="orakey", currentkeypassword="<currentkeypassword>", newkeypassword="<newkeypassword>") \n

changeKeyPassword_syntax=\
\nchangeKeyPassword(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", currentkeypassword="<currentkeypassword>", newkeypassword="<newkeypassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= name of the keystore.\
\n password= the keystore password.\
\n alias= alias of the key entry whose password is changed.\
\n currentkeypassword= the current key password.\
\n newkeypassword= the new key password.\n

########################################################################################################################################################################################

getKeyStoreCertificates_shortDescription=\
Gets the information about a certificate or trusted certificate. \n

getKeyStoreCertificates_description=\
\nGets the information about a certificate or trusted certificate. \n

getKeyStoreCertificates_example=\
\ngetKeyStoreCertificates(appStripe="system", name="keystore3", password="<password>", alias="orakey") \n

getKeyStoreCertificates_syntax=\
\ngetKeyStoreCertificates(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= the alias of the certificate, trusted certificate or certificate chain to be displayed.\n

########################################################################################################################################################################################

getKeyStoreSecretKeyProperties_shortDescription=\
Gets the secret key properties. \n

getKeyStoreSecretKeyProperties_description=\
\nGets the secret key properties like algorithm. \n

getKeyStoreSecretKeyProperties_example=\
\ngetKeyStoreSecretKeyProperties(appStripe="system", name="keystore3", password="<password>", alias="seckey", keypassword="<keypassword>") \n

getKeyStoreSecretKeyProperties_syntax=\
\ngetKeyStoreSecretKeyProperties(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", keypassword="<keypassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= the alias of the secret key whose properties are displayed.\
\n keypassword= the secret key password.\n

########################################################################################################################################################################################

exportKeyStoreCertificateRequest_shortDescription=\
Generates and exports a certificate request. \n

exportKeyStoreCertificateRequest_description=\
\nGenerates and exports a certificate request. \n

exportKeyStoreCertificateRequest_example=\
\nexportKeyStoreCertificateRequest(appStripe="system", name="keystore2", password="<password>", alias="orakey", keypassword="<keypassword>", filepath="/tmp/certreq.txt") \n

exportKeyStoreCertificateRequest_syntax=\
\n exportKeyStoreCertificateRequest(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", keypassword="<keypassword>", filepath="<absolute_file_path>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= alias of the key pair from which certifiate request is generated.\
\n keypassword= the key pair password.\
\n filepath= absolute path of the file where certificate request should be exported.\n

########################################################################################################################################################################################

exportKeyStoreCertificate_shortDescription=\
Exports a certificate, trusted certificate or certificate chain. \n

exportKeyStoreCertificate_description=\
\n Exports a certificate, trusted certificate or certificate chain. \n

exportKeyStoreCertificate_example=\
\nexportKeyStoreCertificate(appStripe="system", name="keystore2", password="<password>", alias="orakey", type="Certificate", filepath="/tmp/cert.txt") \n

exportKeyStoreCertificate_syntax=\
\n exportKeyStoreCertificate(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", type="<entrytype>", filepath="<absolute_file_path>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= alias of the entry to be exported.\
\n type= type of keystore entry to be exported. Valid values are "Certificate", "TrustedCertificate" or "CertificateChain".\
\n filepath= absolute path of the file where certificate, trusted certificate or certificate chain is exported.\n


########################################################################################################################################################################################

importKeyStoreCertificate_shortDescription=\
Imports a certificate, trusted certificate or certificate chain. \n

importKeyStoreCertificate_description=\
\nImports a certificate, trusted certificate or certificate chain. \n

importKeyStoreCertificate_example=\
\nimportKeyStoreCertificate(appStripe="system", name="keystore2", password="<password>", alias="orakey", keypassword="<keypassword>", type="Certificate", filepath="/tmp/cert.txt") \n

importKeyStoreCertificate_syntax=\
\n importKeyStoreCertificate(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", keypassword="<keypassword>", type="<entrytype>", filepath="<absolute_file_path>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= alias of the entry to be imported.\
\n keypassword= the key password of the newly imported entry.\
\n type= type of keystore entry to be imported. Valid values are "Certificate", "TrustedCertificate" or "CertificateChain".\
\n filepath= absolute path of the file from where certificate, trusted certificate or certificate chain is imported. Supported file format is PEM (BASE64).\n


########################################################################################################################################################################################

deleteKeyStoreEntry_shortDescription=\
Deletes a keystore entry. \n

deleteKeyStoreEntry_description=\
\nDeletes a keystore entry. \n

deleteKeyStoreEntry_example=\
\ndeleteKeyStoreEntry(appStripe="system", name="keystore2", password="<password>", alias="orakey", keypassword="<keypassword>") \n


deleteKeyStoreEntry_syntax=\
\n deleteKeyStoreEntry(appStripe="<stripe>", name="<keystore>", password="<password>", alias="<alias>", keypassword="<keypassword>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n alias= alias of the entry to be deleted.\
\n keypassword= the key password of the entry to be deleted.\n

########################################################################################################################################################################################

listExpiringCertificates_shortDescription=\
Lists expiring certificates and optionally renews them. \n

listExpiringCertificates_description=\
\nLists expiring certificates and optionally renews them. \n

listExpiringCertificates_example=\
\n listExpiringCertificates(days="365", autorenew=true) \n

listExpiringCertificates_syntax=\
\n listExpiringCertificates(days="<days>", autorenew=true|false) \
\n days= list certificats within these many days from expiration.\
\n autorenew= true for automatically renewing expiring certificates, false for only listing them.\n

########################################################################################################################################################################################

exportKeyStore_shortDescription=\
Exports a keystore to file. \n

exportKeyStore_description=\
\nExports a keystore to file. \n

exportKeyStore_example=\
\nexportKeyStore(appStripe="system", name="keystore2", password="<password>", aliases="orakey,seckey", keypasswords="<keypassword1>,<keypassword2>", type="JKS", filepath="/tmp/file.jks") \n

exportKeyStore_syntax=\
\n exportKeyStore(appStripe="<stripe>", name="<keystore>", password="<password>", aliases="<comma-separated-aliases>", keypasswords="<comma-separated-keypasswords>", type="<keystore-type>", filepath="<absolute_file_path>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n aliases= comma separated list of aliases to be exported.\
\n keypasswords= comma separated list of the key passwords corresponding to aliases.\
\n type= exported keystore type. Valid values are "JKS" or "JCEKS".\
\n filepath= absolute path of the file where keystore is exported.\n

########################################################################################################################################################################################

importKeyStore_shortDescription=\
Imports a keystore from file. \n

importKeyStore_description=\
\nImports a keystore from file. \n

importKeyStore_example=\
\nimportKeyStore(appStripe="system", name="keystore2", password="<password>", aliases="orakey,seckey", keypasswords="<keypassword1, keypassword2>", type="JKS", permission=true, filepath="/tmp/file.jks") \n

importKeyStore_syntax=\
\n importKeyStore(appStripe="<stripe>", name="<keystore>", password="<password>", aliases="<comma-separated-aliases>", keypasswords="<comma-separated-keypasswords>", type="<keystore-type>", permission=true|false, filepath="<absolute_file_path>") \
\n appStripe= the name of the stripe containing the keystore.\
\n name= the name of the keystore.\
\n password= the keystore password.\
\n aliases= comma separated aliases of the entries to be imported from file.\
\n keypasswords= comma separated passwords of the keys in file.\
\n type= Imported keystore type. Valid values are "JKS" or "JCEKS".\
\n filepath= absolute path of the keystore file to be imported.\n


#######################################################################################################################################################
createResource_shortDescription=\
Creates a Resource for a given resource name and resource type.

createResource_description=\
\nCreates a Resource for a given resource name and resource type.The referred resource type should have been created already in the policy store.\n

createResource_example=\
\ncreateResource(appStripe="PsApp",name="sampleresource",type="sampleRType",displayName="SampleResource",description="resource for a sample resource type")\n

createResource_syntax=\
\ncreateResource(appStripe="<application stripe id>",name="<resourceName>",type="<resourceType>"[,displayName="<displayName>",description="<description>"]) \
\n appStripe= name of the application stripe.\
\n name= name of the resource to be created.\
\n type= name of the resource type. \
\n displayName = display name of the resource (optional).\
\n description= description of the resource (optional).\n

############################################################################################################################################################
getResource_shortDescription=\
Prints the Resource of a given ResourceType. \

getResource_description=\
\nPrints the Resource of a given ResourceType. \n

getResource_example=\
\n getResource(appStripe="myApplication", name="LexPrinter",type="Printer") \n

getResource_syntax=\
\n getResource(appStripe="<application stripe name>", name="<resourceName>",type="<Name of the ResourceType>") \
\n appStripe= application stripe representing the application. \
\n name = Name of the Resource to be fetched. \
\n type = Name of the ResourceType for which the Resource has to be fetched.\n

############################################################################################################################################################################
deleteResource_shortDescription=\
Deletes the Resource of a given ResourceType. \

deleteResource_description=\
\nDeletes the resource and all the associated references  given a resource name and resource type. \n

deleteResource_example=\
\ndeleteResource(appStripe="myApplication", name="LexPrinter",type="Printer") \n

deleteResource_syntax=\
\n deleteResource(appStripe="<application stripe name>", name="<Name of the Resource>",type="<Name of the ResourceType>") \
\n appStripe= application stripe representing the application. \
\n name = Name of the Resource to be deleted. \
\n type = Name of the ResourceType.  \n

##########################################################################################################################################
##################################
listResources_shortDescription=\
Lists all the Resources of a given ResourceType. \

listResources_description=\
\n Lists all the resources of a given  ResourceType. If the ResourceType is not mentioned then it lists all the Resources for the application policy. \n

listResources_example=\
\n listResources(appStripe="myApplication",type="Printer") \n

listResources_syntax=\
\n listResources(appStripe="<application stripe name>"[,type="<Name of the ResourceType>"]) \
\n appStripe= application stripe representing the application. \
\n type = Name of the ResourceType (optional).  \n

##########################################################################################################################################
##################################
listResourceActions_shortDescription=\
Lists all the resource actions of a given Entitlement. \

listResourceActions_description=\
\n Lists all the resource actions of a given Entitlement. \n

listResourceActions_example=\
\n listResourceActions(appStripe="myApplication",entitlementName="sampleEntitlement") \n

listResourceActions_syntax=\
\n listResourceActions(appStripe="<application stripe name>",entitlementName="<Name of the Entitlement>") \
\n appStripe= application stripe representing the application. \
\n entitlementName = Name of the Entitlement .  \n

##########################################################################################################################################
##################################
createEntitlement_shortDescription=\
Creates an Entitlement for a given Resource. \

createEntitlement_description=\
\nCreates an Entitlement for a given Resource.\n

createEntitlement_example=\
\n createEntitlement(appStripe="PsApp",name="sampleESet",resourceName="sampleResource",resourceType="RType1",actions="read,write",displayName="SampleEntitlement",description="entitlement with sample resource.")\n

createEntitlement_syntax=\
\n createEntitlement(appStripe="<application stripe id>",name="<EntitlementName>",resourceName="<resourceName>",resourceType="<resourceType>"[,actions="<actions>",displayName="<displayName>",description= "<description>"]) \
\n appStripe= name of the application stripe.\
\n name= Name of the Entitlement to be created.\
\n resourceName= Name of the Resource that has to be a member of this entitlement set. \
\n resourceType = Name of the ResourceType. \
\n actions = Valid actions (optional) .\
\n displayName = display name of the Entitlement (optional).\
\n description= description of the Entitlement (optional).\n

##########################################################################################################################################
##################
getEntitlement_shortDescription=\
Prints the Entitlement of the given application stripe. \

getEntitlement_description=\
\nPrints the Entitlement of the given application stripe. \n

getEntitlement_example=\
\n getEntitlement(appStripe="myApplication", name="sampleESet") \n

getEntitlement_syntax=\
\n getEntitlement(appStripe="<application stripe name>", name="<Entitlement Name>") \
\n appStripe= application stripe representing the application. \
\n name = Name of the Entitlement to be fetched. \n

##########################################################################################################################################
##################################
deleteEntitlement_shortDescription=\
Deletes the given Entitlement . \

deleteEntitlement_description=\
\nDeletes the given Entitlement. \n

deleteEntitlement_example=\
\ndeleteEntitlement(appStripe="myApplication", name="sampleESet") \n

deleteEntitlement_syntax=\
\n deleteEntitlement(appStripe="<application stripe name>", name="<Name of the Entitlement >") \
\n appStripe= application stripe representing the application. \
\n name = name of the Entitlement to be deleted. \n

##########################################################################################################################################
##################################
listEntitlements_shortDescription=\
Lists all the Entitlements of the specified Resource and ResourceType. \

listEntitlements_description=\
\n Lists all the Entitlements of the specified Resource and ResourceType. If the Resource and ResourceType is not specified then it lists all the Entitlements of the application policy. \n

listEntitlements_example=\
\n listEntitlements(appStripe="myApplication",resourceTypeName="Printer",resourceName="LexPrinter") \n

listEntitlements_syntax=\
\n listEntitlements(appStripe="<application stripe name>"[,resourceTypeName="<Name of the ResourceType>",resourceName="<Name of the Resource>"]) \
\n appStripe= application stripe representing the application. \
\n resourceTypeName = Name of the ResourceType (optional).  \
\n resourceName = Name of the Resource (optional). \n


##########################################################################################################################################
##################################
addResourceToEntitlement_shortDescription=\
Adds Resource to Entitlement. \

addResourceToEntitlement_description=\
\n Adds Resource to Entitlement. \n

addResourceToEntitlement_example=\
\n addResourceToEntitlement(appStripe="myApplication",name="sampleESet",resourceName="LexPrinter",resourceType="RType1",actions="read,write") \n

addResourceToEntitlement_syntax=\
\n addResourceToEntitlement(appStripe="<application stripe name>",name="<Name of the Entitlement>",resourceName="<Name of the Resource>",resourceType="<Name of the ResourceType>",actions="<actions>") \
\n appStripe= application stripe representing the application. \
\n name = Name of the Entitlement.  \
\n resourceName = Name of the Resource. \
\n resourceType = Name of the ResourceType. \
\n actions = comma separated list of actions for this resource member. \n



##########################################################################################################################################
##################################
revokeResourceFromEntitlement_shortDescription=\
Revokes Resource from a Entitlement. \

revokeResourceFromEntitlement_description=\
\n Revokes Resource from a Entitlement. \n

revokeResourceFromEntitlement_example=\
\n revokeResourceFromEntitlement(appStripe="myApplication",name="sampleESet",resourceName="LexPrinter",resourceType="Printer",actions="read,write") \n

revokeResourceFromEntitlement_syntax=\
\n revokeResourceFromEntitlement(appStripe="<application stripe name>",name="<Name of the Entitlement>",resourceName="<Name of the Resource>",resourceType="<Name of the ResourceType>",actions="<actions>") \
\n appStripe= application stripe representing the application. \
\n name = Name of the Entitlement.  \
\n resourceName = Name of the Resource that needs to be revoked from this Entitlement. \
\n resourceType = Name of the Resource Type of the resource that needs to be revoked from this Entitlement. \
\n actions = comma separated list of actions for this resource member. \n


##########################################################################################################################################
##################################
grantEntitlement_shortDescription=\
Grant an Entitlement to a given principal who exists in the ID store. \

grantEntitlement_description=\
\n Grant an Entitlement to a given principal who exists in the ID store. \n

grantEntitlement_example=\
\n grantEntitlement(appStripe="myApplication",principalClass="com.sample.xyzprincipal",principalName="samplePrincipal",entitlementName="sampleESet") \n

grantEntitlement_syntax=\
\n grantEntitlement(appStripe="<application stripe name>",principalClass="<principalClass>",principalName="<principalName>",entitlementName="<entitlementName">) \
\n appStripe= application stripe representing the application. \
\n principalClass = Class Name of the grantee principal.  \
\n principalName = Name of the grantee principal. \
\n entitlementName = Name of the Entitlement. \n



##########################################################################################################################################
##################################
revokeEntitlement_shortDescription=\
Revoke Entitlement from a given principal who exists in the ID store. \

revokeEntitlement_description=\
\n Revoke Entitlement from a given principal who exists in the ID store. \n

revokeEntitlement_example=\
\n revokeEntitlement(appStripe="myApplication",principalClass="com.sample.xyzprincipal",principalName="samplePrincipal",entitlementName="sampleESet") \n

revokeEntitlement_syntax=\
\n revokeEntitlement(appStripe="<application stripe name>",principalClass="<principalClass>",principalName="<principalName>",entitlementName="<entitlementName>") \
\n appStripe= application stripe representing the application. \
\n principalClass = Class Name of the grantee principal.  \
\n principalName = Name of the grantee principal. \
\n entitlementName = Name of the Entitlement. \n

##########################################################################################################################################
##################################
listResourceTypes_shortDescription=\
Lists all the ResourceTypes for a given application stripe. \

listResourceTypes_description=\
\n Lists all the ResourceTypes for a given application stripe. \n

listResourceTypes_example=\
\n listResourceTypes(appStripe="myApplication") \n

listResourceTypes_syntax=\
\n listResourceTypes(appStripe="<application stripe name>") \
\n appStripe= application stripe representing the application. \n


##########################################################################################################################################
##################################

listAppStripes_shortDescription=\
\n Lists all the app stripes in a policy store configured in the config file. If the regular expression is mentioned, it lists all the app stripes matching the regular expression. If the config file is not give, then the command expects to be connected to the server.\n

listAppStripes_description=\
\n Lists all the app stripes in a policy store configured in the config file. If the regular expression is mentioned, it lists all the app stripes matching the regular expression. If the config file is not give, then the command expects to be connected to the server.\n

listAppStripes_example=\
\nlistAppStripes(configFile="jps-config.xml",regularExpression=".")\n

listAppStripes_syntax=\
listAppStripes([configFile="<Location of jps-config.xml file>" , regularExpression="<regularExpression>"])\
\n configFile= Location of the jps-config.xml file \
\n regularExpression= Regular Expression matching the name of the app stripe.\n

##########################################################################################################################################
##################################
upgradeOpss_shortDescription=\
\nUpgrade jps-config.xml and security stores \

upgradeOpss_description=\
\nUpgrade jps-config.xml and security stores \

upgradeOpss_example=\
\nupgradeOpss(jpsConfig="/config/jps-config.xml", jaznData="/upgrade/system-jazn-data.xml", auditStore="/upgrade/audit-store.xml", jdbcDriver="oracle.jdbc.driver.OracleDriver", url="jdbc:oracle:thin:@localhost:5521:testdb", user="opss", password="welcome", upgradeJseStoreType="true") \

upgradeOpss_syntax=\
\nupgradeOpss(jpsConfig="<full path of the old version jps config file>", jaznData="<full path of the new version OOTB JAZN data file>", [auditStore="<full path filename for OOTB audit-store.xml file>",  jdbcDriver="<jdbc driver>", url="<jdbc/ldap url>", user="<jdbc/ldap user>", password="<jdbc/ldap password>", upgradeJseStoreType=true|false] ) \
\n jpsConfig = full Path of the old version jps config file to be upgrade. \
\n jaznData = full path of the new version OOTB JAZN data file. \
\n auditStore = full path filename for OOTB audit-store.xml file. \
\n jdbcDriver = jdbc driver. \
\n url = jdbc/ldap url. \
\n user = jdbc/ldap user. \
\n password = jdbc/ldap password. \
\n upgradeJseStoreType = If true, upgrade jps-config-jse.xml to use same store type as jps-config.xml. \
###################################################################################################

keystoreCmdHelp=\
Keystore service commands. \n\n\
    svc.help('changeKeyPassword')   Changes the password for a key.\n\
    svc.help('changeKeyStorePassword')   Changes the password of a keystore.\n\
    svc.help('createKeyStore')   Creates a new keystore.\n\
    svc.help('deleteKeyStore')   Deletes the named keystore.\n\
    svc.help('deleteKeyStoreEntry')   Deletes a keystore entry.\n\
    svc.help('exportKeyStore')   Exports a keystore to file.\n\
    svc.help('exportKeyStoreCertificate')   Exports a certificate, trusted certificate or certificate chain.\n\
    svc.help('exportKeyStoreCertificateRequest')   Generates and exports a certificate request.\n\
    svc.help('generateKeyPair')     Generates a key pair in a keystore.\n\
    svc.help('generateSecretKey')   Generates a symmetric key in a keystore.\n\
    svc.help('getKeyStoreCertificates')   Gets the information about a certificate or trusted certificate.\n\
    svc.help('getKeyStoreSecretKeyProperties')   Gets the secret key properties.\n\
    svc.help('importKeyStore')   Imports a keystore from file.\n\
    svc.help('importKeyStoreCertificate')   Imports a certificate, trusted certificate or certificate chain.\n\
    svc.help('listExpiringCertificates')   Lists expiring certificates and optionally renews them.\n\
    svc.help('listKeyStoreAliases')   Lists the aliases in a keystore.\n\
    svc.help('listKeyStores')   Lists the keystores in a stripe.\n\n

##################################################################################################

listKeyStoresHelp=\
    Description: \n\
             Lists all the keystores in a stripe. \n\n\
    Syntax: \n\
            svc.listKeyStores(appStripe='<stripe>') \n\
               svc=the service command object obtained through a call to getOpssService() \n\
               appStripe= the name of the stripe whose keystores are listed.\n\n\
    Example: \n\
             svc.listKeyStores(appStripe='system') \n\
             svc.listKeyStores(appStripe='*')\n\n 

##################################################################################################

changeKeyPasswordHelp=\
    Description:\n\
             Changes the password for a key. \n\n\
    Syntax: \n\
            svc.changeKeyPassword(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', currentkeypassword='<currentkeypassword>', newkeypassword='<newkeypassword>') \n\
               svc=the service command object obtained through a call to getOpssService() \n\
               appStripe= the name of the stripe containing the keystore.\n\
               name= name of the keystore.\n\
               password= the keystore password.\n\
               alias= alias of the key entry whose password is changed.\n\
               currentkeypassword= the current key password.\n\
               newkeypassword= the new key password.\n\n \
    Example: \n\
             svc.changeKeyPassword(appStripe='system', name='keystore', password='<password>', alias='orakey', currentkeypassword='<currentkeypassword>', newkeypassword='<newkeypassword>') \n\n 

##################################################################################################

changeKeyStorePasswordHelp=\
    Description: \n\
              Changes the password of a keystore.\n\n\
    Syntax: \n\
            svc.changeKeyStorePassword(appStripe='<stripe>', name='<keystore>', currentpassword='<currentpassword>', newpassword='<newpassword>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore whose password is changed.\n\
                currentpassword= current keystore password.\n\
                newpassword= new keystore password\n\n\
    Example: \n\
             svc.changeKeyStorePassword(appStripe='system', name='keystore2', currentpassword='<currentpassword>', newpassword='<newpassword>' \n\n 

##################################################################################################

createKeyStoreHelp=\
  Description:\n\
            Creates a new keystore. \n\n\
    Syntax: \n\
            svc.createKeyStore(appStripe='<stripe>', name='<keystore>', password='<password>',permission=true|false) \n\
               svc=the service command object obtained through a call to getOpssService() \n\
               appStripe= the name of the stripe in which keystore is created.\n\
               name= the name of the keystore.\n\
               password= Password of the keystore. \n\
               permission= true if keystore is protected by permission only, false if protected by both permission and password.\n\n\
    Example: \n\
             svc.createKeyStore(appStripe='system', name='keystore1', password='<password>', permission=true) \n\n 

##################################################################################################

deleteKeyStoreHelp=\
  Description:\n\
            Deletes the named keystore. \n\n\
    Syntax: \n\
            svc.deleteKeyStore(appStripe='<stripe>', name='<keystore>', password='<password>') \n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe in which keystore is deleted.\n\
                name= the name of the keystore to be deleted.\n\
                password= password of the keystore to be deleted. \n\n\
    Example: \n\
             svc.deleteKeyStore(appStripe='system', name='keystore1', password='<password>') \n\n 

##################################################################################################

deleteKeyStoreEntryHelp=\
  Description:\n\
            Deletes a keystore entry. \n\n\
    Syntax: \n\
            svc.deleteKeyStoreEntry(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', keypassword='<keypassword>') \n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore. \n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= alias of the entry to be deleted. \n\
                keypassword= the key password of the entry to be deleted.\n\n\
    Example: \n\
             svc.deleteKeyStoreEntry(appStripe='system', name='keystore2', password='<password>', alias='orakey', keypassword='<keypassword>') \n\n 

##################################################################################################

exportKeyStoreHelp=\
  Description:\n\
            Exports a keystore to file. \n\n\
    Syntax: \n\
            svc.exportKeyStore(appStripe='<stripe>', name='<keystore>', password='<password>', aliases='<comma-separated-aliases>', keypasswords='<comma-separated-keypasswords>', type='<keystore-type>', filepath='<absolute_file_path>') \n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password. \n\
                aliases= comma separated list of aliases to be exported.\n\
                keypasswords= comma separated list of the key passwords correspo nding to aliases.\n\
                type= exported keystore type. Valid values are 'JKS' or 'JCEKS'.  \n\
                filepath= absolute path of the file where keystore is exported.\
n\n\
    Example: \n\
             svc.exportKeyStore(appStripe='system', name='keystore2', password='<password>', aliases='orakey,seckey', keypasswords='<keypassword1>,<keypassword2>', type='JKS',filepath='/tmp/file.jks') \n\n  
##################################################################################################

exportKeyStoreCertificateHelp=\
  Description:\n\
            Exports a certificate, trusted certificate or certificate chain.\n\n\
    Syntax: \n\
            svc.exportKeyStoreCertificate(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', type='<entrytype>', filepath='<absolute_file_path>')  \n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore. \n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= alias of the entry to be exported.\n\
                type= type of keystore entry to be exported. Valid values are 'Certificate', 'TrustedCertificate' or 'CertificateChain'. \n\
                filepath= absolute path of the file where certificate, trusted certificate or certificate chain is exported. \n\n\
    Example: \n\
             svc.exportKeyStoreCertificate(appStripe='system', name='keystore2', password='<password>', alias='orakey', type='Certificate', filepath='/tmp/cert.txt') \n\n 

##################################################################################################

exportKeyStoreCertificateRequestHelp=\
  Description:\n\
            Generates and exports a certificate request.\n\n\
    Syntax: \n\
            svc.exportKeyStoreCertificateRequest(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', keypassword='<keypassword>', filepath='<absolute_file_path>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= alias of the key pair from which certifiate request is generated.\n\
                keypassword= the key pair password.\n\
                filepath= absolute path of the file where certificate request should be exported. \n\n\
    Example: \n\
             svc.exportKeyStoreCertificateRequest(appStripe='system', name='keystore2', password='<password>', alias='orakey', keypassword='<keypassword>', filepath='/tmp/certreq.txt')  \n\n 

##################################################################################################

generateKeyPairHelp=\
  Description:\n\
            Generates a key pair in a keystore and wraps it in a demo CA signedcertificate.\n\n\
    Syntax: \n\
            svc.generateKeyPair(appStripe='<stripe>', name='<keystore>', password='<password>', dn='<distinguishedname>', keysize='<keysize>', alias='<alias>', keypassword='<keypassword>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore where key pair is generated.\n\
                password= the keystore password.\n\
                dn= the distinguished name of the certificate wrapping the key pair.\n\
                keysize= the key size.\n\
                alias= the alias of the key pair entry.\n\
                keypassword= the key password.\n\n\
    Example: \n\
             svc.generateKeyPair(appStripe='system', name='keystore2', password='<password>', dn='cn=www.oracle.com', keysize='1024', alias='orakey', keypassword='<keypassword>') \n\n 

##################################################################################################

generateSecretKeyHelp=\
  Description:\n\
            Generates a symmetric key in a keystore.\n\n\
    Syntax: \n\
            svc.generateSecretKey(appStripe='<stripe>', name='<keystore>', password='<password>', algorithm='<algorithm>', keysize='<keysize>', alias='<alias>', keypassword='<keypassword>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore where symmetric key is generated.\n\
                password= the keystore password.\n\
                algorithm= the symmetric key algorithm.\n\
                keysize= the key size.\n\
                alias= the alias of the key entry.\n\
                keypassword= the key password.\n\n\
    Example: \n\
             svc.generateSecretKey(appStripe='system', name='keystore2', password='<password>', algorithm='AES', keysize='128', alias='seckey', keypassword='<keypassword>') \n\n 

##################################################################################################

getKeyStoreCertificates=\
  Description:\n\
            Gets the information about a certificate or trusted certificate.\n\n\
    Syntax: \n\
            svc.getKeyStoreCertificates(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= the alias of the certificate, trusted certificate or certificate chain to be displayed.\n\n\
    Example: \n\
             svc.getKeyStoreCertificates(appStripe='system', name='keystore3', password='<password>', alias='orakey') \n\n 

##################################################################################################

getKeyStoreSecretKeyPropertiesHelp=\
  Description:\n\
            Gets the secret key properties like algorithm. \n\n\
    Syntax: \n\
            svc.getKeyStoreSecretKeyProperties(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', keypassword='<keypassword>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= the alias of the secret key whose properties are displayed.\n\
                keypassword= the secret key password.\n\n\
    Example: \n\
             svc.getKeyStoreSecretKeyProperties(appStripe='system', name='keystore3', password='<password>', alias='seckey', keypassword='<keypassword>')\n\n 

##################################################################################################

importKeyStoreHelp=\
  Description:\n\
            Imports a keystore from file. \
    Syntax: \n\
            svc.importKeyStore(appStripe='<stripe>', name='<keystore>', password='<password>', aliases='<comma-separated-aliases>', keypasswords='<comma-separated-keypasswords>', type='<keystore-type>', permission=true|false, filepath='<absolute_file_path>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                aliases= comma separated aliases of the entries to be imported from file.\n\
                keypasswords= comma separated passwords of the keys in file.\n\
                type= Imported keystore type. Valid values are 'JKS' or 'JCEKS'.\n\
                filepath= absolute path of the keystore file to be imported.\n\n\
    Example: \n\
             svc.importKeyStore(appStripe='system', name='keystore2', password='<password>', aliases='orakey,seckey', keypasswords='<keypassword1, keypassword2>', type='JKS', permission=true, filepath='/tmp/file.jks')\n\n 

##################################################################################################

importKeyStoreCertificateHelp=\
  Description:\n\
            Imports a certificate, trusted certificate or certificate chain.\n\n\
    Syntax: \n\
            svc.importKeyStoreCertificate(appStripe='<stripe>', name='<keystore>', password='<password>', alias='<alias>', keypassword='<keypassword>', type='<entrytype>', filepath='<absolute_file_path>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                alias= alias of the entry to be imported.\n\
                keypassword= the key password of the newly imported entry.\n\
                type= type of keystore entry to be imported. Valid values are 'Certificate', 'TrustedCertificate' or 'CertificateChain'.\n\
                filepath= absolute path of the file from where certificate, trusted certificate or certificate chain is imported. Supported file format is PEM (BASE64).\n\n\
     Example: \n\
              svc.importKeyStoreCertificate(appStripe='system', name='keystore2', password='<password>', alias='orakey', keypassword='<keypassword>', type='Certificate', filepath='/tmp/cert.txt') \n\n 

##################################################################################################

listExpiringCertificatesHelp=\
  Description:\n\
            Lists expiring certificates and optionally renews them.\n\n\
    Syntax: \n\
            svc.listExpiringCertificates(days='<days>', autorenew=true|false)\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                days= list certificats within these many days from expiration.\n\
                autorenew= true for automatically renewing expiring certificates, false for only listing them.\n\n\
    Example: \n\
             svc.listExpiringCertificates(days='365', autorenew=true)\n\n 

##################################################################################################

listKeyStoreAliases=\
  Description:\n\
            Lists the aliases in a keystore for a given type of entry.\n\n\
    Syntax: \n\
            svc.listKeyStoreAliases(appStripe='<stripe>', name='<keystore>', password='<password>', type='<entrytype>')\n\
               svc=the service command object obtained through a call to getOpssService() \n\
                appStripe= the name of the stripe containing the keystore.\n\
                name= the name of the keystore.\n\
                password= the keystore password.\n\
                type= the type of entry for which aliases are listed. Valid values are 'Certificate', 'TrustedCertificate', 'SecretKey' or '*'.\n\n\
    Example: \n\
             svc.listKeyStoreAliases(appStripe='system', name='keystore2', password='<password>', type='Certificate')\n\
             svc.listKeyStoreAliases(appStripe='system', name='keystore2', password='<password>', type='TrustedCertificate')\n\
             svc.listKeyStoreAliases(appStripe='system', name='keystore2', password='<password>', type='SecretKey')\n\
             svc.listKeyStoreAliases(appStripe='system', name='keystore2', password='<password>', type='*') \n\n 

############################################################################################################################################################################
createAttribute_shortDescription=\
Creates an attribute for a given application. \

createAttribute_description=\
\nCreates an attribute for a given application. Default attributes are not supported. \n

createAttribute_example=\
\ncreateAttribute(appStripe="myApplication", attributeName="MyAttribute", displayName="MyDisplayName", description="MyDescription", type="string", category="dynamic", isSingle="true") \n

createAttribute_syntax=\
\ncreateAttribute(appStripe="<application stripe name>", attributeName="<Name of the attribute>"[, displayName="<diplay name>"][, description="<description of the attribute>"], type="<class name of type>", category="<either 'Dynamic' or 'Resource'>"[, isSingle="<whether attribute is single valued or not>"])  \
\n appStripe = application stripe representing the application. \
\n attributeName = Name of the attribute to be created. \
\n displayName = Display name of this attribute. This is an optional parameter. \
\n description = Description for this attribute. This is an optional parameter. \
\n type = Fully qualified class name of the attribute's type. \
\n category = Attribute category. Either Dynamic or Resource. \
\n isSingle = Boolean variable indicating Whether the attribute is single valued or not. This is an optional parameter with default value as "true". \

############################################################################################################################################################################
deleteAttribute_shortDescription=\
Deletes an attribute for a given application. \

deleteAttribute_description=\
\nDeletes an attribute for a given application. \n

deleteAttribute_example=\
\ndeleteAttribute(appStripe="myApplication", attributeName="MyAttribute") \n

deleteAttribute_syntax=\
\ndeleteAttribute(appStripe="<application stripe name>", attributeName="<Name of the attribute>")  \
\n appStripe = application stripe representing the application. \
\n attributeName = Name of the attribute to be deleted. \

############################################################################################################################################################################
listAttributes_shortDescription=\
Lists the attributes present in a given application. \

listAttributes_description=\
\nLists the attributes present in a given application. \n

listAttributes_example=\
\nlistAttributes(appStripe="myApplication", hideBuiltIn="true") \n

listAttributes_syntax=\
\nlistAttributes(appStripe="<application stripe name>"[, hideBuiltIn="<whether to hide built in attributes>"])  \
\n appStripe = application stripe representing the application. \
\n hideBuiltIn = boolean value indicating whether to hide built in attributes. Its default value is true. \n

############################################################################################################################################################################
updateAttribute_shortDescription=\
Updates an attribute for a given application. \

updateAttribute_description=\
\nUpdates an attribute for a given application. Default attributes are not supported. \n

updateAttribute_example=\
\nupdateAttribute(appStripe="myApplication", attributeName="MyAttribute", displayName="MyDisplayName", description="MyDescription") \n

updateAttribute_syntax=\
\nupdateAttribute(appStripe="<application stripe name>", attributeName="<Name of the attribute>"[, displayName="<diplay name>"][, description="<description of the attribute>"])  \
\n appStripe = application stripe representing the application. \
\n attributeName = Name of the attribute to be created. \
\n displayName = Display name of this attribute. This is an optional parameter. \
\n description = Description for this attribute. This is an optional parameter. \

############################################################################################################################################################################
updateResourceType_shortDescription=\
Updates a ResourceType for a given application. \

updateResourceType_description=\
\nUpdates a ResourceType for a given application. \n

updateResourceType_example=\
\nupdateResourceType(appStripe="myApplication", resourceTypeName="Printer", displayName="PRINTER", description="A ResourceType representing a Printer", allowedActions="BWPrint,ColorPrint", delimiter=",", attributes="attr1,attr2", provider="Printer", matcher="com.printer.Printer", hierarchicalResource="true", resourceNameDelmiter="\") \n

updateResourceType_syntax=\
\nupdateResourceType(appStripe="<application stripe name>", resourceTypeName="<name of the resource type>"[, displayName="<diplay name>"][, description="<description of the resource type>"][, allowedActions="<allowed set of actions for ResourceType>"][, delimiter="<delimiter for actions>"][, attributes="<list of names of attributes>"][, provider="<provider of the ResourceType>"][, matcher="<matcher class for ResourceType>"][, hierarchicalResource="<flag showing whether the resource type supports hierarchical resources>"[, resourceNameDelimiter="<delimiter for names of hierarchical resources>"]])  \
\n appStripe= application stripe representing the application. \
\n resourceTypeName = Name of the ResourceType to be created. \
\n displayName = Display name of this ResourceType. \
\n description = Description for this ResourceType. \
\n allowedActions = Comma separated list of names of allowed actions(s) to be added/removed from the resource type. Actions prefixed with '-' will be removed from the list, whereas those without the prefix will be added to the list. This is an optional parameter. \
\n delimiter = Delimiter for the actions of the resource type. This is an optional parameter. If unspecified, the default delimiter is "," \
\n attributes = Comma separated list of attribute name(s) to be added/removed from the attribute set of the resource type. Attribute names prefixed with - will be removed from the list, whereas those without the prefix will be added to the list. This is an optional parameter. \
\n provider = Provider for this ResourceType. This is an optional parameter. \
\n matcher = Matcher class for this ResourceType. This is an optional parameter. \
\n hierarchicalResource = Flag showing whether the resource type supports hierarchical resources. It is optional parameter with default value false. \
\n resourceNameDelimiter = Character that is to be used as delimiter in names of hierarchical resources of this resource type. It is optional parameter with default value /. It should not be provided if parameter hierarchicalResource is not given true as value. \n

#######################################################################################################################################################
updateResource_shortDescription=\
Updates Resource with the given resource name and resource type.

updateResource_description=\
\n Updates Resource with the given resource name and resource type.\n

updateResource_example=\
\n updateResource(appStripe="PsApp",resourceName="sampleresource",type="sampleRType",displayName="SampleResource",description="resource for a sample resource type",attributes="singleValAttr:value;multiValAttr:value1,value2;-toRemoveAttr")\n

updateResource_syntax=\
\n updateResource(appStripe="<application stripe id>",resourceName="<resourceName>",type="<resourceType>"[,displayName="<displayName>"][,description="<description>"][,attributes="<list of attributes>"]) \
\n appStripe= name of the application stripe.\
\n name= name of the resource to be created.\
\n type= name of the resource type. \
\n displayName = display name of the resource (optional).\
\n description= description of the resource (optional).\
\n attributes = Semicolon separated list of attribute(s) to be added/removed from the attribute set of the resource. This is an optional parameter. Rules for writing an attribute are: (1) To add a single-valued attribute the format is <attribute name>:<value> (2) To add a multi-valued attribute the format is <attribute name>:<value 1>,<value 2>,...,<value n> (3) To remove an attribute the format is -<attribute name> \n 

############################################################################################################################################################################
createApplicationPolicy_shortDescription=\
Creates an application policy with the given name. \

createApplicationPolicy_description=\
\nCreates an application policy with the given name. \n

createApplicationPolicy_example=\
\ncreateApplicationPolicy(appStripe="myApplication") \n

createApplicationPolicy_syntax=\
\ncreateApplicationPolicy(appStripe="<application stripe name>")  \
\n appStripe = application stripe representing the application. \n

############################################################################################################################################################################
createPolicy_shortDescription=\
Creates a policy for a given application. \

createPolicy_description=\
\nCreates a policy for a given application. \n

createPolicy_example=\
\ncreatePolicy(appStripe="myApplication", policyName="MyPolicy", displayName="MyDisplayName", description="MyDescription", ruleExpression="rule1:grant: !(abc > -1162) && (c==2)&& (\\\"a String\\\" == aString)", resourceActions="resType1:res1(act1, act2),resType2:res2(act1)", principals="manager:com.example.MyPrincipal", obligations="ob1(attr1,str1:\\\"a String\\\"),ob2(a2:attr2)", semantic="or", createNonExistingResource="True") \n

createPolicy_syntax=\
\ncreatePolicy(appStripe="<application stripe name>", policyName="<Name of the policy>"[, displayName="<diplay name>"][, description="<description of the policy>"], ruleExpression="<rule expression to be evaluated for policy decision>"[, entitlements="<comma-separated permission set entry name(s)>"|resourceActions="<comma-separated list of resource action(s)>"][, principals="<comma-separated list of principals>"|codeSource="<code-source as a string>"][, obligations="<comma-separated list of obligations>"][, semantic="<policy semantic>"][, createNonExistingResource="<whether to create non-exiting resource>"])  \
\n appStripe = application stripe representing the application. \
\n policyName = Name of the policy to be created. \
\n displayName = Display name of this policy. This is an optional parameter. \
\n description = Description for this policy. This is an optional parameter. \
\n ruleExpression = Rule expression to be evaluated for policy decision. Rules for writing a ruleExpression: (1) ruleExpression begins with a name followed by a :, which is then followed by effect which can be either grant or deny. In case the rule has a condition to be evaluated, the effect is then followed by a : and an expression representing the condition. Expression is made of functions and attributes (2) All functions, including built in ones has to be specified as a name followed by an opening parentheses '(', a list of parameters and a closing parentheses ')'. The first parameter must be function or an attribute. (3) Attributes should be prefixed with a '$'. (4) Literal parameters are enclosed within '{}'. Their type will be interpreted based on the other argument's type. (5) Standard DataType boolean, int, string, date, time are supported directly. For custom DataType classname has to be specified. Standard functions such as equals are provided for these standard types. (6) Both dynamic and resource attribute can be used in rule condition, but if resource attribute is used, more than one resource type cannot be referred in permission of the policy. \
\n entitlements = Comma-separated permission set entry name(s). Should be present if and only if resActions is absent. \
\n resourceActions = Comma-separated list of resource action(s). Should be present if and only if entitlements is	absent. Rule for mentioning a resource action: Resource action is specified as an existing resource name followed by parenthesis containing a comma-separated list of valid actions for this resource.\
\n principals = Comma-separated list of principals. Should be present if and only if codeSource is absent. Rule for specifying principal:Principal is specified as a name followed by a : and a fully-qualified principal classname. \
\n codeSource = Code-source as a string. This is an optional parameter. It should be present if and only if principals are absent \
\n obligations = Comma-separated list of obligations. This is an optional parameter. Both resource and dynamic attribute can be used in obligation, but if resource attribute is used, permission in the policy cannot refer to more than one resource type. Rules for specifying an obligation: (1) Obligations is written as obligation name followed by a comma-separated list of obligation attributes within (). (2) If the assignment is a literal, it must be prefixed by a name followed by ':'. When assignment is an attribute, the name is optional. \
\n semantic = Policy semantic. It can either be and or or. It is an optional parameter with default value as "and". \
\n createNonExistingResource = Boolean flag indicating whether to create non-existent resource present in parameter resourceActions. \n 

############################################################################################################################################################################
updatePolicy_shortDescription=\
Updates a policy for a given application. \

updatePolicy_description=\
\nUpdates a policy for a given application. \n

updatePolicy_example=\
\nupdatePolicy(appStripe="myApplication", policyName="MyPolicy", displayName="MyDisplayName", description="MyDescription", ruleExpression="rule1: !(abc > -1162) && (c==2)&& (\\\"a String\\\" == aString)", resourceActions="-resType1:res1(act1, act2),resType2:res2(act1)", principals="admin:com.example.MyPrincipal", obligations="ob1(attr1,str1:\\\"a String\\\"),ob2(a2:attr2)", createNonExistingResource="True") \n

updatePolicy_syntax=\
\nupdatePolicy(appStripe="<application stripe name>", policyName="<Name of the policy>"[, displayName="<diplay name>"][, description="<description of the policy>"][, ruleExpression="<rule expression to be evaluated for policy decision>"]{, entitlements="<comma-separated permission set entry name(s)>"|resourceActions="<comma-separated list of resource action(s)>"}{, principals="<comma-separated list of principals>"|codeSource="<code-source as a string>"}[, obligations="<comma-separated list of obligations>"][, createNonExistingResource="<whether to create non-exiting resource>"])  \
\n appStripe = application stripe representing the application. \
\n policyName = Name of the policy to be updated. \
\n displayName = Display name of this policy. This is an optional parameter. \
\n description = Description for this policy. This is an optional parameter. \
\n ruleExpression = Rule expression to be evaluated for policy decision. Refer help for createPolicy for rules to mention ruleExpression.\
\n entitlements = Comma-separated permission set entry name(s). It is an optional parameter and it should not be present along with resActions. \
\n resourceActions = Comma-separated list of resource action(s). It is an optional parameter and it should not be present along with entitlements. Refer help for createPolicy for rule to mention resource action. To remove a resource action put a '-' sign just before the name of the resource type in the expression formed using the rules. \
\n principals = Comma-separated list of principals. It is an optional parameter and should not be present along\twith codeSource. To remove a principal, mention it with - followed by : and fully-qualified principal classname ( e.g -myprincipal:my.com.CustomPrincipal ). To add principals, use rule mentioned in help for createPolicy. \
\n codeSource = Code-source as a string. This is an optional parameter and should not be present along with principals. \
\n obligations = Comma-separated list of obligations. This is an optional parameter. Refer help for createPolicy for rules to mention obligation.\
\n createNonExistingResource = Boolean flag indicating whether to create non-existent resource present in parameter resourceActions. \n 

############################################################################################################################################################################
deletePolicy_shortDescription=\
Deletes a policy for a given application. \

deletePolicy_description=\
\nDeletes a policy for a given application. \n

deletePolicy_example=\
\ndeletePolicy(appStripe="myApplication", policyName="MyPolicy") \n

deletePolicy_syntax=\
\ndeletePolicy(appStripe="<application stripe name>", policyName="<Name of the policy>")  \
\n appStripe = application stripe representing the application. \
\n policyName = Name of the policy to be deleted. \n

############################################################################################################################################################################
listPolicies_shortDescription=\
Lists the policies present in a given application. \

listPolicies_description=\
\nLists the policies present in a given application. \n

listPolicies_example=\
\nlistPolicies(appStripe="myApplication") \n

listPolicies_syntax=\
\nlistPolicies(appStripe="<application stripe name>")  \
\n appStripe = application stripe representing the application. \n

############################################################################################################################################################################
migratePoliciesToXacml_shortDescription=\
Migrate policies from different policy stores such as XML, LDAP and DB to Xacml. \

migratePoliciesToXacml_description=\
\nMigrate Policies from a policy store to Xacml. \n

migratePoliciesToXacml_example=\
\nmigratePoliciesToXacml(src="srcContext",dst="dstContext",srcApp="PsTestApp",dstApp="PsTestApp_new",configFile="/test/jps-config.xml") \n

migratePoliciesToXacml_syntax=\
\nmigratePoliciesToXacml(src="<source context>",dst="<destination context>",srcApp="<Name of source application>"[,dstApp="<Name of destination application>"],configFile="<Loc of the configuration file>")  \
\n src = Name of the source context defined in configuration file. \
\n dst = Name of the destination context defined in configuration file. \
\n srcApp = Name of the source application which has to get migrated to xacml.\
\n dstApp = Name of the destination application. This is optional if not specified will use source application name during export of policies to XACML.\
\n configFile = Location of the configuration file in which the above contexts are defined. \n

############################################################################################################################################################################
exportEncryptionKey_shortDescription=\
Exports encryption key(s) from bootstrap wallet. \

exportEncryptionKey_description=\
\nExports encryption key(s) from bootstrap wallet to a file in a specified directory.\
The file ewallet.p12 gets created upon execution. The command requires a password to be chosen which is used to secure the ewallet.p12 file.\
The same password would be required to be presented while importing key from the ewallet.p12. \n

exportEncryptionKey_example=\
\nexportEncryptionKey(jpsConfigFile="/tmp/mydomain/config/fmwconfig/jps-config.xml", keyFilePath="/tmp/myEmptyDirectory", keyFilePassword="<any valid password>")

exportEncryptionKey_syntax=\
\nexportEncryptionKey(jpsConfigFile="<location of jps-config.xml file>", keyFilePath="<location of dir>", keyFilePassword="<password>")\
\n  jpsConfigFile = Location of the domain jps-config.xml file.\
\n  keyFilePath = Location of the directory where ewallet.p12 should be created.\
\n  keyFilePassword = A new password that should be used to secure ewallet.p12. This password should be remembered and presented when importing from same ewallet.p12. There is no password recovery mechanism if the password is forgotten.\n
#############################################################################################################################################################################
importEncryptionKey_shortDescription=\
Imports encryption key(s) to bootstrap wallet. \

importEncryptionKey_description=\
\nImports encryption key(s) to bootstrap wallet from ewallet.p12 file in a specified directory.\
The command requires you to present the password chosen while exporting to  ewallet.p12 file.\
The current key will be backed up and if required can be recovered using restoreEncryptionKey command.\
If import had been done earlier, the backup from earlier import will be destroyed.\

importEncryptionKey_example=\
\nimportEncryptionKey(jpsConfigFile="/tmp/mydomain/config/fmwconfig/jps-config.xml", keyFilePath="/tmp/myKeyFileDirectory", keyFilePassword="<file password>")

importEncryptionKey_syntax=\
\nimportEncryptionKey(jpsConfigFile="<location of jps-config.xml file>", keyFilePath="<location of dir>", keyFilePassword="<password>")\
\n  jpsConfigFile = Location of the domain jps-config.xml file.\
\n  keyFilePath = Location of the directory where ewallet.p12 is present.\
\n  keyFilePassword = The password that was chosen while importing the key(s) to ewallet.p12.\n 
#############################################################################################################################################################################
restoreEncryptionKey_shortDescription=\
Restores encryption key(s) backed up during import. \

restoreEncryptionKey_description=\
\nRestores encryption key(s) backed up during import.\
The current key(s) will be deleted and replaced by the backed up key(s)\

restoreEncryptionKey_example=\
\nrestoreEncryptionKey(jpsConfigFile="/tmp/mydomain/config/fmwconfig/jps-config.xml")

restoreEncryptionKey_syntax=\
\nrestoreEncryptionKey(jpsConfigFile="<location of jps-config.xml file>")\
\n  jpsConfigFile = Location of the domain jps-config.xml file.\n
##########################################################################################################################################################################
syncKeyStores_shortDescription=\
Synchronizes key stores from centralized repository to bootstrap key store. \

syncKeyStores_description=\
\nSynchronizes certain key stores from the centralized repository to \
 bootstrap key store. The key store(s) to be copied depends on the parameters \
 passed to this command.\

syncKeyStores_example=\
\nsyncKeyStores(componentType="wls")

syncKeyStores_syntax=\
\nsyncKeyStores(componentType="<type of component whose key stores are synced>")\
\n  componentType = Type of component whose key stores are synced. Valid value is "wls".\n
##########################################################################################################################################################################
updateTrustServiceConfig_shortDescription=\
Updates trust service provider configuration. \

updateTrustServiceConfig_description=\
\nUpdates trust service provider configuration. \

updateTrustServiceConfig_example=\
\nUpdates the embedded trust service provider configuration \
\n  updateTrustServiceConfig(providerName="trust.provider.embedded", propsFile="config.properties") \
\n  updateTrustServiceConfig(propsFile="config.properties") \

updateTrustServiceConfig_syntax=\
\nupdateTrustServiceConfig([providerName="<the proverde name>",] propsFile="<path of properties file>")\
\n  providerName = The name of the trust service provider. This is an optional parameter. If not specified, defaults to "trust.provider.embedded". \
\n  propsFile = The path of the properties file that specifies the provider configuration properties to be updated. If a property is not specified, it is not changed. If empty string is given as the value, this property is removed. \n 
##########################################################################################################################################################################
