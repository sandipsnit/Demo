<sdp_diaglet platform="hpux" product="DB10R1" set="A200DB10R1_hp" title="Oracle Database 10g R1 (10.1.0) Preinstall (HP-UX)" type="A">
<sdp_meta id="$Id: A200DB10R1_hp.xml,v 2.12 2012/07/27 09:08:37 mschenke Exp $" type="version"/>
<sdp_meta author="JCR" change="Updated OS Patches checks" date="20120724" type="history"/>
<sdp_content set="A200DB10R1_hp" title="Oracle Database 10g (10.1.0) Preinstall (HP-UX)" type="check">
<sdp_group>
<sdp_rule id="A00010" mode="VERIFY" name="OS Certified?">
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$OS_BIT,$OS_NAM,$OS_VER
if compare('eq',$OS_ARC,'PA-RISC')
{var $BOOK = 'Oracle Database 10g Installation Guide for HP-UX'
 call setHcveResult(check($OS_VER,\
  '^10\.20$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,\
                  'is not certified with Oracle Database 10g'),\
  '^11\.00$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,\
                  'is not certified with Oracle Database 10g'),\
  '^11\.11$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,$OS_BIT,'bit is',\
                  cond(expr('==',$OS_BIT,32),'not'),\
                  'certified with Oracle Database 10g'),\
  '^11\.23$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,$OS_BIT,'bit is',\
                  cond(expr('==',$OS_BIT,32),'not'),\
                  'certified with Oracle Database 10g'),\
  '^11\.31$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,$OS_BIT,'bit is',\
                  cond(expr('==',$OS_BIT,32),'not'),\
                  'certified with Oracle Database 10g'),\
             join(' ',$OS_NAM,$OS_ARC,'OS version not determinable')))
}
elsif compare('eq',$OS_ARC,'Itanium')
{var $BOOK = 'Oracle Database 10g Installation Guide for HP-UX Itanium'
 call setHcveResult(check($OS_VER,\
  '^11\.22$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,\
                  ' is not certified with Oracle Database 10g'),\
  '^11\.23$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,$OS_BIT,'bit is',\
                  cond(expr('==',$OS_BIT,32),'not'),\
                  'certified with Oracle Database 10g'),\
  '^11\.31$',join(' ',$OS_NAM,$OS_ARC,$OS_VER,$OS_BIT,'bit is',\
                  cond(expr('==',$OS_BIT,32),'not'),\
                  'certified with Oracle Database 10g'),\
             concat($OS_NAM,' ',$OS_ARC,' OS version not determinable')))
}
else
{var $BOOK = 'Oracle Database 10g Installation Guide for HP-UX'
 call setHcveResult(concat($OS_NAM,' is not certified'))
}
call setHcveVariable('$BOOK')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the correct version of HP-UX required for installing Oracle Database 10g.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum=" is certified" result="PASSED"><![CDATA[The correct version of HP-UX is installed on your server.]]></sdp_action>
<sdp_action condition='=~' minimum="Itanium|PA-RISC" result="FAILED" syntax="wiki"><![CDATA[!!SHOWSTOPPER!!
You do not have the correct version of HP-UX installed on your server. For the certified versions of HP-UX ${OS_ARC}, see the ${'BOOK} and My Oracle Support.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[!!SHOWSTOPPER!!
You do not have HP-UX installed on your server.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00020" mode="VERIFY" name="User in ``/etc/passwd``?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('r','/etc/passwd')),\
    'Can not read /etc/passwd',\
  grepFile('/etc/passwd',\
           concat('^',$usr = first(command('/usr/bin/id -nu')),':'),\
           'f'),\
    'userOK',\
    concat($usr,' not in /etc/passwd.')))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user name of the user who runs this script is in the ``/etc/passwd`` file.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="userOK" result="PASSED"><![CDATA[The ``/etc/passwd`` file contains the user. No action is required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``/etc/passwd`` file does not contain the user or else the file has no read permissions. Add the user to the ``/etc/passwd`` file if the user does not exist in the file. NIS-managed users are not recommended.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00030" mode="VERIFY" name="Group in ``/etc/group``?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('r','/etc/group')),\
    'Can not read /etc/group',\
  grepFile('/etc/group',concat('^',command('/usr/bin/id -ng'),':'),'f'),\
    'GroupOK',\
    'Group not in /etc/group'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the group to which the user belongs exists in the ``/etc/group`` file.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="GroupOK" result="PASSED"><![CDATA[The ``/etc/group`` file contains the group of the user. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[ALERT:
The ``/etc/group`` file does not contain the group. Add the group to the ``/etc/group`` file.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00040" mode="RECORD" name="Enter ORACLE_HOME">
<sdp_command default="$ORACLE_HOME" type="PROMPT" variable="$ORACLE_HOME"><![CDATA[Planned ORACLE_HOME location]]></sdp_command>
<sdp_description><![CDATA[This rule prompts the user for the planned Oracle home directory.]]></sdp_description>
</sdp_rule>
<sdp_rule id="A00050" mode="VERIFY" name="ORACLE_HOME Valid?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00040" minimum="RECORD" result="FAILED"><![CDATA[Requires an Oracle home.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
call setHcveResult(cond(\
  not(defined($ORACLE_HOME)),    'OHNotSpecified',\
  not(testDir('d',$ORACLE_HOME)),'OHnotvalid',\
  not(testDir('l',$ORACLE_HOME)),'OHexists',\
                                 'OHsymlink'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the Oracle home directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="OHexists|OHsymlink|OHNotSpecified" result="PASSED"><![CDATA[The Oracle home directory exists. No action required]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[ALERT:
There is something wrong with the Oracle home directory. Verify the following:
|*Return Value*|*Action*|
|OHnotvalid|Ensure that you provided the correct location or that the directory is created and then run this script again.|
|OHsymlink|ORACLE_HOME is a symbolic link.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00060" mode="VERIFY" name="O_H Permissions OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00040" minimum="RECORD" result="FAILED"><![CDATA[Requires an Oracle home.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
call setHcveResult(cond(\
  not(defined($ORACLE_HOME)),    'OHNotSpecified',\
  not(testDir('d',$ORACLE_HOME)),'OHNotExist',\
  not(testDir('r',$ORACLE_HOME)),'NoReadPerm',\
  not(testDir('w',$ORACLE_HOME)),'NoWritePerm',\
  not(testDir('x',$ORACLE_HOME)),'NoExecutePerm',\
                                 'CorrectPerms'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the user has the correct privileges to install Oracle Database 10g in the Oracle home directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="CorrectPerms|OHNotSpecified" result="PASSED"><![CDATA[The permissions for the Oracle home directory are correct. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NoReadPerm|Ensure that the user has read permissions for the Oracle home directory.|
|NoWritePerm|Ensure that the user has write permissions for the Oracle home directory.|
|NoExecutePerm|Ensure that the user has execute permissions for the Oracle home directory.|
|OHNotExist|The Oracle home directory does not exist. Create the ``ORACLE_HOME`` mount point and ensure that the permissions are set correctly (``chmod 755``).|
|OHNotSpecified|Specify ORACLE_HOME so that RDA can verify the Oracle home directory|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00070" mode="VERIFY" name="Umask Set to 022?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  expr('==','022',command('/usr/bin/umask')),'UmaskOK','UmaskNotOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``umask`` value is set correctly for installing Oracle Database 10g.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="UmaskOK" result="PASSED"><![CDATA[The ``umask`` value is set correctly for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The ``umask`` value is not set correctly. Set the ``umask`` to ``022`` before installing Oracle Database 10g. For more information, see the ${'BOOK}.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00080" mode="VERIFY" name="LDLIBRARYPATH Unset?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  defined(getEnv('LD_LIBRARY_PATH')),'IsSet','UnSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``LD_LIBRARY_PATH`` environment variable is not set.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="UnSet" result="PASSED"><![CDATA[The ``LD_LIBRARY_PATH`` environment variable is not set. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``LD_LIBRARY_PATH`` environment variable is set in your environment and must be unset before installing Oracle Database 10g.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00090" mode="VERIFY" name="SHLIB_PATH Unset?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  defined(getEnv('SHLIB_PATH')),'IsSet','UnSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``SHLIB_PATH`` environment variable is not set.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="UnSet" result="PASSED"><![CDATA[The ``SHLIB_PATH`` environment variable is not set. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``SHLIB_PATH`` environment variable is set in your environment and must be unset before installing Oracle Database 10g.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00100" mode="VERIFY" name="Other O_Hs in PATH?">
<sdp_command type="RDA"><![CDATA[var @pth = split(':',getEnv('PATH'))
loop $lin (grepFile(catFile('/var','opt','oracle','oratab'),'#|^$','v'))
{var $pat = concat('^',quote(replace(field(':',1,$lin),'\/+$')),'(\/.*)?$')
 if grep(@pth,$pat)
  return setHcveResult('OratabEntryInPath')
}
call setHcveResult('NoneFound')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``PATH`` variable does not contain any references to other Oracle home directories based on the ``/var/opt/oracle/oratab`` entries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NoneFound" result="PASSED"><![CDATA[The ``PATH`` variable does not contain any of the Oracle home directories found in the ``/var/opt/oracle/oratab`` file. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``PATH`` variable contains one or more references to the Oracle home directories found in the ``/var/opt/oracle/oratab`` file. Remove these references from the ``PATH`` variable before installing Oracle Database 10g.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00110" mode="VERIFY" name="oraInventory Permissions">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('f','/var/opt/oracle/oraInst.loc')),\
    'oraInventoryNotFound',\
  not(testFile('wr',$INV_LOC = \
    value(grepFile('/var/opt/oracle/oraInst.loc','^inventory_loc','f')))),\
    'oraInventoryNotOK',\
    'oraInventoryOK'))
call setHcveVariable('$INV_LOC')
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user installing Oracle Database 10g has sufficient privileges for the ``oraInventory`` directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="oraInventoryOK|oraInventoryNotFound" result="PASSED"><![CDATA[Either the user, who is logged in, has sufficient privileges for the ``oraInventory`` directory to install Oracle Database 10g or it is the first Oracle product to be installed on the system. In this case, the installer creates the ``oraInventory`` directory. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The user, who is logged in, cannot access (write) ``oraInventory`` while installing Oracle Database 10g. Verify that the user can write to the directory specified in the ``/var/opt/oracle/oraInst.loc`` file.
|*Return Value*|*Action*|
|oraInventoryNotOK|Ensure that the user has write permissions to ${`INV_LOC}.|
|oraInventoryNotFound|The ``/var/opt/oracle/oraInst.loc`` file was not found. This is not a problem if it is the first Oracle installation on the system.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00120" mode="VERIFY" name="Temp Adequate?">
<sdp_command type="RDA"><![CDATA[
var ($flg,$tmp,@tbl) = (true,{'/tmp','/tmp'})
loop $key ('TEMP','TMPDIR')
{if getEnv($key)
  var $tmp->{$key} = last
}
loop $key (keys(%tmp))
{if !testDir('d',$tmp->{$key})
  call push(@tbl,concat($key,' invalidDir'))
 else
 {if !testDir('w',$tmp->{$key})
   call push(@tbl,concat($key,' NoWrite'))
  if and($flg,expr('>=',get_df($tmp->{$key}),409600))
   var $flg = false
 }
}
if $flg
{loop $key (keys(%tmp))
  call push(@tbl,concat($key,' tooSmall'))
}
call setHcveParameter('RULE.A00120',$tmp)
call setHcveVariable('$TMPDIR')
var $TMPDIR = getEnv('TMPDIR','/var/tmp')
if expr('<',get_df($TMPDIR),204800)
 call push(@tbl,concat('TMPDIR lessThan200'))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'TempSpaceOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that there is sufficient space available for storing temporary files during the Oracle Database 10g installation.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="TempSpaceOK" result="PASSED"><![CDATA[There is sufficient temporary disk space available for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The temporary space is not configured correctly.
|*Return Value*|*Action*|
|/tmp invalidDir|ALERT - ``/tmp`` is not a valid directory. ``/tmp`` needs to be a directory.|
|/tmp NoWrite|ALERT - The user does not have write permissions to the ``/tmp`` directory.|
|/tmp tooSmall|ALERT - There is less than the needed 400 MB of free space in the ``/tmp`` directory.|
|TEMP invalidDir|ALERT - ``TEMP`` is set to ${`RULE.A00120.TEMP} in the environment; however, ${`RULE.A00120.TEMP} is an invalid directory. Take appropriate action.|
|TEMP NoWrite|ALERT - ``TEMP`` is set to ${`RULE.A00120.TEMP} in the environment; however, the user does not have write permissions to ${`RULE.A00120.TEMP}.|
|TEMP tooSmall|ALERT - ``TEMP`` is set to ${`RULE.A00120.TEMP} in the environment; however, ${`RULE.A00120.TEMP} has less than the required 400 MB of free space. Make sure your temporary space has at least 400 MB of free space.|
|TMPDIR invalidDir|ALERT - ``TMPDIR`` is set to ${`RULE.A00120.TMPDIR} in the environment; however, ${`RULE.A00120.TMPDIR} is an invalid directory. Take appropriate action.|
|TMPDIR NoWrite|ALERT - ``TMPDIR`` is set to ${`RULE.A00120.TMPDIR} in the environment; however, the user does not have write permissions to ${`RULE.A00120.TMPDIR}.|
|TMPDIR tooSmall|ALERT - ``TMPDIR`` is set to ${`RULE.A00120.TMPDIR} in the environment; however, ${`RULE.A00120.TMPDIR} has less than the required 400 MB of free space. Make sure your temporary space has at least 400 MB of free space.|
|TMPDIR lessThan200|ALERT - ${`TMPDIR} has less than the required 200 MB of free space. Make sure your ${`TMPDIR} has at least 200 MB of free space.|
Note: The ``runInstaller`` (OUI) uses or checks for temporary space by checking for the ``TEMP`` environment variable first, then the ``TMP`` environment variable, and finally the ``/tmp`` mount point.
%BR%The operating system also requires additional space by creating files under ``/tmp`` or using the ``TMPDIR`` environment variable if it finds it.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00130" mode="RECORD" name="Swap (in MB)">
<sdp_command type="RDA"><![CDATA[if !testFile('x','/usr/sbin/swapinfo')
 return setHcveResult('SwapNotDetermined')
var ($swp) = command('/usr/sbin/swapinfo -qm')
call setHcveResult(cond($swp,$swp,'SWAPNotSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule shows the amount of free swap space.]]></sdp_description>
</sdp_rule>
<sdp_rule id="A00140" mode="VERIFY" name="RAM (in MB)">
<sdp_command type="RDA"><![CDATA[if grepCommand('/usr/contrib/bin/machinfo','Memory\s*[=:]\s*(\d+)\s*MB','f1')
 call setHcveResult(last)
else
{var $mem = nvl(\
   field('\s+',6,grepFile('/var/adm/syslog/syslog.log','Physical','f')),\
   field('\s+',6,grepFile('/var/adm/syslog/OLDsyslog.log','Physical','f')),\
   field('\s+',1,grepCommand('/usr/sbin/dmesg','Physical:','f')),\
   cond(getSetting('NO_CSTM'),0,\
       expr('*',1024,match(grepCommand(\
         "/usr/bin/echo 'selall;info;wait;infolog;view;done' | /usr/sbin/cstm",\
         'Total Configured Memory','f'),'\:\s+(\d+)\s+MB'))),\
  0)
 call setHcveResult(expr('/',$mem,1024))
}
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that your system has sufficient physical memory to install Oracle Database 10g.]]></sdp_description>
<sdp_actions>
<sdp_action condition=">=" minimum="512" result="PASSED"><![CDATA[You have sufficient physical memory (MB) installed to install Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[ALERT:
You do not have sufficient physical memory (MB) in your system to install Oracle Database 10g.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00150" mode="VERIFY" name="SwapToRam OK?">
<sdp_dependencies>
<sdp_dependency condition="N" id="A00130" result="FAILED" value="SwapNotDetermined"><![CDATA[Requires swap size.]]></sdp_dependency>
<sdp_dependency condition=">" id="A00140" minimum="0" result="FAILED" value="RamNotDetermined"><![CDATA[Requires memory size.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $swp = "%A00130%"
var $mem = "%A00140%"
call setHcveResult(cond(expr('<',$swp,1000),  'InsufficientSwap',\
                        expr('<',$swp,$mem),  'SwapLessThanRam',\
                                              'SwapToRamOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the total amount of swap space is greater than or equal to the amount recommended by the installation guide: ''Oracle Database 10g Installation Guide for HP-UX'' for PA-RISC based systems or ''Oracle Database 10g Installation Guide for HP-UX Itanium'' for Itanium-based systems.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="SwapToRamOK" result="PASSED"><![CDATA[The amount of swap space meets the minimum requirement for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The amount of swap space is less than the amount recommended by the ${'BOOK}. Verify the requirements and adjust your system accordingly.
|*Return Value *|*Action*|
|SwapNotDetermined|ALERT: A Swap to Memory ratio cannot be determined because swap is not set up or you do not have execute permissions to determine swap.|
|SwapLessThanRam|ALERT: Swap space is less than the physical memory. Set swap space to at least the same size as the physical memory.|
|InsufficientSwap|ALERT: Oracle Database 10g requires at least 1 GB of swap space.|
|RamNotDetermined|ALERT: A Swap to Memory ratio cannot be determined because you do not have execute permissions to determine the physical memory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00160" mode="VERIFY" name="Disk Space OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00040" minimum="RECORD" result="FAILED"><![CDATA[Requires an Oracle home.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME,$OS_ARC
if !length($ORACLE_HOME)
 return setHcveResult('OHNotSpecified')
if !testDir('d',$ORACLE_HOME)
 return setHcveResult('OHNotValid')
var $dsk = expr('/',get_df($ORACLE_HOME),1024)
var $req = cond(compare('eq',$OS_ARC,'Itanium'),3700,3500)
call setHcveResult(cond(expr('>=',$dsk,$req),'DiskSpaceOK',\
                        expr('>=',$dsk,2500),'OnlySpaceForOne',\
                        expr('>=',$dsk,1500),'ClientOnly',\
                                             'NoSpace'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the amount of disk space in the Oracle home directory is sufficient for installing Oracle Database 10g.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="DiskSpaceOK|OHNotSpecified" result="PASSED"><![CDATA[The Oracle home directory has sufficient disk space to install Oracle Database 10g software, create a database, and install Companion CD products (3.5 GB). No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The Oracle home directory has insufficient disk space for installing any type of Oracle Database 10g architecture. Verify the specifications.
|*Return Value*|*Action*|
|OnlySpaceForOne|${`ORACLE_HOME} has sufficient free disk space to install the Oracle Database 10g software (2.5 GB) but not enough space to create a database (3.5 GB for PA-RISC-based systems and 3.7 GB for Itanium-based systems).|
|ClientOnly|${`ORACLE_HOME} has sufficient free disk space to perform a client installation only (1.5 GB).|
|NoSpace|${`ORACLE_HOME} has insufficient free disk space for an Oracle Database 10g installation.|
|OHNotValid|Disk space calculations cannot be performed because ${`ORACLE_HOME} is not a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00170" mode="VERIFY" name="Kernel Parameters OK?">
<sdp_dependencies>
<sdp_dependency id="A00140"/>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$OS_VER
var @tbl = ()
var $KSI_ALLOC_MAX_REQD   = 32768
var $MAX_THREAD_PROC_REQD = 256
var $MAXDSIZ_REQD         = 1073741824
var $MAXDSIZ_64BIT_REQD   = 2147483648
var $MAXSSIZ_REQD         = 134217728
var $MAXSSIZ_64BIT_REQD   = 1073741824
var $MAXUPRC_REQD         = 3687
var $MSGMAP_REQD          = 4098
var $MSGMNI_REQD          = 4096
var $MSGSEG_REQD          = 32767
var $MSGTQL_REQD          = 4096
var $NCSIZE_REQD          = 35840
var $NFILE_REQD           = 63488
var $NFLOCKS_REQD         = 4096
var $NINODE_REQD          = 34816
var $NKTHREAD_REQD        = 7184
var $NPROC_REQD           = 4096
var $SEMMNI_REQD          = 4096
var $SEMMNS_REQD          = 8192
var $SEMMNU_REQD          = 4092
var $SEMVMX_REQD          = cond(compare('eq',$OS_ARC,'Itanium'),32768,32767)
var $SHMMAX_REQD          = expr('*',%A00140%,1048576)
var $SHMMNI_REQD          = 512
var $SHMSEG_REQD          = 120
var $VPS_CEILING_REQD     = 64
if !or(loadCommand('/usr/sbin/kctune'),\
       loadCommand('/usr/sbin/kmtune'),\
       loadFile('/stand/system'))
 return setHcveResult('NoAccess')
var $KSI_ALLOC_MAX   = field('\s+',1,grepLastFile('^ksi_alloc_max\s','f'))
var $MAX_THREAD_PROC = field('\s+',1,grepLastFile('^max_thread_proc\s','f'))
var $MAXDSIZ         = field('\s+',1,grepLastFile('^maxdsiz\s','f'))
var $MAXDSIZ_64BIT   = field('\s+',1,grepLastFile('^maxdsiz_64bit\s','f'))
var $MAXSSIZ         = field('\s+',1,grepLastFile('^maxssiz\s','f'))
var $MAXSSIZ_64BIT   = field('\s+',1,grepLastFile('^maxssiz_64bit\s','f'))
var $MAXUPRC         = field('\s+',1,grepLastFile('^maxuprc\s','f'))
var $MSGMAP          = field('\s+',1,grepLastFile('^msgmap\s','f'))
var $MSGMNI          = field('\s+',1,grepLastFile('^msgmni\s','f'))
var $MSGSEG          = field('\s+',1,grepLastFile('^msgseg\s','f'))
var $MSGTQL          = field('\s+',1,grepLastFile('^msgtql\s','f'))
var $NCSIZE          = field('\s+',1,grepLastFile('^ncsize\s','f'))
var $NFILE           = field('\s+',1,grepLastFile('^nfile\s','f'))
var $NFLOCKS         = field('\s+',1,grepLastFile('^nflocks\s','f'))
var $NINODE          = field('\s+',1,grepLastFile('^ninode\s','f'))
var $NKTHREAD        = field('\s+',1,grepLastFile('^nkthread\s','f'))
var $NPROC           = field('\s+',1,grepLastFile('^nproc\s','f'))
var $SEMMNI          = field('\s+',1,grepLastFile('^semmni\s','f'))
var $SEMMNS          = field('\s+',1,grepLastFile('^semmns\s','f'))
var $SEMMNU          = field('\s+',1,grepLastFile('^semmnu\s','f'))
var $SEMVMX          = field('\s+',1,grepLastFile('^semvmx\s','f'))
var $SHMMAX          = field('\s+',1,grepLastFile('^shmmax\s','f'))
var $SHMMNI          = field('\s+',1,grepLastFile('^shmmni\s','f'))
var $SHMSEG          = field('\s+',1,grepLastFile('^shmseg\s','f'))
var $VPS_CEILING     = field('\s+',1,grepLastFile('^vps_ceiling\s','f'))

macro hx2dec
{var ($hex) = @arg
 var %tbl = ('0',0,'1',1,'2',2,'3',3,'4',4,'5',5,'6',6,'7',7,'8',8,'9',9,\
             'A',10,'B',11,'C',12,'D',13,'E',14,'F',15)
 var $res = 0
 loop $chr (split('',uc($hex)))
  var $res = expr('+',expr('*',$res,16),$tbl{$chr})
}

macro rpl_nam
{var ($str) = @arg

 var $cnt = 8
 while match($str,'\b([A-Za-z_]+)\b')
 {var ($nam) = last
  var $val = field('\s+',1,grepLastFile(concat('^',quote($nam),'\s'),'if'))
  var $str = replace($str,concat('\b',quote($nam),'\b'),\
                          concat('(',nvl($val, 0),')'),true)
  decr $cnt
  break !$cnt
 }
 return compute($str)
}

macro chk_min
{var (\@tbl,$nam,$ref,$val) = @arg
 if !defined($val)
 {call push(@tbl,concat('[',$nam,'] undef'))
  return
 }
 if match($val,'0x([\da-f]+)',true)
  var $val = hx2dec(last)
 if match($val,'\b[A-Za-z_]+\b')
 {var $val = rpl_nam($val)
  if !defined($val)
  {call push(@tbl,concat('[',$nam,'] too complex'))
   return
  }
 }
 if expr('<',$val,$ref)
  call push(@tbl,concat('[',$nam,'=',$val,'] too small'))
}

call chk_min(\@tbl,'KSI_ALLOC_MAX',$KSI_ALLOC_MAX_REQD,$KSI_ALLOC_MAX)
call chk_min(\@tbl,'MAX_THREAD_PROC',$MAX_THREAD_PROC_REQD,$MAX_THREAD_PROC)
call chk_min(\@tbl,'MAXDSIZ',$MAXDSIZ_REQD,$MAXDSIZ)
call chk_min(\@tbl,'MAXDSIZ_64BIT',$MAXDSIZ_64BIT_REQD,$MAXDSIZ_64BIT)
call chk_min(\@tbl,'MAXSSIZ',$MAXSSIZ_REQD,$MAXSSIZ)
call chk_min(\@tbl,'MAXSSIZ_64BIT',$MAXSSIZ_64BIT_REQD,$MAXSSIZ_64BIT)
call chk_min(\@tbl,'MAXUPRC',$MAXUPRC_REQD,$MAXUPRC)
call chk_min(\@tbl,'NCSIZE',$NCSIZE_REQD,$NCSIZE)
call chk_min(\@tbl,'NFLOCKS',$NFLOCKS_REQD,$NFLOCKS)
call chk_min(\@tbl,'NINODE',$NINODE_REQD,$NINODE)
call chk_min(\@tbl,'NKTHREAD',$NKTHREAD_REQD,$NKTHREAD)
call chk_min(\@tbl,'NPROC',$NPROC_REQD,$NPROC)
if !match($OS_VER,'^11\.31$')
{call chk_min(\@tbl,'NFILE',$NFILE_REQD,$NFILE)
 call chk_min(\@tbl,'MSGMAP',$MSGMAP_REQD,$MSGMAP)
 call chk_min(\@tbl,'MSGSEG',$MSGSEG_REQD,$MSGSEG)
}
call chk_min(\@tbl,'MSGMNI',$MSGMNI_REQD,$MSGMNI)
call chk_min(\@tbl,'MSGTQL',$MSGTQL_REQD,$MSGTQL)
call chk_min(\@tbl,'SEMMNI',$SEMMNI_REQD,$SEMMNI)
call chk_min(\@tbl,'SEMMNS',$SEMMNS_REQD,$SEMMNS)
call chk_min(\@tbl,'SEMMNU',$SEMMNU_REQD,$SEMMNU)
call chk_min(\@tbl,'SEMVMX',$SEMVMX_REQD,$SEMVMX)
call chk_min(\@tbl,'SHMMAX',$SHMMAX_REQD,$SHMMAX)
call chk_min(\@tbl,'SHMMNI',$SHMMNI_REQD,$SHMMNI)
call chk_min(\@tbl,'SHMSEG',$SHMSEG_REQD,$SHMSEG)
call chk_min(\@tbl,'VPS_CEILING',$VPS_CEILING_REQD,$VPS_CEILING)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'KernelOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the kernel parameters are set according to the installation guide: ''Oracle Database 10g Installation Guide for HP-UX'' for PA-RISC based systems or ''Oracle Database 10g Installation Guide for HP-UX Itanium'' for Itanium based systems.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="KernelOK" result="PASSED" syntax="wiki"><![CDATA[The kernel parameters are set according to the ${'BOOK}. No action required.]]></sdp_action>
<sdp_action condition="==" minimum="NoAccess" result="FAILED" syntax="wiki"><![CDATA[You do not have access to ``/usr/sbin/kctune``, ``/usr/bin/kmtune``, or ``/stand/system``.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The kernel parameters are not set according to the installation guide. For the recommended values, see the ${'BOOK}.
|*Return Value*|*Action*|
|... undef|Some kernel parameters are not set. Ensure they are set.|
|... too complex|RDA cannot evaluate the expression associated with some kernel parameters.|
|... too small|Some kernel parameters are set less than the minimum requirement. Refer to the following minimum parameter values: ``ksi_alloc_max=${KSI_ALLOC_MAX_REQD:32768} max_thread_proc=${MAX_THREAD_PROC_REQD:256} maxdsiz=${MAXDSIZ_REQD:1073741824} maxdsiz_64bit=${MAXDSIZ_64BIT_REQD:2147483648} maxssiz=${MAXSSIZ_REQD:134217728} maxssiz_64bit=${MAXSSIZ_64BIT_REQD:1073741824} maxuprc=${MAXURPC_REQD:3687} msgmap=${MSGMAP_REQD:4098} msgmni=${MSGMNI_REQD:4096} msgseg=${MSGSEG_REQD:32767} msgtql=${MSGTQL_REQD:4096} ncsize=${NCSIZE_REQD:35840} nfile=${NFILE_REQD:63488} nflocks=${NFLOCKS_REQD:4096} ninode=${NINODE_REQD:34816} nkthread=${NKTHREAD_REQD:7184} nproc=${NPROC_REQD:4096} semmni=${SEMMNI_REQD:4096} semmns=${SEMMNS_REQD:8192} semmnu=${SEMMNU_REQD:4092} semvmx=${SEMVMX_RQD:32768} shmmax=${SHMMAX_REQD:size of RAM} shmmni=${SHMMNI_REQD:512} shmseg=${SHMSEG_REQD:120} vps_ceiling=${VPS_CEILING_REQD:64}``|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00180" mode="VERIFY" name="Got Software Tools?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
macro find_exe
{var (\@tbl,$exe,$ref) = @arg
 if findCommand($exe)
 {var $cmd = readLink(last,last)
  if !compare('eq',$cmd,$ref)
   call push(@tbl,concat(ucfirst($exe),'Elsewhere'))
 }
 else
  call push(@tbl,concat(ucfirst($exe),'Notfound'))
}
call find_exe(\@tbl,'ar','/usr/ccs/bin/ar')
call find_exe(\@tbl,'ld','/usr/ccs/bin/ld')
call find_exe(\@tbl,'nm','/usr/ccs/bin/nm')
call find_exe(\@tbl,'make','/usr/ccs/bin/make')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'ld_nm_ar_make_found'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the required assembly tools for the installation of Oracle Database 10g exist.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="ld_nm_ar_make_found" result="PASSED"><![CDATA[All required assembly tools needed for the Oracle Database 10g installation were found. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required assembly tools for the Oracle Database 10g installation were not found. Check your installation.
|*Return Value*|*Action*|
|ArElsewhere|``ar`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required.|
|LdElsewhere|``ld`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required.|
|NmElsewhere|``nm`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required|
|MakeElsewhere|``make`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00190" mode="VERIFY" name="ulimits OK?">
<sdp_command type="RDA"><![CDATA[var @tbl =()
macro get_ulimit_unl
{var (\@tbl,$nam) = @arg
 var $lmt = field('\s+',1,grepLastFile(concat('^',$nam),'if'))
 if !defined($lmt)
  call push(@tbl,concat($nam,'NotDefined'))
 elsif compare('ne',$lmt,'unlimited')
  call push(@tbl,concat($nam,'TooSmall'))
}
macro get_ulimit_val
{var (\@tbl,$nam,$ref) = @arg
 var $lmt = field('\s+',1,grepLastFile(concat('^',$nam),'if'))
 if !length($lmt)
  call push(@tbl,concat($nam,'NotDefined'))
 elsif and(compare('ne',$lmt,'unlimited'),expr('<',$lmt,$ref))
  call push(@tbl,concat($nam,'TooSmall'))
}
call loadCommand('/usr/bin/ulimit -a')
call get_ulimit_unl(\@tbl,'Time')
call get_ulimit_unl(\@tbl,'File')
call get_ulimit_unl(\@tbl,'Core')
call get_ulimit_val(\@tbl,'Data',1048576)
call get_ulimit_val(\@tbl,'Stack',32768)
call get_ulimit_val(\@tbl,'NoFiles',4096)
call get_ulimit_val(\@tbl,'Memory',2045680)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'ulimitOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the ``ulimit`` settings are adequate for installing Oracle Database 10g.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="ulimitOK" result="PASSED"><![CDATA[The ``ulimit`` settings are adequate for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Review the ``ulimit`` settings and check the recommended values from the ${'BOOK} before installing the software.
|*Return Value*|*Action*|
|TimeNotDefined|ulimit(TIME) is not defined.|
|TimeTooSmall|Increase the ulimit(TIME) to unlimited.|
|FileNotDefined|ulimit(FILE) is not defined.|
|FileTooSmall|Increase the ulimit(FILE) to unlimited.|
|DataNotDefined|ulimit(DATA) is not defined.|
|DataTooSmall|Increase the ulimit(DATA) to a minimum of 1048576.|
|StackNotDefined|ulimit(STACK) is not defined.|
|StackTooSmall|Increase the ulimit(STACK) to a minimum of 32768.|
|CoreNotDefined|ulimit(CORE) is not defined.|
|CoreTooSmall|Increase the ulimit(CORE) to unlimited.|
|NoFilesNotDefined|ulimit(NOFILES) is not defined.|
|NoFilesTooSmall|Increase the ulimit(NOFILES) to a minimum of 4096.|
|MemoryNotDefined|ulimit(MEMORY) is not defined.|
|MemoryTooSmall|Increase the ulimit(MEMORY) to a minimum of 2045680.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00200" mode="VERIFY" name="OS Packages?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="is certified" result="SKIPPED" value="NotCertified"><![CDATA[Not on a certified HP-UX]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_VER
macro check_bundle
{var ($bdl) = @arg
 var ($fnd) = grepLastFile($bdl,'if')
 if !$fnd
  return 0
 return 1
}
if compare('eq',$OS_VER,'11.11')
{if !loadCommand('/usr/sbin/swlist -l bundle')
  return setHcveResult('NoAccess')
 if and(check_bundle('GOLDBASE11i'),check_bundle('GOLDAPPS11i'))
  call push(@tbl,'OSpackagesFound')
 else
  call push(@tbl,'OSpackagesNotFound')
}
else
 call push(@tbl,'NotChecked')
call setHcveResult(join("\012",@tbl))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that all required OS packages are installed.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="OSpackagesFound" result="PASSED"><![CDATA[The required OS Patch Bundle is installed. No action required.]]></sdp_action>
<sdp_action condition="==" minimum="NotChecked" result="SKIPPED"><![CDATA[This check is not relevant for this context.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NoAccess|You do not have access to ``/usr/sbin/swlist``.|
|OSpackagesNotFound|For HP-UX 11i, install the June 2003 Quality Pack (Gold Patch Set) or later.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00210" mode="VERIFY" name="OS Patches?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="is certified" result="SKIPPED" value="NotCertified"><![CDATA[Not on a certified HP-UX]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$OS_VER
macro check_patch
{var (\@tbl,$pch,@pch) = @arg
 var $pat = concat('(',join('|',$pch,@pch),')')
 if !grepLastFile($pat,'if')
  call push(@tbl,concat($pch,' missing'))
}
if compare('eq',$OS_ARC,'Itanium')
{if !loadCommand('/usr/sbin/swlist -l fileset')
  return setHcveResult('NoAccess')
 if match($OS_VER,'^11\.23$')
 {call check_patch(\@tbl,'PHSS_29658','PHSS_30015','PHSS_30237','PHSS_30674',\
                         'PHSS_30779','PHSS_31816','PHSS_32213','PHSS_32502',\
                         'PHSS_34201','PHSS_35045','PHSS_35528','PHSS_36519',\
                         'PHSS_37552','PHSS_38526','PHSS_39293','PHSS_39897',\
                         'PHSS_41098','PHSS_41422','PHSS_42738')
  call check_patch(\@tbl,'PHSS_29660','PHSS_30230','PHSS_31085','PHSS_31087',\
                         'PHSS_31849','PHSS_31856','PHSS_32765','PHSS_33275',\
                         'PHSS_33349','PHSS_34040','PHSS_34353','PHSS_34440',\
                         'PHSS_34858','PHSS_34860','PHSS_35979','PHSS_36336',\
                         'PHSS_36342','PHSS_37201','PHSS_37492','PHSS_37947',\
                         'PHSS_38134','PHSS_39093','PHSS_39821','PHSS_40537',\
                         'PHSS_41178','PHSS_41491','PHSS_42043')
 }
 elsif match($OS_VER,'^11\.31$')
  call check_patch(\@tbl,'PHKL_35936','PHKL_36241','PHKL_36242','PHKL_36872',\
                         'PHKL_37185','PHKL_37452','PHKL_38174','PHKL_38275',\
                         'PHKL_38243','PHKL_38449','PHKL_38038','PHKL_38987',\
                         'PHKL_38949','PHKL_38651','PHKL_39747','PHKL_39401',\
                         'PHKL_40240','PHKL_40441','PHKL_40130','PHKL_40942',\
                         'PHKL_41005','PHKL_41355','PHKL_41588','PHKL_41972',\
                         'PHKL_41969','PHKL_42444')
 else
  call push(@tbl,'NotChecked')
}
else
{if match($OS_VER,'^11\.11$')
 {if !loadCommand('/usr/sbin/swlist -l fileset')
   return setHcveResult('NoAccess')
  call check_patch(\@tbl,'PHCO_28123','PHCO_30598','PHCO_31312','PHCO_31314',\
                         'PHCO_32397','PHCO_34207','PHCO_35520','PHCO_36562')
  call check_patch(\@tbl,'PHKL_29198','PHKL_32603')
  call check_patch(\@tbl,'PHNE_28476','PHNE_29825','PHNE_30367','PHNE_31091',\
                         'PHNE_33313','PHNE_33729','PHNE_34131','PHNE_34777',\
                         'PHNE_35453','PHNE_36576','PHNE_37259')
  call check_patch(\@tbl,'PHNE_28923','PHNE_32396','PHNE_33704','PHNE_34427')
  call check_patch(\@tbl,'PHSS_28871','PHSS_30049','PHSS_30966','PHSS_30968',\
                         'PHSS_30970','PHSS_32864','PHSS_33033','PHSS_33035',\
                         'PHSS_33037','PHSS_35379','PHSS_35381','PHSS_35383',\
                         'PHSS_35385','PHSS_37516','PHSS_37517','PHSS_38154',\
                         'PHSS_39077','PHSS_39749','PHSS_40549','PHSS_41214',\
                         'PHSS_41713','PHSS_42253')
  call check_patch(\@tbl,'PHSS_28880','PHSS_31221','PHSS_32573','PHSS_33263',\
                         'PHSS_33942','PHSS_33944','PHSS_33945','PHSS_33946')
  call check_patch(\@tbl,'PHCO_26331','PHCO_27958','PHCO_33205')
  call check_patch(\@tbl,'PHCO_29109','PHCO_29960','PHCO_30544','PHCO_33282',\
                         'PHCO_36229','PHCO_38307')
  call check_patch(\@tbl,'PHKL_25468','PHKL_30542','PHKL_40704')
  call check_patch(\@tbl,'PHKL_25842','PHKL_30288','PHKL_34311','PHKL_35145')
  call check_patch(\@tbl,'PHKL_25993')
  call check_patch(\@tbl,'PHKL_25994','PHKL_30216','PHKL_32061','PHKL_34309',\
                         'PHKL_35879','PHKL_36035','PHKL_40455')
  call check_patch(\@tbl,'PHKL_25995','PHKL_29826','PHKL_30317','PHKL_30541',\
                         'PHKL_30557','PHKL_32374','PHKL_32457','PHKL_34024',\
                         'PHKL_35091','PHKL_37753','PHKL_39133')
  call check_patch(\@tbl,'PHKL_26468','PHKL_27316','PHKL_30837','PHKL_34534',\
                         'PHKL_38299','PHKL_38430')
  call check_patch(\@tbl,'PHKL_28489')
 }
 else
  call push(@tbl,'NotChecked')
}
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'OSpatchesFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the OS patches required for the Oracle Database 10g installation.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="OSpatchesFound" result="PASSED"><![CDATA[All required OS patches are adequate. No action required.]]></sdp_action>
<sdp_action condition="==" minimum="NotChecked" result="SKIPPED"><![CDATA[This check is not relevant for this context.]]></sdp_action>
<sdp_action condition="==" minimum="NoAccess" result="FAILED" syntax="wiki"><![CDATA[You do not have access to ``/usr/sbin/swlist``.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required OS patches were not met or found. Review the recommended OS patches from the ${'BOOK} before installing the software.
Ensure that the following patches or superseding patches are installed.
|*Return Value*|*Action*|
|PHCO_26331 missing|PHCO_26331 (last known superseding patch PHCO_33205)|
|PHCO_28123 missing|PHCO_28123 (last known superseding patch PHCO_36562)|
|PHCO_29109 missing|PHCO_29109 (last known superseding patch PHCO_38307)|
|PHKL_25468 missing|PHKL_25468 (last known superseding patch PHKL_40704)|
|PHKL_25842 missing|PHKL_25842 (last known superseding patch PHKL_35145)|
|PHKL_25993 missing|PHKL_25993|
|PHKL_25994 missing|PHKL_25994 (last known superseding patch PHKL_40455)|
|PHKL_25995 missing|PHKL_25995 (last known superseding patch PHKL_39133)|
|PHKL_26468 missing|PHKL_26468 (last known superseding patch PHKL_38430)|
|PHKL_28489 missing|PHKL_28489|
|PHKL_29198 missing|PHKL_29198 (last known superseding patch PHKL_32603)|
|PHKL_35936 missing|PHKL_35936 (last known superseding patch PHKL_42444)|
|PHNE_28476 missing|PHNE_28476 (last known superseding patch PHNE_37259)|
|PHNE_28923 missing|PHNE_28923 (last known superseding patch PHNE_34427)|
|PHSS_28871 missing|PHSS_28871 (last known superseding patch PHSS_42253)|
|PHSS_28880 missing|PHSS_28880 (last known superseding patch PHSS_33946)|
|PHSS_29658 missing|PHSS_29658 (last known superseding patch PHSS_42738)|
|PHSS_29660 missing|PHSS_29660 (last known superseding patch PHSS_42043)|
The list of superseding patches may be incomplete and patches installed in this system may already include patches that supersede the requirements.]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00220" mode="VERIFY" name="Other OUI Up?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  grepCommand('/usr/bin/ps -ef','runInstaller','i'),'AnotherOUIup',\
                                                    'NoOtherOUI'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for another active ``runInstaller`` process on the system.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NoOtherOUI" result="PASSED"><![CDATA[No other ``runInstaller`` process is running. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Stop the other instance of ``runInstaller`` that is active on your system.]]></sdp_action>
</sdp_actions>
</sdp_rule>
</sdp_group>
</sdp_content>
</sdp_diaglet>
