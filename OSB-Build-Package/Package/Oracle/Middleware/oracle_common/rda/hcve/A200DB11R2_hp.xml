<sdp_diaglet platform="hpux" product="DB11R2" set="A200DB11R2_hp" title="Oracle Database 11g R2 (11.2.0) Preinstall (HP-UX)" type="A">
<sdp_meta type="version" id="$Id: A200DB11R2_hp.xml,v 1.18 2012/07/27 09:10:51 mschenke Exp $" header="$Header: /home/cvs/cvs/RDA_4/src/scripting/lib/hcve/A200DB11R2_hp.xml,v 1.18 2012/07/27 09:10:51 mschenke Exp $" version="1.0"/>
<sdp_meta author="JCR" change="Update Patches check" date="20120724" type="history"/>
<sdp_content set="A200DB11R2_hp" title="Oracle Database 11g R2 (11.2.0) Preinstall (HP-UX)" type="check">
<sdp_group>

<sdp_rule id="A00010" mode="VERIFY" name="OS Certified?">
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$OS_NAM,$OS_VER,$OS_BIT
var $BOOK = 'Oracle Database Installation Guide 11g Release 2 (11.2) for HP-UX'
call setHcveVariable('$BOOK')
call setHcveResult(check($OS_VER,\
  '^10\.20$',concat($OS_NAM,' ',$OS_VER,' is not certified with 11g R2 RDBMS'),\
  '^11\.00$',concat($OS_NAM,' ',$OS_VER,' is not certified with 11g R2 RDBMS'),\
  '^11\.11$',concat($OS_NAM,' ',$OS_VER,' is not certified with 11g R2 RDBMS'),\
  '^11\.23$',concat($OS_NAM,' ',$OS_VER,' is not certified with 11g R2 RDBMS'),\
  '^11\.31$',cond(expr('==',$OS_BIT,64),concat($OS_ARC,' ',$OS_NAM,' ',\
                  $OS_VER,' ',$OS_BIT,'-bit is certified with 11g R2 RDBMS'),\
               concat($OS_NAM,' ',$OS_VER,' ',$OS_ARC,\
                  ' is not certified with 11g R2 RDBMS')),\
  concat($OS_NAM,' OS version not determinable')))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the correct version of HP-UX required for installing Oracle Database 11g R2.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="is certified with 11g R2 RDBMS$" result="PASSED"><![CDATA[The correct version of HP-UX is installed on your server.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[!!SHOWSTOPPER!!
You do not have the correct version of HP-UX installed on your server. For the certified versions of HP-UX, refer to ${'BOOK} and My Oracle Support.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00020" mode="VERIFY" name="User in /etc/passwd?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('r','/etc/passwd')),\
    'Can not read /etc/passwd',\
  grepFile('/etc/passwd',\
           concat('^',$usr = first(command('/usr/bin/id -nu')),':'),\
           'f'),\
    'userOK',\
    concat($usr,' not in /etc/passwd.')))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user name of the user who runs this script is in the ``/etc/passwd`` file.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="userOK" result="PASSED"><![CDATA[The ``/etc/passwd`` file contains the user. No action is required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``/etc/passwd`` file does not contain the user or else the file has no read permissions. Add the user to the ``/etc/passwd`` file if the user does not exist in the file. NIS-managed users are not recommended.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00040" mode="VERIFY" name="Group in /etc/group?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('r','/etc/group')),\
    'Can not read /etc/group',\
  grepFile('/etc/group',concat('^',command('/usr/bin/id -ng'),':'),'f'),\
    'GroupOK',\
    'Group not in /etc/group'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the group to which the user belongs exists in the ``/etc/group`` file.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="GroupOK" result="PASSED"><![CDATA[The ``/etc/group`` file contains the group of the user. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Group not in /etc/group|ALERT: The ``/etc/group`` file does not contain the group. Add the group to the ``/etc/group`` file.|
|Can not read /etc/group|Ensure the user has read access to ``/etc/group``.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00050" mode="RECORD" name="Enter ORACLE_HOME">
<sdp_command default="$ORACLE_HOME" type="PROMPT" variable="$ORACLE_HOME"><![CDATA[Planned ORACLE_HOME location]]></sdp_command>
<sdp_description><![CDATA[This rule prompts the user for the planned Oracle home directory.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00060" mode="VERIFY" name="ORACLE_HOME Valid?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00050" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Needs the location of ORACLE_HOME.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
call setHcveResult(cond(\
  not(defined($ORACLE_HOME)),    'OHNotSpecified',\
  not(testDir('d',$ORACLE_HOME)),'OHnotvalid',\
  not(testDir('l',$ORACLE_HOME)),'OHexists',\
                                 'OHsymlink'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the Oracle home directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" maximum="N" minimum="OHexists|OHsymlink|OHNotSpecified" result="PASSED"><![CDATA[The Oracle home directory exists. No action required]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[ALERT:
There is something wrong with the Oracle home directory. Verify the following:
|*Return Value*|*Action*|
|OHnotvalid|Ensure that you provided the correct location or that the directory is created and then run this script again|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00070" mode="VERIFY" name="O_H Permissions OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00060" minimum="PASSED|RECORD" result="SKIPPED" value="ORACLE_HOME does not exist at the specified location"><![CDATA[Needs the ORACLE_HOME to exist.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
call setHcveResult(cond(\
  not(testDir('r',$ORACLE_HOME)),'NoReadPerm',\
  not(testDir('w',$ORACLE_HOME)),'NoWritePerm',\
  not(testDir('x',$ORACLE_HOME)),'NoExecutePerm',\
                                 'CorrectPerms'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the user has the correct privileges to install Oracle Database 11g R2 in the Oracle home directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" maximum="N" minimum="CorrectPerms|OHNotSpecified" result="PASSED"><![CDATA[The permissions for the Oracle home directory are correct. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NoReadPerm|Ensure that the install user has read permissions for the Oracle home directory|
|NoWritePerm|Ensure that the install user has write permissions for the Oracle home directory|
|NoExecutePerm|Ensure that the install user has execute permissions for the Oracle home directory|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id ="A00073" mode="VERIFY" name="EXTJOB User Known?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00050" minimum="PASSED|RECORD" result="SKIPPED"><![CDATA[Requires ORACLE_HOME to retrieve the external job user]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
if !?$ORACLE_HOME
 return setHcveResult('No ORACLE_HOME')
if !testDir('d',$ORACLE_HOME)
 return setHcveResult('Directory not found')
if !testFile('e',catFile($ORACLE_HOME,'rdbms','admin','externaljob.ora'))
 return setHcveResult('externaljob.ora not found')
if !grepFile(catFile($ORACLE_HOME,'rdbms','admin','externaljob.ora'),\
             '^run_user\s*=','f')
 return setHcveResult('Cannot extract the external job user')
$EXTJOB_USER = value(last)
setHcveVariable('$EXTJOB_USER')
call setHcveResult(concat('External job user is ',$EXTJOB_USER))
]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if an external job user already exists in the system.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="^External job user is" result="PASSED"><![CDATA[The external job user has been identified.]]></sdp_action>
<sdp_action condition="=~" minimum="No ORACLE_HOME|not found" result="SKIPPED"><![CDATA[No way to retrieve the external job user]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``$ORACLE_HOME\rdbms\admin\externaljob.ora`` file exists but the user cannot extract the EXTJOB user from it.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00074" mode="RECORD" name="EXTJOB User Name">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00073" minimum="SKIPPED|FAILED" result="SKIPPED" value="Known external job user"><![CDATA[Known external job user]]></sdp_dependency>
</sdp_dependencies>
<sdp_command default="extjob" type="PROMPT" variable="$EXTJOB_USER"><![CDATA[External job user name]]></sdp_command>
<sdp_description><![CDATA[This rule asks the name for the local user used for the external jobs.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00075" mode="VERIFY" name="EXTJOB User Defined?">
<sdp_command type="RDA"><![CDATA[import $EXTJOB_USER
call setHcveResult(cond(\
  grepCommand(concat('/usr/bin/id ',$EXTJOB_USER),'\buid=','fi'),'Defined',\
                                                                 'NotFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the EXTJOB user is present.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Defined" result="PASSED"><![CDATA[The EXTJOB user ${`EXTJOB_USER} is found. No action is required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The external job user ${`EXTJOB_USER} is not found. Create the user. NIS-managed users are not recommended.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00080" mode="VERIFY" name="oraInventory Permissions">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('f','/var/opt/oracle/oraInst.loc')),\
    'oraInventoryNotFound',\
  not(testFile('wr',$INV_LOC = \
    value(grepFile('/var/opt/oracle/oraInst.loc','^inventory_loc','f')))),\
    'oraInventoryNotOK',\
    'oraInventoryOK'))
call setHcveVariable('$INV_LOC')
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user installing Oracle Database 11g R2 has sufficient privileges for the ``oraInventory`` directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" maximum="N" minimum="oraInventoryOK|oraInventoryNotFound" result="PASSED"><![CDATA[Either the user, who is logged in, has sufficient privileges for the ``oraInventory`` directory to install Oracle Database 11g R2 or this is the first Oracle product to be installed on the system. In that case, the installer creates the ``oraInventory`` directory. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The user, who is logged in, cannot access (write) the ``oraInventory`` directory while installing Oracle Database 11g R2. Verify that the user can write to the directory specified in the ``/var/opt/oracle/oraInst.loc`` file.
|*Return Value*|*Action*|
|oraInventoryNotOK|Make sure that the install user has write permissions to ${INV_LOC}|
|oraInventoryNotFound|The ``/var/opt/oracle/oraInst.loc`` file was not found. This is not a problem if this is the first Oracle installation on the system.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00090" mode="VERIFY" name="Got Software Tools?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
macro find_exe
{var (\@tbl,$exe,$ref) = @arg
 if findCommand($exe)
 {var $cmd = readLink(last,last)
  if !compare('eq',$cmd,$ref)
   call push(@tbl,concat(ucfirst($exe),'Elsewhere'))
 }
 else
  call push(@tbl,concat(ucfirst($exe),'Notfound'))
}
call find_exe(\@tbl,'ar','/usr/ccs/bin/ar')
call find_exe(\@tbl,'ld','/usr/ccs/bin/ld')
call find_exe(\@tbl,'nm','/usr/ccs/bin/nm')
call find_exe(\@tbl,'make','/usr/ccs/bin/make')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'ld_nm_ar_make_found'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the required assembly tools for the installation of Oracle Database 11g R2 exist.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="ld_nm_ar_make_found" result="PASSED"><![CDATA[All required assembly tools for the  Oracle Database 11g R2 installation were found. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required assembly tools for the Oracle Database 11g R2 installation were not found. Check your installation.
|*Return Value*|*Action*|
|ArElsewhere|``ar`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required|
|LdElsewhere|``ld`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required|
|NmElsewhere|``nm`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required|
|MakeElsewhere|``make`` is found in ``PATH`` but not in ``/usr/ccs/bin`` or symbolically linked to ``/usr/ccs/bin`` as required|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00100" mode="VERIFY" name="Umask Set to 022?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  expr('==','022',command('/usr/bin/umask')),'UmaskOK','UmaskNotOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``umask`` value is set correctly for installing Oracle Database 11g R2.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="UmaskOK" result="PASSED"><![CDATA[The ``umask`` value is set correctly for installing Oracle Database 11g R2. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``umask`` value is not set correctly. Set the ``umask`` to 022 before installing Oracle Database 11g R2.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00110" mode="VERIFY" name="ulimits OK?">
<sdp_command type="RDA"><![CDATA[var @tbl =()
macro get_ulimit_unl
{var (\@tbl,$nam) = @arg
 var $lmt = field('\s+',1,grepLastFile(concat('^',$nam,'\('),'if'))
 if !defined($lmt)
  call push(@tbl,concat($nam,'NotDefined'))
 elsif compare('ne',$lmt,'unlimited')
  call push(@tbl,concat($nam,'TooSmall'))
}
macro get_ulimit_val
{var (\@tbl,$nam,$ref) = @arg
 var $lmt = field('\s+',1,grepLastFile(concat('^',$nam,'\('),'if'))
 if !length($lmt)
  call push(@tbl,concat($nam,'NotDefined'))
 elsif and(compare('ne',$lmt,'unlimited'),expr('<',$lmt,$ref))
  call push(@tbl,concat($nam,'TooSmall'))
}
call loadCommand('/usr/bin/ulimit -a')
call get_ulimit_unl(\@tbl,'Time')
call get_ulimit_unl(\@tbl,'File')
call get_ulimit_val(\@tbl,'Data',1048576)
call get_ulimit_val(\@tbl,'Stack',32768)
call get_ulimit_val(\@tbl,'Memory',2045680)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'ulimitOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the ``ulimit`` settings are adequate for installing Oracle Database 11g R2.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="ulimitOK" result="PASSED"><![CDATA[The ``ulimit`` settings are adequate for installing Oracle Database 11g R2. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Review the ``ulimit`` settings and check the recommended values from the ${'BOOK} before installing the software.
|*Return Value*|*Action*|
|TimeNotDefined|ulimit(TIME) is not defined|
|TimeTooSmall|Increase the ulimit(TIME) to unlimited|
|FileNotDefined|ulimit(FILE) is not defined|
|FileTooSmall|Increase the ulimit(FILE) to unlimited|
|DataNotDefined|ulimit(DATA) is not defined|
|DataTooSmall|Increase the ulimit(DATA) to a minimum of 1048576|
|StackNotDefined|ulimit(STACK) is not defined|
|StackTooSmall|Increase the ulimit(STACK) to a minimum of 32768|
|MemoryNotDefined|ulimit(MEMORY) is not defined|
|MemoryTooSmall|Increase the ulimit(MEMORY) to a minimum of 2045680|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00140" mode="VERIFY" name="LDLIBRARYPATH Unset?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  defined(getEnv('LD_LIBRARY_PATH')),'IsSet','UnSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``LD_LIBRARY_PATH`` environment variable is not set.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="UnSet" result="PASSED"><![CDATA[The ``LD_LIBRARY_PATH`` environment variable is not set. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``LD_LIBRARY_PATH`` environment variable is set in your environment and must be unset before installing Oracle Database 11g R2.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00170" mode="VERIFY" name="SHLIB_PATH Unset?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  defined(getEnv('SHLIB_PATH')),'IsSet','UnSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``SHLIB_PATH`` environment variable is not set.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="UnSet" result="PASSED"><![CDATA[The ``SHLIB_PATH`` environment variable is not set. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The ``SHLIB_PATH`` environment variable is set in your environment and must be unset before installing Oracle Database 11g R2.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00190" mode="RECORD" name="Enter JDK Home">
<sdp_command default="$JAVA_HOME" type="PROMPT" variable="$sdk"><![CDATA[JDK Home]]></sdp_command>
<sdp_description><![CDATA[This rule prompts the user for the JDK home.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00200" mode="VERIFY" name="JDK Version">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00190" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Needs the JDK home.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $sdk
if !testDir('d',$sdk)
 return setHcveResult('JDK home is missing')
var $SDK_BIN = catDir($sdk,'bin')
if !testDir('d',$SDK_BIN)
 return setHcveResult('JDK bin directory is missing')
if !grepDir($SDK_BIN,'^javac$')
 return setHcveResult('JDK compiler is missing')
var $ver = field('\s+',3,\
 command(concat(catCommand($SDK_BIN,'java'),' -fullversion 2>&1')))
var $ver = trim(replace($ver,'[\-\_]','.',true),'"')
if !match($ver,'^\d+')
 call setHcveResult(concat('[',$ver,'] not verified'))
elsif compare('valid',$ver,'6.5.05')
 call setHcveResult('Adequate')
elsif and(compare('valid',$ver,'5.0.15'),match($ver,'^5\.'))
 call setHcveResult('Adequate')
else
 call setHcveResult('Need HP-UX JDK 6.0.5 or HP-UX JDK 5.0.15 or later')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the installed JDK version is HP-UX JDK 6.0.5 or HP-UX JDK 5.0.15 or later. This is required for products such as Oracle Java Database Connectivity and Oracle Call Interface drivers.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The correct JDK version is installed.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need HP-UX JDK 6.0.5 or HP-UX JDK 5.0.15 or later|Install HP-UX JDK 6.0.5 or HP-UX JDK 5.0.15 or later|
|JDK bin directory is missing|Install full JDK package.|
|JDK compiler is missing|Install full JDK package.|
|... not verified|Cannot verify the version. Make sure HP-UX JDK 6.0.5 or HP-UX JDK 5.0.15 or later is installed.|
|JDK home is missing|Provide the correct location for JDK home.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00210" mode="VERIFY" name="Other O_Hs in PATH?">
<sdp_command type="RDA"><![CDATA[var @pth = split(':',getEnv('PATH'))
loop $lin (grepFile(catFile('/var','opt','oracle','oratab'),'#|^$','v'))
{var $pat = concat('^',quote(replace(field(':',1,$lin),'\/+$')),'(\/.*)?$')
 if grep(@pth,$pat)
  return setHcveResult('OratabEntryInPath')
}
call setHcveResult('NotFound')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the PATH variable does not contain any references to other Oracle home directories based on the /var/opt/oracle/oratab entries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="NotFound" result="PASSED"><![CDATA[The PATH does not contain any of the Oracle home directories in the ``/var/opt/oracle/oratab`` file. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The PATH variable contains one or more references to the Oracle home directories in the ``/var/opt/oracle/oratab`` file. Remove these references from the PATH variable before installing Oracle Database 11g R2.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00220" mode="VERIFY" name="Other OUI Up?">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  grepCommand('/usr/bin/ps -ef','runInstaller','i'),'AnotherOUIup',\
                                                    'NoOtherOUI'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for another active ``runInstaller`` process on the system.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="NoOtherOUI" result="PASSED"><![CDATA[No other ``runInstaller`` process is running. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Stop the other instance of ``runInstaller`` that is active on your system.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00230" mode="VERIFY" name="Temp Adequate?">
<sdp_command type="RDA"><![CDATA[
var ($flg,$tmp,@tbl) = (true,{'/tmp','/tmp'})
loop $key ('TMP','TMPDIR')
{if getEnv($key)
  var $tmp->{$key} = last
}
loop $key (keys(%tmp))
{if !testDir('d',$tmp->{$key})
  call push(@tbl,concat($key,' invalidDir'))
 else
 {if !testDir('w',$tmp->{$key})
   call push(@tbl,concat($key,' NoWrite'))
  if and($flg,expr('>=',get_df($tmp->{$key}),1048576))
   var $flg = false
 }
}
if $flg
{loop $key (keys(%tmp))
  call push(@tbl,concat($key,' tooSmall'))
}
call setHcveParameter('RULE.A00230',$tmp)
call setHcveVariable('$TMPDIR')
var $TMPDIR = getEnv('TMPDIR','/var/tmp')
if expr('<',get_df($TMPDIR),204800)
 call push(@tbl,concat('TMPDIR lessThan200'))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'TempSpaceOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that there is sufficient space available for storing temporary files during the Oracle Database 10g installation.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="TempSpaceOK" result="PASSED"><![CDATA[There is sufficient temporary disk space available for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The temporary space is not configured correctly.
|*Return Value*|*Action*|
|/tmp invalidDir|ALERT - ``/tmp`` is not a valid directory. ``/tmp`` needs to be a directory.|
|/tmp NoWrite|ALERT - The user does not have write permissions to the ``/tmp`` directory.|
|/tmp tooSmall|ALERT - There is less than the needed 400 MB of free space in the ``/tmp`` directory.|
|TMP invalidDir|ALERT - ``TMP`` is set to ${`RULE.A00230.TMP} in the environment; however, ${`RULE.A00230.TMP} is an invalid directory. Take appropriate action.|
|TMP NoWrite|ALERT - ``TMP`` is set to ${`RULE.A00230.TMP} in the environment; however, the user does not have write permissions to ${`RULE.A00230.TMP}.|
|TMP tooSmall|ALERT - ``TMP`` is set to ${`RULE.A00230.TMP} in the environment; however, ${`RULE.A00230.TMP} has less than the required 1 GB of free space. Make sure your temporary space has at least 1 GB of free space.|
|TMPDIR invalidDir|ALERT - ``TMPDIR`` is set to ${`RULE.A00230.TMPDIR} in the environment; however, ${`RULE.A00230.TMPDIR} is an invalid directory. Take appropriate action.|
|TMPDIR NoWrite|ALERT - ``TMPDIR`` is set to ${`RULE.A00230.TMPDIR} in the environment; however, the user does not have write permissions to ${`RULE.A00230.TMPDIR}.|
|TMPDIR tooSmall|ALERT - ``TMPDIR`` is set to ${`RULE.A00230.TMPDIR} in the environment; however, ${`RULE.A00230.TMPDIR} has less than the required 1 GB of free space. Make sure your temporary space has at least 1 GB of free space.|
|TMPDIR lessThan200|ALERT - ${`TMPDIR} has less than the required 200 MB of free space. Make sure your ${`TMPDIR} has at least 200 MB of free space.|
Note: The ``runInstaller`` (OUI) uses or checks for temporary space by checking for the ``TEMP`` environment variable first, then the ``TMP`` environment variable, and finally the ``/tmp`` mount point.
%BR%The operating system also requires additional space by creating files under ``/tmp`` or using the ``TMPDIR`` environment variable if it finds it.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00240" mode="VERIFY" name="Disk Space OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00050" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Needs ORACLE_HOME location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $ORACLE_HOME
call setHcveVariable('$ORACLE_HOME')
if !length($ORACLE_HOME)
 return setHcveResult('OHNotSpecified')
if !testDir('d',$ORACLE_HOME)
 return setHcveResult('OHNotValid')
var $dsk = expr('/',get_df($ORACLE_HOME),1048576)
call setHcveResult(cond(expr('>=',$dsk,8.58),'DiskSpaceOK',\
                        expr('>=',$dsk,6.89),'OnlySpaceForOne',\
                                             'NoSpace'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the amount of disk space in the Oracle home directory is sufficient for installing Oracle Database 11g R2.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" maximum="N" minimum="DiskSpaceOK|OHNotSpecified" result="PASSED"><![CDATA[The Oracle home directory has sufficient disk space to install Oracle Database 11g R2 software, and create a database. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The Oracle home directory has insufficient disk space for installing any type of Oracle Database 11g R2 architecture. Verify the specifications:
|*Return Value*|*Action*|
|OnlySpaceForOne|${`ORACLE_HOME} has sufficient free disk space to install the Oracle Database 11g R2 software but not enough to create a database.|
|NoSpace|${`ORACLE_HOME} has insufficient free disk space for an Oracle Database 11g R2 installation.|
|OHNotValid|Disk space calculations cannot be performed because ${`ORACLE_HOME} is not a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00250" mode="RECORD" name="Swap (in MB)">
<sdp_command type="RDA"><![CDATA[if !testFile('x','/usr/sbin/swapinfo')
 return setHcveResult('ALERT- SWAP space cannot be determined')
var ($swp) = command('/usr/sbin/swapinfo -qm')
call setHcveResult(cond($swp,$swp,'SWAPNotSet'))
]]></sdp_command>
<sdp_description><![CDATA[This rule shows the amount of free swap space.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00260" mode="VERIFY" name="RAM (in MB)">
<sdp_command type="RDA"><![CDATA[if grepCommand('/usr/contrib/bin/machinfo','Memory\s*[=:]\s*(\d+)\s*MB','f1')
 call setHcveResult(last)
else
{var $mem = nvl(\
   field('\s+',6,grepFile('/var/adm/syslog/syslog.log','Physical','f')),\
   field('\s+',6,grepFile('/var/adm/syslog/OLDsyslog.log','Physical','f')),\
   field('\s+',1,grepCommand('/usr/sbin/dmesg','Physical:','f')),\
   cond(getSetting('NO_CSTM'),0,\
       expr('*',1024,match(grepCommand(\
         "/usr/bin/echo 'selall;info;wait;infolog;view;done' | /usr/sbin/cstm",\
         'Total Configured Memory','f'),'\:\s+(\d+)\s+MB'))),\
   0)
 call setHcveResult(expr('/',$mem,1024))
}
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that your system has sufficient physical memory installed to install Oracle Database 11g R2.]]></sdp_description>
<sdp_actions>
<sdp_action condition=">=" minimum="2048" result="PASSED"><![CDATA[You have sufficient physical memory (MB) installed to install Oracle Database 11g R2. No action required.]]></sdp_action>
<sdp_action condition=">=" minimum="1024" result="FAILED"><![CDATA[You have sufficient physical memory (MB) installed to install Oracle Database 11g R2. However, you have less than the 2GB or more of physical memory recommended by Oracle.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[ALERT:
You need to increase your physical memory to at least 2 GB for Oracle Database 11g R2.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00270" mode="VERIFY" name="SwapToRAM OK?">
<sdp_dependencies>
<sdp_dependency condition=">" id="A00250" minimum="0" result="FAILED" value="No amount of swap space was found"><![CDATA[No amount of swap space was found.]]></sdp_dependency>
<sdp_dependency condition="!~" id="A00250" minimum="SWAPNotSet" result="FAILED" value="Swap space is not set"><![CDATA[The swap space is not set.]]></sdp_dependency>
<sdp_dependency condition="!~" id="A00250" minimum="^ALERT" result="FAILED" value="The swap space could not be determined"><![CDATA[The swap space could not be determined.]]></sdp_dependency>
<sdp_dependency condition=">=" id="A00260" minimum="1024" result="SKIPPED" value="The amount of physical memory must be known and must be at least the minimum for installation."><![CDATA[The required swap is not defined unless the amount of physical memory is known and is at least the minimum required for installation.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $swp = "%A00250%"
var $mem = "%A00260%"
call setHcveResult(cond(\
  expr('<',$mem,1024),                     'LowMem',\
  expr('<',$mem,2048),\
    cond(expr('<',$swp,expr('*',$mem,1.5)),'SwapLessThanRAM','SwapToRAMOK'),\
  expr('<',$mem,16384),\
    cond(expr('<',$swp,$mem),              'SwapLessThanRAM','SwapToRAMOK'),\
  expr('<',$swp,16384),                    'SwapLessThanRAM',\
                                           'SwapToRAMOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the total amount of swap space is greater than or equal to the amount recommended by the ''Oracle Database Installation Guide 11g Release 2 (11.2) for IBM AIX on POWER Systems (64-bit)''.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="SwapToRAMOK" result="PASSED"><![CDATA[The amount of swap space meets the minimum requirement for installing Oracle Database 11g R2. No action required.]]></sdp_action>
<sdp_action condition="==" minimum="LowMem" result="SKIPPED"><![CDATA[The amount of physical memory is inadequate; therefore, ratio to swap space is not defined.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The amount of swap space is less than the amount recommended by the ${'BOOK}. Verify the requirements and adjust your system accordingly.
|*Return Value*|*Action*|
|SwapLessThanRAM|If physical memory is between 1 GB and 2 GB, then the swap space is to be at least 1.5 times the physical memory. If physical memory is between 2 GB and 16 GB, then the swap space is to be at least equal to physical memory. If physical memory is more than 16 GB, then the swap space is to be at least 16 GB.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00290" mode="RECORD" name="IP address">
<sdp_command type="RDA"><![CDATA[var ($hst) = command('hostname')
var $ip = field('\s+',3,\
 grepCommand(concat('/usr/sbin/ping ',$hst,' -n 1'),'\s(\d+\.\d+\.)+','f'))
call setHcveResult(replace($ip,':'))
]]></sdp_command>
<sdp_description><![CDATA[This rule gets the host IP address.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00300" mode="RECORD" name="Domain Name">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00290" minimum="RECORD" result="FAILED"><![CDATA[Needs IP address.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var ($hst) = command('hostname')
var $ip = "%A00290%"
var ($nam,$dom) = split('\.',$hst,2)
if testFile('x','/bin/domainname')
 var ($nis) = command('/bin/domainname')
if testFile('r','/etc/resolv.conf')
 var $dns = field('\s+',1,grepFile('/etc/resolv.conf','domain'))
if testFile('x','/bin/nslookup')
{if $nam
 {var $nsl = field(concat(quote($nam),'\.'),1,\
                  grepCommand(concat('/bin/nslookup ',$hst),'Name','f'))
 }
 else
 {var $nsl = field(concat(quote($hst),'\.'),1,\
                  grepCommand(concat('/bin/nslookup ',$hst),'Name','f'))
 }
}
if $ip
{if !$nam
  var $ipn = trim(field(concat($hst,'\.'),1,\
             grepCommand(concat('/usr/bin/nslookup -sil ',$ip),'Name','f')),'.')
}
call setHcveResult(cond($dom,$dom,\
                        and(length($nis),compare('ne',$nis,'(none)')),$nis,\
                        $dns,$dns,\
                        $nsl,$nsl,\
                        $ipn,$ipn,\
                             'NotFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule gets the host domain name.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00310" mode="VERIFY" name="DNS Lookup">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00290" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Needs IP address.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $ip  = "%A00290%"
var $hst = field('\.',0,command('hostname'))
call setHcveResult(cond(\
  not(length($ip)),\
    'Cannot determine IP address',\
  not(testFile('x','/bin/nslookup')),\
    'Cannot access /bin/nslookup',\
  and(grepCommand(concat('/bin/nslookup ',$hst),quote($ip),'f'),\
      grepCommand(concat('/bin/nslookup ',$ip),quote($hst),'f')),\
    'Host correctly registered in DNS',\
    'Host not correctly registered in DNS'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the host is registered correctly in the DNS.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Host correctly registered in DNS" result="PASSED"><![CDATA[The host is registered correctly in the DNS.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Host not correctly registered in DNS.|Register the host.domain in the DNS.|
|Cannot determine IP address|Fix any problem with the host IP address.|
|Cannot access /bin/nslookup|Grant execute permissions on ``/bin/nslookup`` for the login user.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00320" mode="VERIFY" name="/etc/hosts Format">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00300" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Requires domain name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
if !testFile('r','/etc/hosts')
 return setHcveResult('Cannot access /etc/hosts')
if !@tbl = grepFile('/etc/hosts',\
  concat('^([^\s\#]+\s+)+',quote(${RDA.HOST}),\
         '\s+([^\s\#]+\s+)*',quote(${RDA.NODE}),'(\s|\z|\#)'))
 return setHcveResult('no entry found')

# Test that line begins with IPv4 IP address
if grep(@tbl,'^(\d{1,3}\.){3}\d{1,3}\s','f')
 return setHcveResult('Adequate IPv4 entry')

# Tests that line begins with IPv6 IP address, first that all eight groups are populated, then situations where groups that are all zero are omitted (two colons together).
if grep(@tbl,'^([A-F\d]{1,4}(:[A-F\d]{1,4}){7}\s|\
                :(:[A-F\d]{1,4}){1,6}\s|\
                ([A-F\d]{1,4}:){1,5}(:[A-F\d]{1,4}){1,5}\s|\
                ([A-F\d]{1,4}:){1,6}:\s)','f')
 return setHcveResult('Adequate IPv6 entry')
return setHcveResult('no correct entry found')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``/etc/hosts`` file contains a line with ``ip_address fully_qualified_domainname short_hostname``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="^Adequate" result="PASSED"><![CDATA[The ``/etc/hosts`` entry for the fully qualified domain name and host name is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="Cannot access /etc/hosts" result="FAILED"><![CDATA[Grant read permissions on ``/etc/hosts`` to the current user.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The fully qualified host name and host name are not configured correctly. Ensure that there is an IP address entry for the fully qualified domain name with the host name as one of the aliases.
|*Return Value*|*Action"|
|no entry found|No entry with the fully qualified domain name followed by the host name was found.|
|no correct entry found|No entry beginning with an IP address with the fully qualified domain name followed by the host name was found.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00330" mode="VERIFY" name="Kernel Parameters OK?">
<sdp_command type="RDA"><![CDATA[var $mem = %A00260%
var @tbl = ()
var $EXECUTABLE_STACK_REQD = 0
var $KSI_ALLOC_MAX_REQD    = 32768
var $MAXFILES_REQD         = 1024
var $MASFILES_LIM_REQD     = 63488
var $MAX_THREAD_PROC_REQD  = 1024
var $MAXDSIZ_REQD          = 1073741824
var $MAXDSIZ_64BIT_REQD    = 2147483648
var $MAXSSIZ_REQD          = 134217728
var $MAXSSIZ_64BIT_REQD    = 1073741824
var $MAXUPRC_REQD          = 3686
var $MSGMNI_REQD           = 4096
var $MSGTQL_REQD           = 4096
var $NCSIZE_REQD           = 35840
var $NFLOCKS_REQD          = 4096
var $NINODE_REQD           = 34816
var $NKTHREAD_REQD         = 7184
var $NPROC_REQD            = 4096
var $SEMMNI_REQD           = 4096
var $SEMMNS_REQD           = 8192
var $SEMMNU_REQD           = 4092
var $SEMVMX_REQD           = 32767
var $SHMMAX_REQD           = min(1073741824,expr('*',$mem,1048576))
var $SHMMNI_REQD           = 4096
var $SHMSEG_REQD           = 512
var $VPS_CEILING_REQD      = 64
if !or(loadCommand('/usr/sbin/kctune'),\
       loadCommand('/usr/sbin/kmtune'),\
       loadFile('/stand/system'))
 return setHcveResult('NoAccess')
var $EXECUTABLE_STACK = field('\s+',1,grepLastFile('^executable_stack\s','f'))
var $KSI_ALLOC_MAX    = field('\s+',1,grepLastFile('^ksi_alloc_max\s','f'))
var $MAXFILES         = field('\s+',1,grepLastFile('^maxfiles\s','f'))
var $MAXFILES_LIM     = field('\s+',1,grepLastFile('^maxfiles_lim\s','f'))
var $MAX_THREAD_PROC  = field('\s+',1,grepLastFile('^max_thread_proc\s','f'))
var $MAXDSIZ          = field('\s+',1,grepLastFile('^maxdsiz\s','f'))
var $MAXDSIZ_64BIT    = field('\s+',1,grepLastFile('^maxdsiz_64bit\s','f'))
var $MAXSSIZ          = field('\s+',1,grepLastFile('^maxssiz\s','f'))
var $MAXSSIZ_64BIT    = field('\s+',1,grepLastFile('^maxssiz_64bit\s','f'))
var $MAXUPRC          = field('\s+',1,grepLastFile('^maxuprc\s','f'))
var $MSGMNI           = field('\s+',1,grepLastFile('^msgmni\s','f'))
var $MSGTQL           = field('\s+',1,grepLastFile('^msgtql\s','f'))
var $NCSIZE           = field('\s+',1,grepLastFile('^ncsize\s','f'))
var $NFLOCKS          = field('\s+',1,grepLastFile('^nflocks\s','f'))
var $NINODE           = field('\s+',1,grepLastFile('^ninode\s','f'))
var $NKTHREAD         = field('\s+',1,grepLastFile('^nkthread\s','f'))
var $NPROC            = field('\s+',1,grepLastFile('^nproc\s','f'))
var $SEMMNI           = field('\s+',1,grepLastFile('^semmni\s','f'))
var $SEMMNS           = field('\s+',1,grepLastFile('^semmns\s','f'))
var $SEMMNU           = field('\s+',1,grepLastFile('^semmnu\s','f'))
var $SEMVMX           = field('\s+',1,grepLastFile('^semvmx\s','f'))
var $SHMMAX           = field('\s+',1,grepLastFile('^shmmax\s','f'))
var $SHMMNI           = field('\s+',1,grepLastFile('^shmmni\s','f'))
var $SHMSEG           = field('\s+',1,grepLastFile('^shmseg\s','f'))
var $VPS_CEILING      = field('\s+',1,grepLastFile('^vps_ceiling\s','f'))

macro hx2dec
{var ($hex) = @arg
 var %tbl = ('0',0,'1',1,'2',2,'3',3,'4',4,'5',5,'6',6,'7',7,'8',8,'9',9,\
             'A',10,'B',11,'C',12,'D',13,'E',14,'F',15)
 var $res = 0
 loop $chr (split('',uc($hex)))
  var $res = expr('+',expr('*',$res,16),$tbl{$chr})
}

macro rpl_nam
{var ($str) = @arg

 var $cnt = 8
 while match($str,'\b([A-Za-z_]+)\b')
 {var ($nam) = last
  var $val = field('\s+',1,grepLastFile(concat('^',quote($nam),'\s'),'if'))
  var $str = replace($str,concat('\b',quote($nam),'\b'),\
                          concat('(',nvl($val, 0),')'),true)
  decr $cnt
  break !$cnt
 }
 return compute($str)
}

macro chk_min
{var (\@tbl,$nam,$ref,$val) = @arg
 if !defined($val)
 {call push(@tbl,concat('[',$nam,'] undef'))
  return
 }
 if match($val,'0x([\da-f]+)',true)
  var $val = hx2dec(last)
 if match($val,'\b[A-Za-z_]+\b')
 {var $val = rpl_nam($val)
  if !defined($val)
  {call push(@tbl,concat('[',$nam,'] too complex'))
   return
  }
 }
 if expr('<',$val,$ref)
  call push(@tbl,concat('[',$nam,'=',$val,'] too small'))
}

macro chk_max
{var (\@tbl,$nam,$ref,$val) = @arg
 if !defined($val)
 {call push(@tbl,concat('[',$nam,'] undef'))
  return
 }
 if match($val,'0x([\da-f]+)',true)
  var $val = hx2dec(last)
 if match($val,'\b[A-Za-z_]+\b')
 {var $val = rpl_nam($val)
  if !defined($val)
  {call push(@tbl,concat('[',$nam,'] too complex'))
   return
  }
 }
 if expr('>',$val,$ref)
  call push(@tbl,concat('[',$nam,'=',$val,'] too large'))
}
call chk_max(\@tbl,'EXECUTABLE_STACK',$EXECUTABLE_STACK_REQD,$EXECUTABLE_STACK)
call chk_min(\@tbl,'KSI_ALLOC_MAX',$KSI_ALLOC_MAX_REQD,$KSI_ALLOC_MAX)
call chk_min(\@tbl,'MAXFILES',$MAXFILES_REQD,$MAXFILES)
call chk_min(\@tbl,'MAXFILES_LIM',$MAXFILES_LIM_REQD,$MAXFILES_LIM)
call chk_min(\@tbl,'MAX_THREAD_PROC',$MAX_THREAD_PROC_REQD,$MAX_THREAD_PROC)
call chk_min(\@tbl,'MAXDSIZ',$MAXDSIZ_REQD,$MAXDSIZ)
call chk_min(\@tbl,'MAXDSIZ_64BIT',$MAXDSIZ_64BIT_REQD,$MAXDSIZ_64BIT)
call chk_min(\@tbl,'MAXSSIZ',$MAXSSIZ_REQD,$MAXSSIZ)
call chk_min(\@tbl,'MAXSSIZ_64BIT',$MAXSSIZ_64BIT_REQD,$MAXSSIZ_64BIT)
call chk_min(\@tbl,'MAXUPRC',$MAXUPRC_REQD,$MAXUPRC)
call chk_min(\@tbl,'MSGMNI',$MSGMNI_REQD,$MSGMNI)
call chk_min(\@tbl,'MSGTQL',$MSGTQL_REQD,$MSGTQL)
call chk_min(\@tbl,'NCSIZE',$NCSIZE_REQD,$NCSIZE)
call chk_min(\@tbl,'NFLOCKS',$NFLOCKS_REQD,$NFLOCKS)
call chk_min(\@tbl,'NINODE',$NINODE_REQD,$NINODE)
call chk_min(\@tbl,'NKTHREAD',$NKTHREAD_REQD,$NKTHREAD)
call chk_min(\@tbl,'NPROC',$NPROC_REQD,$NPROC)
call chk_min(\@tbl,'SEMMNI',$SEMMNI_REQD,$SEMMNI)
call chk_min(\@tbl,'SEMMNS',$SEMMNS_REQD,$SEMMNS)
call chk_min(\@tbl,'SEMMNU',$SEMMNU_REQD,$SEMMNU)
call chk_min(\@tbl,'SEMVMX',$SEMVMX_REQD,$SEMVMX)
call chk_min(\@tbl,'SHMMAX',$SHMMAX_REQD,$SHMMAX)
call chk_min(\@tbl,'SHMMNI',$SHMMNI_REQD,$SHMMNI)
call chk_min(\@tbl,'SHMSEG',$SHMSEG_REQD,$SHMSEG)
call chk_min(\@tbl,'VPS_CEILING',$VPS_CEILING_REQD,$VPS_CEILING)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'KernelOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the kernel parameters are set according to the ''Oracle Database Installation Guide 11g Release 2 (11.2) for HP-UX''.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="KernelOK" result="PASSED" syntax="wiki"><![CDATA[The kernel parameters are set according to the ${'BOOK}. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The kernel parameters are not set according to the ${'BOOK}. For the recommended values, see the ${'BOOK}.
|*Return Value*|*Action*|
|... undef|The kernel parameter is not set. Make sure it is set.|
|... too complex|RDA cannot evaluate the expression associated with some kernel parameters.|
|... too small|The kernel parameter is set less than the minimum requirement. Refer to the following minimum parameter values:%BR%executable_stack=0%BR%ksi_alloc_max=32768%BR%maxfiles=1024%BR%maxfiles_lim=63488%BR%max_thread_proc=1024%BR%maxdsiz=1073741824%BR%maxdsiz_64bit=2147483648%BR%maxssiz=134217728%BR%maxssiz_64bit=1073741824%BR%maxuprc=3686%BR%msgmap=4096%BR%msgmni=4096%BR%msgseg=32767%BR%msgtql=4096%BR%ncsize=35840%BR%nfile=63488%BR%nflocks=4096%BR%ninode=34816%BR%nkthread=7184%BR%nproc=4096%BR%semmni=4096%BR%semmns=8192%BR%semmnu=4092%BR%semvmx=32767%BR%shmmax=size of RAM%BR%shmmni=512%BR%shmseg=512%BR%vps_ceiling=64|
|NoAccess|You do not have access to ``/usr/sbin/kctune``, ``/usr/bin/kmtune``, or ``/stand/system``|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00402" mode="VERIFY" name="anon port range OK?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
var @tmp = command('/usr/bin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port 2>&1')
if !match($tmp[0],'^9000\b')
 call push(@tbl,'LowValue')
if !match($tmp[2],'^65500\b')
 call push(@tbl,'HighValue')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'RangeOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the anon port range is set to Oracle recommendations.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="RangeOK" result="PASSED"><![CDATA[The anon port range is set satifactorily. No action required.]]></sdp_action>
<sdp_action result="FAILED" format="wiki"><![CDATA[|*Return Value*|*Action*|
|LowValue|Oracle recommends setting ``tcp_smallest_anon_port`` to 9000. Refer to the ${'BOOK}.|
|HighValue|Oracle recommends setting ``tcp_largest_anon_port`` to 65500. Refer to the ${'BOOK}.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00410" mode="VERIFY" name="Got OS Patches?">
<sdp_command type="RDA"><![CDATA[import $OS_VER
macro check_patch
{var (\@tbl,$pch,@pch) = @arg
 var $pat = concat('(',join('|',$pch,@pch),')')
 if !grepLastFile($pat,'if')
  call push(@tbl,concat('[',$pch,'] not installed'))
}
if !loadCommand('/usr/sbin/swlist -l fileset')
 return setHcveResult('NoAccess')
if match($OS_VER,'^11\.31$')
{call check_patch(\@tbl,'PHCO_40381','PHCO_41479','PHCO_41903')
 call check_patch(\@tbl,'PHKL_38038','PHKL_38987','PHKL_38949','PHKL_38651',\
                        'PHKL_39747','PHKL_39401','PHKL_40240','PHKL_40441',\
                        'PHKL_40130','PHKL_40942','PHKL_41005','PHKL_41355',\
                        'PHKL_41588','PHKL_41362','PHKL_41972','PHKL_41969',\
                        'PHKL_42444')
 call check_patch(\@tbl,'PHKL_38938','PHKL_39646','PHKL_41368')
 call check_patch(\@tbl,'PHKL_39351','PHKL_40208','PHKL_40207','PHKL_40941',\
                        'PHKL_40963','PHKL_41481','PHKL_41981','PHKL_42300')
 call check_patch(\@tbl,'PHSS_36354','PHSS_40546','PHSS_42042','PHSS_42686')
 call check_patch(\@tbl,'PHSS_37042')
 call check_patch(\@tbl,'PHSS_37959','PHSS_40804','PHSS_42249')
 call check_patch(\@tbl,'PHSS_39094','PHSS_39822','PHSS_40538','PHSS_41179',\
                        'PHSS_41492','PHSS_42040')
 call check_patch(\@tbl,'PHSS_39100','PHSS_39827','PHSS_40454','PHSS_40540',\
                        'PHSS_41181','PHSS_42041')
 call check_patch(\@tbl,'PHSS_39102','PHSS_40542','PHSS_41183','PHSS_41496')
 call check_patch(\@tbl,'PHSS_38141','PHSS_40544','PHSS_41185','PHSS_42980')
}
else
 call push(@tbl,'NotChecked')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'OSpatchesFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the required OS patches for the Oracle Database 11g R2 installation.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="OSpatchesFound|NotChecked" result="PASSED"><![CDATA[All required OS patches are adequate. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required OS patches were not met or found. Review the recommended OS patches from the ''Oracle Database Installation Guide 11g Release 1 (11.1) for HP-UX'' before installing the software.
|*Return Value*|*Action*|
|NoAccess|You do not have access to ``/usr/sbin/swlist``|
|... not installed|Make sure that the following patches or superseding patches are installed.%BR%
For HP-UX 11.31 Itanium platform,%SEQ%
PHCO_40381 (last known superseding patch PHCO_41903)%NEXT%
PHKL_38038 (last known superseding patch PHKL_42444)%NEXT%
PHKL_38938 (last known superseding patch PHKL_41368)%NEXT%
PHKL_39351 (last known superseding patch PHKL_42300)%NEXT%
PHSS_36354 (last known superseding patch PHSS_42686)%NEXT%
PHSS_37042 (no known superseding patch)%NEXT%
PHSS_37959 (last known superseding patch PHSS_42249)%NEXT%
PHSS_39094 (last known superseding patch PHSS_42040)%NEXT%
PHSS_39100 (last known superseding patch PHSS_42041)%NEXT%
PHSS_39102 (last known superseding patch PHSS_41496)%NEXT%
PHSS_38141 (last known superseding patch PHSS_42980)%ENDSEQ%The list of superseding patches may be incomplete and patches installed in this system may already include patches that supersede the requirements.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00420" mode="VERIFY" name="Got OS Patches for C++?">
<sdp_command type="RDA"><![CDATA[
macro check_patch
{var (\@tbl,$pch,@pch) = @arg
 var $pat = concat('(',join('|',$pch,@pch),')')
 if !grepLastFile($pat,'if')
  call push(@tbl,concat('[',$pch,'] not installed'))
}
if !loadCommand('/usr/sbin/swlist -l fileset')
 return setHcveResult('NoAccess')
call check_patch(\@tbl,'PHSS_39824','PHSS_40631')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'OSpatchesFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the required OS patches for the Oracle Database 11g R2 installation if C++ is going to be utilized.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="OSpatchesFound" result="PASSED"><![CDATA[The required patches for C++ are adequate. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required OS patches for C++ were not met or found. If you are going to utilize C++, review the recommended OS patches from ${'BOOK} before installing the software.
|*Return Value*|*Action*|
|... not installed|If you are going to use C++, make sure that the following patches or superseding patches are installed.%BR%For HP-UX 11.31 Itanium platform, %SEQ%PHSS_39824 (last known superseding patch PHSS_40631)%ENDSEQ%The list of superseding patches may be incomplete and patches installed in this system may already include patches that supersede the requirements.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00430" mode="VERIFY" name="Got OS Patches for VERITAS File System?">
<sdp_command type="RDA"><![CDATA[
macro check_patch
{var (\@tbl,$pch,@pch) = @arg
 var $pat = concat('(',join('|',$pch,@pch),')')
 if !grepLastFile($pat,'if')
  call push(@tbl,concat('[',$pch,'] not installed'))
}
if !loadCommand('/usr/sbin/swlist -l fileset')
 return setHcveResult('NoAccess')
call check_patch(\@tbl,'PHKL_39773')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'OSpatchesFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the required OS patches for the Oracle Database 11g R2 installation if a VERITAS File System 5.0 is going to be utilized.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="OSpatchesFound" result="PASSED"><![CDATA[The required patches for C++ are adequate. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the required OS patches for VERITAS File System 5.0 were not met or found. If you are going to utilize a VERITAS File System 5.0, review the recommended OS patches from ${'BOOK} before installing the software.
|*Return Value*|*Action*|
|... not installed|If you are going to use VERITAS File System 5.0, make sure that the following patches or superseding patches are installed.%BR%For HP-UX 11.31 Itanium platform, %SEQ%PHSS_39824 (last known superseding patch PHSS_40631)%ENDSEQ%The list of superseding patches may be incomplete and patches installed in this system may already include patches that supersede the requirements.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00440" mode="VERIFY" name="Got OS Quality Pack Bundle?">
<sdp_command type="RDA"><![CDATA[if !loadCommand('/usr/sbin/swlist -l bundle')
 return setHcveResult('Cannot access /usr/sbin/swlist')
if (expr('>',grepCommand('/usr/sbin/swlist -l bundle','QPK','ifc'),0))
 {var ($val) = field('\s+',1,grepCommand('/usr/sbin/swlist -l bundle','QPK','if'))
  @tbl = split('\.',$val)
  call setHcveResult(cond(\
    and(expr('==',$tbl[1],11),expr('==',$tbl[2],31),expr('==',$tbl[3],0809),\
      expr('>=',substr($tbl[4],0,3),326)),'QPK1131Adequate',\
    and(expr('==',$tbl[1],11),expr('==',$tbl[2],31),expr('>',$tbl[3],0809)),\
                                          'QPK1131Adequate',\
    'Not adequate'))
}
else
 return setHcveResult('QPKNotFound')]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the required operating system bundle is installed.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="QPK1131Adequate" result="PASSED"><![CDATA[The bundle requirement is satisfied.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Cannot access /usr/sbin/swlist|Make sure that the user, who is logged in, can use ''/usr/sbin/swlist'' to get the bundle identification.|
|Not adequate|The bundle does not match the required bundle. Refer to ${'BOOK} for the required bundle and instructions.|
|QPKNotFound|No 11i V3 Quality pack bundle was found. Refer to ${'BOOK} for the required bundle and instructions.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
</sdp_content>
</sdp_diaglet>
