<sdp_diaglet platform="aix" product="AS0904" set="A300AS0904_aix" title="Oracle Application Server 10g (9.0.4) Preinstall (AIX)" type="A">
<sdp_meta id="$Id: A300AS0904_aix.xml,v 2.6 2012/04/18 16:17:48 mschenke Exp $" type="version"/>
<sdp_meta author="JCR" change="Improve Temp Space and Swap checks" date="20120405" type="history"/>
<sdp_content set="A300AS0904_aix" title="Oracle Application Server 10g (9.0.4) Preinstall (AIX)" type="check">
<sdp_group>
<sdp_rule id="A00000" mode="RECORD" name="OS">
<sdp_command type="RDA"><![CDATA[import $OS_PLT,$OS_NAM,$OS_VER,$OS_LVL,$OS_BIT
call setHcveResult(concat($OS_PLT,' ',$OS_VER,' ',$OS_LVL,' ',$OS_BIT,'-bit'))
]]>
</sdp_command>
<sdp_description><![CDATA[This rule retrieves the operating system (OS) description.]]></sdp_description>
</sdp_rule>
<sdp_rule id="A00001" mode="VERIFY" name="Processor Type">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('x','/usr/bin/getconf')),\
    'Cannot access /usr/bin/getconf',\
  grepCommand('/usr/bin/getconf HARDWARE_BITMODE','^64$','f'),\
    'Certified',\
    'Need 64-bit'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the processor type. The processor must be AIX Common Hardware Reference Platform processors (64-bit).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Certified" result="PASSED"><![CDATA[The processor is certified.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The processor must be AIX Common Hardware Reference Platform processor (64-bit).
|*Return Value*|*Action*|
|Need 64-bit|Use a certified processor type.|
|Cannot access /usr/bin/getconf|Grant execute permissions on ``/usr/bin/getconf`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00002" mode="VERIFY" name="Memory">
<sdp_command type="RDA"><![CDATA[var $MEM = undef
call setHcveVariable('$MEM')
if !testFile('x','/usr/sbin/lsattr')
 return setHcveResult('Cannot access /usr/sbin/lsattr')
var $MEM = expr('/',field('\s+',1,\
 grepCommand('/usr/sbin/lsattr -E -l sys0 -a realmem','.','f')),1024)
call setHcveResult(concat($MEM,' MB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule retrieves the available physical memory in MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum=" MB$" result="PASSED"><![CDATA[No action is required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00003" mode="VERIFY" name="Memory for MDR and OIM">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),   'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,1000), 'Available',\
                        'Need at least 1 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Metadata Repository (MDR) and Oracle Identity Management (OIM) install type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the Metadata Repository and Oracle Identity Management install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Metadata Repository and Oracle Identity Management install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00004" mode="VERIFY" name="Memory for OIM Only">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),  'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,512), 'Available',\
                       'Need at least 512 MB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Oracle Identity Management only install type. The minimum requirement is 512 MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the Oracle Identity Management only install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 512 MB|Increase the memory to 512 MB or more to install the Oracle Identity Management only install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00005" mode="VERIFY" name="Memory for MDR Only">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),  'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,750), 'Available',\
                       'Need at least 750 MB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Metadata Repository (MDR) only install type. The minimum requirement is 750 MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the Metadata Repository only install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 750 MB|Increase the memory to 750 MB or more to install the Metadata Repository only install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00006" mode="VERIFY" name="Memory for J2EE">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),  'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,512), 'Available',\
                       'Need at least 512 MB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the J2EE and Web Cache install type. The minimum requirement is 512 MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the J2EE and Web Cache install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 512 MB|Increase the memory to 512 MB or more to install the J2EE and Web Cache install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00007" mode="VERIFY" name="Memory for Portal">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),   'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,1000), 'Available',\
                        'Need at least 1 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Portal and Wireless install type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the Portal and Wireless install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Portal and Wireless install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00008" mode="VERIFY" name="Memory for BI and Forms">
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  not(defined($MEM)),   'Cannot access /usr/sbin/lsattr',\
  expr('>=',$MEM,1000), 'Available',\
                        'Need at least 1 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Business Intelligence (BI) and Forms install type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough memory to install the Business Intelligence and Forms install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Business Intelligence and Forms install type.|
|Cannot access /usr/sbin/lsattr|Grant execute permissions on ``/usr/sbin/lsattr`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00009" mode="VERIFY" name="Disk Space">
<sdp_command type="RDA"><![CDATA[var $ORACLE_HOME = getEnv('ORACLE_HOME')
var $DF = cond(\
  not($ORACLE_HOME),              'ORACLE_HOME is not set',\
  not(testDir('d',$ORACLE_HOME)), 'Cannot access ORACLE_HOME',\
                                  get_df($ORACLE_HOME))
call setHcveVariable('$DF')
call setHcveResult(cond(isNumber($DF),concat($DF,' KB'),$DF))
]]></sdp_command>
<sdp_description><![CDATA[This rule retrieves the available disk space.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum=" KB$" result="PASSED"><![CDATA[No action is required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|ORACLE_HOME is not set|Set the ORACLE_HOME environment variable.|
|Cannot access ORACLE_HOME|Set ORACLE_HOME to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00010" mode="VERIFY" name="Space for Infra">
<sdp_command type="RDA"><![CDATA[import $DF
call setHcveResult(cond(\
  not(isNumber($DF)),     $DF,\
  expr('>=',$DF,4400000), 'Available',\
                          'Need at least 4.4 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Infrastructure install type. The minimum requirement is 4.4 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough disk space to install the Infrastructure install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 4.4 GB|Increase the available space to 4.4 GB or more to install the Infrastructure install type.|
|ORACLE_HOME is not set|Set the ``ORACLE_HOME`` environment variable.|
|Cannot access ORACLE_HOME|Set ``ORACLE_HOME`` to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00011" mode="VERIFY" name="Space for J2EE">
<sdp_command type="RDA"><![CDATA[import $DF
call setHcveResult(cond(\
  not(isNumber($DF)),     $DF,\
  expr('>=',$DF,1400000), 'Available',\
                          'Need at least 1.4 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the J2EE and Web Cache install type. The minimum requirement is 1.4 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough disk space to install the J2EE and Web Cache install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1.4 GB|Increase the available space to 1.4 GB or more to install the J2EE and Web Cache install type.|
|ORACLE_HOME is not set|Set the ``ORACLE_HOME`` environment variable.|
|Cannot access ORACLE_HOME|Set ``ORACLE_HOME`` to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00012" mode="VERIFY" name="Space for Portal">
<sdp_command type="RDA"><![CDATA[import $DF
call setHcveResult(cond(\
  not(isNumber($DF)),     $DF,\
  expr('>=',$DF,2300000), 'Available',\
                          'Need at least 2.3 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Portal and Wireless install type. The minimum requirement is 2.3 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough disk space to install the Portal and Wireless install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.3 GB|Increase the available space to 2.3 GB or more to install the Portal and Wireless install type.|
|ORACLE_HOME is not set|Set the ``ORACLE_HOME`` environment variable.|
|Cannot access ORACLE_HOME|Set ``ORACLE_HOME`` to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00013" mode="VERIFY" name="Space for BI and Forms">
<sdp_command type="RDA"><![CDATA[import $DF
call setHcveResult(cond(\
  not(isNumber($DF)),     $DF,\
  expr('>=',$DF,3300000), 'Available',\
                          'Need at least 3.3 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Business Intelligence (BI) and Forms install type. The minimum requirement is 3.3 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough disk space to install the Business Intelligence and Forms install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 3.3 GB|Increase the available space to 3.3 GB or more to install the Business Intelligence and Forms install type.|
|ORACLE_HOME is not set|Set the ``ORACLE_HOME`` environment variable.|
|Cannot access ORACLE_HOME|Set ``ORACLE_HOME`` to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00014" mode="VERIFY" name="Space for Developer Kit">
<sdp_command type="RDA"><![CDATA[import $DF
call setHcveResult(cond(\
  not(isNumber($DF)),     $DF,\
  expr('>=',$DF,1500000), 'Available',\
                          'Need at least 1.5 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Developer Kit install type. The minimum requirement is 1.5 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough disk space to install the Developer Kit install type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1.5 GB|Increase the available space to 1.5 GB or more to install the Developer Kit install type.|
|ORACLE_HOME is not set|Set the ``ORACLE_HOME`` environment variable.|
|Cannot access ORACLE_HOME|Set ``ORACLE_HOME`` to a valid directory.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00015" mode="VERIFY" name="Temp Space">
<sdp_command type="RDA"><![CDATA[
var ($flg,$tmp,@tbl) = (true,{'/tmp','/tmp'})
if getEnv('TMP')
 var $tmp->{'TMP'} = last
loop $key (keys(%tmp))
{if !testDir('d',$tmp->{$key})
  call push(@tbl,concat($key,' invalidDir'))
 else
 {if !testDir('w',$tmp->{$key})
   call push(@tbl,concat($key,' NoWrite'))
  if and($flg,expr('>=',get_df($tmp->{$key}),409600))
   var $flg = false
 }
}
if $flg
{loop $key (keys(%tmp))
  call push(@tbl,concat($key,' tooSmall'))
}
call setHcveParameter('RULE.A00015',$tmp)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'TempSpaceOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough temporary space. Initially Oracle Universal Installer (OUI) checks the ``TMP`` and ``TMPDIR`` environment variables to locate the temporary directory. If these environment variables do not exist, then OUI uses ``/tmp``. The minimum requirement is 400 MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="TempSpaceOK" result="PASSED"><![CDATA[There is sufficient temporary disk space available for installing Oracle Database 10g. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The temporary space is not configured correctly.
|*Return Value*|*Action*|
|/tmp invalidDir|ALERT - ``/tmp`` is not a valid directory. ``/tmp`` needs to be a directory.|
|/tmp NoWrite|ALERT - The user does not have write permissions to the ``/tmp`` directory.|
|/tmp tooSmall|ALERT - There is less than the needed 400 MB of free space in the ``/tmp`` directory.|
|TMP invalidDir|ALERT - ``TMP`` is set to ${`RULE.A00015.TMP} in the environment; however, ${`RULE.A00015.TMP} is an invalid directory. Take appropriate action.|
|TMP NoWrite|ALERT - ``TMP`` is set to ${`RULE.A00015.TMP} in the environment; however, the user does not have write permissions to ${`RULE.A00015.TMP}.|
|TMP tooSmall|ALERT - ``TMP`` is set to ${`RULE.A00015.TMP} in the environment; however, ${`RULE.A00015.TMP} has less than the required 400 MB of free space. Make sure your temporary space has at least 400 MB of free space.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00016" mode="VERIFY" name="Swap Space">
<sdp_command type="RDA"><![CDATA[call setHcveResult(cond(\
  not(testFile('x','/usr/sbin/lsps')),\
    'Cannot access /usr/sbin/lsps',\
  expr('>=',replace(field('\s+',0,\
    grepCommand('/usr/sbin/lsps -s','\d+','f')),'MB'),1536),\
    'Available',\
    'Need at least 1.5 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough swap space. The minimum requirement is 1.5 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Available" result="PASSED"><![CDATA[The system has enough swap space.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1.5 GB|Increase the swap space to 1.5 GB or more.|
|Cannot access /usr/sbin/lsps|Grant execute permissions on ``/usr/sbin/lsps`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00017" mode="VERIFY" name="Monitor Colors">
<sdp_command type="RDA"><![CDATA[call loadCommand('/usr/X11R6/bin/xdpyinfo 2>&1')
var @dpt = grepLastFile('depths')
call setHcveResult(cond(\
  grep(@dpt,'8','f'),              'Adequate',\
  not(defined(getEnv('DISPLAY'))), 'DISPLAY is not set',\
  grepLastFile('unable','f'),      'Cannot open DISPLAY',\
                                   'Need at least 256 colors'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the monitor has a minimum of 256 colors.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Adequate" result="PASSED"><![CDATA[The monitor has enough colors.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 256 colors|Use a display with 256 colors.|
|DISPLAY is not set|Set the DISPLAY environment variable to a valid display.|
|Cannot open DISPLAY|Set the DISPLAY environment variable to a correct display.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00018" mode="VERIFY" name="Operating System">
<sdp_command type="RDA"><![CDATA[import $OS_LVL
if !defined($OS_LVL)
 return setHcveResult('Cannot access /usr/bin/oslevel')
macro chk_maintenance
{import $lvl_sec
 return cond(compare('ge',$lvl_sec,'01'),\
   'Certified',\
   'Need at least Maintenance Level 1')
}
var ($lvl_fir,$lvl_sec) = split('\-',$OS_LVL,2)
call setHcveResult(cond(\
  compare('eq',$lvl_fir,'5200'), chk_maintenance(),\
  compare('ge',$lvl_fir,'5300'), chk_maintenance(),\
                                 'Need AIX 5.2 or 5.3'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the operating system is certified. The following operating systems are certified for Oracle Application Server 10g: AIX 5.2.0.0 Maintenance Level 1 or later and AIX 5.3.0.0 Maintenance Level 1 or later.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Certified" result="PASSED"><![CDATA[You are using a certified operating system.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least Maintenance Level 1|You must use AIX 5.2 or 5.3 with Maintenance Level 1 or later.|
|Need AIX 5.2 or 5.3|You must use AIX 5.2 or 5.3.|
|Cannot access /usr/bin/oslevel|Grant execute permissions on ``/usr/bin/oslevel`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00019" mode="VERIFY" name="File Sets">
<sdp_command type="RDA"><![CDATA[if !testFile('ex','/usr/bin/lslpp')
 return setHcveResult('Cannot access /usr/bin/lslpp')
loop $set ('bos.adt.base',\
               'bos.adt.lib',\
               'bos.adt.libm',\
               'bos.perf.perfstat',\
               'bos.perf.libperfstat',\
               'bos.perf.proctools')
{var ($res) = grepCommand(concat('lslpp -l ',$set),quote($set),'f')
 if !length($res)
  call push(@tbl,$set)
 elsif !compare('eq',field('\s+',2,$res),'COMMITTED')
  call push(@tbl,$set)
}
call setHcveResult(cond(\
  scalar(@tbl),concat('Missing [',join(' ',@tbl),']'),'All file sets exist'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the following file sets are installed and committed: ``bos.adt.base`` ``bos.adt.lib`` ``bos.adt.libm`` ``bos.perf.perfstat`` ``bos.perf.libperfstat`` ``bos.perf.proctools``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="All file sets exist" result="PASSED"><![CDATA[You are using a certified operating system.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Missing ...|Install the listed missing file sets from : ``bos.adt.base`` ``bos.adt.lib `` ``bos.adt.libm `` ``bos.perf.perfstat `` ``bos.perf.libperfstat`` ``bos.perf.proctools``|
|Cannot access /usr/bin/lslpp|Grant execute permissions on ``/usr/bin/lslpp`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00020" mode="VERIFY" name="Patches">
<sdp_command type="RDA"><![CDATA[import $OS_LVL
if !testFile('ex','/usr/sbin/instfix')
 return setHcveResult('Cannot access /usr/sbin/instfix')
macro chk_patch
{var (\@tbl,$low,@pch) = @arg
 if compare('ge',$low,'07')
  var @pch = (@pch,'IY76141')
 elsif compare('ge',$low,'03')
  var @pch = (@pch,'IY76140')
 loop $pch (@pch)
 {if !grepCommand(concat('/usr/sbin/instfix -ia -ivk ',$pch),$pch,'f')
   call push(@tbl,$pch)
 }
}
var ($hgh,$low) = split('\-',$OS_LVL,2)
if compare('eq',$hgh,'5200')
 call chk_patch(\@tbl,$low,'IY43980','IY44810','IY45462','IY45707',\
                           'IY46214','IY46605','IY48525')
elsif compare('ge',$hgh,'5300')
 call chk_patch(\@tbl,$low,'IY66513','IY70159')
call setHcveResult(cond(\
  scalar(@tbl),concat('Missing [',join(' ',@tbl),']'),'All patches exist'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the necessary operating system patches are installed.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="All patches exist" result="PASSED"><![CDATA[All operating system patches are installed.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Missing ...|Install the listed missing patches.|
|Cannot access /usr/sbin/instfix|Grant execute permissions on ``/usr/sbin/instfix`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00021" mode="VERIFY" name="Port 1521">
<sdp_command type="RDA"><![CDATA[var @lst = grepCommand('/bin/netstat -an','LISTEN')
if !grep(@lst,'1521','f')
 return setHcveResult('Free')
if testFile('x','/usr/sbin/lsof')
 var ($prc) = grepCommand('/usr/sbin/lsof -i TCP:1521','LIST','f')
elsif testFile('x','/usr/bin/lsof')
 var ($prc) = grepCommand('/usr/bin/lsof -i TCP:1521','LIST','f')
elsif testFile('x','/usr/local/bin/lsof')
 var ($prc) = grepCommand('/usr/local/bin/lsof -i TCP:1521','LIST','f')
else
 return setHcveResult('Cannot use lsof')
if !length($prc)
 return setHcveResult('Cannot use lsof')
macro chk_tns
{var ($prc) = @arg
 var @cmd = grepCommand('ps -ef',field('\s+',1,$prc))
 var @ver = command(replace(field(\
    '\s+',8,grep(@cmd,'tnslsnr','f')),'tnslsnr','lsnrctl version'))
 var $ver = field('\s+',6,grep(@ver,'LSNRCTL','f'))
 return cond(compare('older',$ver,'9.0.1'),\
             concat('TNS Listener version [',$ver,'] is running'),\
             'TNS Listener 9.0.1 or later is running')
}
call setHcveResult(cond(not(match(field('\s+',0,$prc),'tnslsnr',true)),\
                        'Port is used by non-Oracle program',\
                        chk_tns($prc)))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that port 1521 is free. If an Oracle listener version 9.0.1 or later uses port 1521, then the existing database and the Oracle Application Server 10g Metadata Repository will use the existing listener. The installer performs this configuration automatically. If an Oracle listener version earlier than 9.0.1 uses port 1521, then the existing listener must be stopped. After the installation is complete, you can configure the new 9.0.1 listener to listen to the existing (pre 9.0.1) databases. If non-Oracle programs use port 1521, then this program must be configured to listen to ports other than 1521. For more information, see the "If Port 1521 is in Use" section of the ''Oracle Application Server 10g Installation Guide''.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" maximum="N" minimum="TNS Listener 9.0.1 or later is running|Free" result="PASSED"><![CDATA[Port 1521 is not used or is used by TNS Listener version 9.0.1 or later.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|TNS Listener version ... is running|Stop the existing listener.|
|Port is used by non-Oracle program|Reconfigure the program to use a different port than 1521.|
|Cannot use lsof|Check port 1521 manually.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00022" mode="VERIFY" name="Environment Variables">
<sdp_command type="RDA"><![CDATA[if grepEnv('^(TNS_ADMIN|ORA_NLS|ORA_NLS32|ORA_NLS33)$')
 return setHcveResult('Some variables are set')
if testFile('e','/etc/oratab')
{if !testFile('r','/etc/oratab')
  return setHcveResult('Cannot access /etc/oratab')
 var @pth = (split(':',join(':',getEnv('PATH'),\
                                getEnv('CLASSPATH'),\
                                getEnv('LD_LIBRARY_PATH'))))
 loop $lin (grepFile('/etc/oratab','#|^$','v'))
 {var $pat = concat('^',quote(replace(field(':',1,$lin),'\/+$')),'(\/.*)?$')
  if grep(@pth,$pat)
   return setHcveResult('Variables containing reference to existing \
                         Oracle homes')
 }
}
return setHcveResult('Properly defined')

]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the following environment variables are not set: ``TNS_ADMIN``, ``ORA_NLS``, ``ORA_NLS32``, and ``ORA_NLS33. In addition, the following environment variables must not reference to any existing Oracle home, ``PATH``, ``CLASSPATH``, and ``LD_LIBRARY_PATH.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" maximum="N" minimum="Properly defined" result="PASSED"><![CDATA[Environment variables do not have references to existing Oracle home directories.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Variables containing reference to existing Oracle homes|Remove any reference to existing Oracle home directories from ``PATH``, ``CLASSPATH``, and ``LD_LIBRARY_PATH``.|
|Some variables are set|Unset ``TNS_ADMIN``, ``ORA_NLS``, ``ORA_NLS32``, and ``ORA_NLS33``.|
|Cannot access /etc/oratab|Grant read permissions on ``/etc/oratab`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00023" mode="RECORD" name="Domain Name">
<sdp_command type="RDA"><![CDATA[var ($hst) = command('hostname')
var ($nam,$dom) = split('\.',$hst,2)
if testFile('x','/bin/domainname')
 var ($nis) = command('/bin/domainname')
if testFile('r','/etc/resolv.conf')
 var $dns = field('\s+',1,grepFile('/etc/resolv.conf','domain'))
if testFile('x','/usr/bin/nslookup')
{if $nam
 {var $nsl = field(concat(quote($nam),'\.'),1,\
                  grepCommand(concat('/usr/bin/nslookup ',$hst),'Name','f'))
 }
 else
 {var $nsl = field(concat(quote($hst),'\.'),1,\
                  grepCommand(concat('/usr/bin/nslookup ',$hst),'Name','f'))
 }
}
call setHcveResult(cond($dom,$dom,\
                        $nis,$nis,\
                        $dns,$dns,\
                        $nsl,$nsl,\
                            'NotFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule gets the host domain name.]]></sdp_description>
</sdp_rule>
<sdp_rule id="A00024" mode="RECORD" name="IP Address">
<sdp_command type="RDA"><![CDATA[var ($hst) = command('hostname')
var @lst = grepCommand(concat('/usr/sbin/ping -c 1 ',$hst),'.')
call setHcveResult(replace(field('\s+',3,grep(@lst,'\d+:','f')),':'))
]]></sdp_command>
<sdp_description><![CDATA[This rule gets the host IP address.]]></sdp_description>
</sdp_rule>
<sdp_rule id="A00025" mode="VERIFY" name="DNS Lookup">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00024" minimum="RECORD" result="FAILED"><![CDATA[Requires rule A00024.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $ip  = "%A00024%"
var $hst = field('\.',0,command('hostname'))
call setHcveResult(cond(\
  not(length($ip)),\
    'Cannot determine IP address',\
  not(testFile('x','/usr/bin/nslookup')),\
    'Cannot access /usr/bin/nslookup',\
  and(grepCommand(concat('/usr/bin/nslookup ',$hst),quote($ip),'f'),\
      grepCommand(concat('/usr/bin/nslookup ',$ip),quote($hst),'f')),\
    'Host correctly registered in DNS',\
    'Host not correctly registered in DNS'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the host is registered correctly in the DNS.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Host correctly registered in DNS" result="PASSED"><![CDATA[The host is registered correctly in the DNS.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Host not correctly registered in DNS|Register the host.domain in the DNS.|
|Cannot determine IP address|Fix any problem with the host IP address.|
|Cannot access /usr/bin/nslookup|Grant execute permissions on ``/usr/bin/nslookup`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00026" mode="VERIFY" name="/etc/hosts Format">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00023" minimum="PASSED|RECORD" result="FAILED"><![CDATA[Requires domain name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
if !testFile('r','/etc/hosts')
 return setHcveResult('Cannot access /etc/hosts')
if !@tbl = grepFile('/etc/hosts',\
  concat('^([^\s\#]+\s+)+',quote(${RDA.HOST}),\
         '\s+([^\s\#]+\s+)*',quote(${RDA.NODE}),'(\s|\z|\#)'))
 return setHcveResult('no entry found')

# Test that line begins with IPv4 IP address
if grep(@tbl,'^(\d{1,3}\.){3}\d{1,3}\s','f')
 return setHcveResult('Adequate IPv4 entry')

# Tests that line begins with IPv6 IP address, first that all eight groups are populated, then situations where groups that are all zero are omitted (two colons together).
if grep(@tbl,'^([A-F\d]{1,4}(:[A-F\d]{1,4}){7}\s|\
                :(:[A-F\d]{1,4}){1,6}\s|\
                ([A-F\d]{1,4}:){1,5}(:[A-F\d]{1,4}){1,5}\s|\
                ([A-F\d]{1,4}:){1,6}:\s)','f')
 return setHcveResult('Adequate IPv6 entry')
return setHcveResult('no correct entry found')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``/etc/hosts`` file contains a line with ``ip_address fully_qualified_domainname short_hostname``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="^Adequate" result="PASSED"><![CDATA[The ``/etc/hosts`` entry for the fully qualified domain name and host name is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="Cannot access /etc/hosts" result="FAILED"><![CDATA[Grant read permissions on ``/etc/hosts`` to the current user.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The fully qualified host name and host name are not configured correctly. Ensure that there is an IP address entry for the fully qualified domain name with the host name as one of the aliases.
|*Return Value*|*Action"|
|no entry found|No entry with the fully qualified domain name followed by the host name was found.|
|no correct entry found|No entry beginning with an IP address with the fully qualified domain name followed by the host name was found.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00027" mode="VERIFY" name="Oracle Home Length">
<sdp_command type="RDA"><![CDATA[var $ORACLE_HOME = getEnv('ORACLE_HOME')
call setHcveResult(cond(\
  not(defined($ORACLE_HOME)),\
    'ORACLE_HOME is not set',\
  expr('<=',length($ORACLE_HOME),127),\
    'Less than 127 char',\
    'Longer than 127 characters'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the path to the Oracle home directory is not longer than 127 characters.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Less than 127 char" result="PASSED"><![CDATA[The Oracle home directory is not longer than 127 characters.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Longer than 127 characters|Change ORACLE_HOME to a directory not longer than 127 characters.|
|ORACLE_HOME is not set|Set the ORACLE_HOME environment variable.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
<sdp_rule id="A00028" mode="VERIFY" name="NLS_LANG Defined?">
<sdp_command type="RDA"><![CDATA[var $env = getEnv('NLS_LANG')
call setHcveResult(cond(\
  not(defined($env)),\
    'Not set',\
  match($env,'american_america',true),\
    'Set properly',\
    'Not set properly'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``NLS_LANG`` environment variable is defined. If it is defined, then it must be set to ``American_America``, otherwise the Oracle Internet Directory (OID) Configuration Assistant will fail.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="Not set|Set properly" result="PASSED"><![CDATA[The ``NLS_LANG`` environment variable is set properly or is not set.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Not set properly|Set the ``NLS_LANG`` environment variable to ``AMERICAN_AMERICA.&lt;characterset&gt;``|]]></sdp_action>
</sdp_actions>
</sdp_rule>
</sdp_group>
</sdp_content>
</sdp_diaglet>


