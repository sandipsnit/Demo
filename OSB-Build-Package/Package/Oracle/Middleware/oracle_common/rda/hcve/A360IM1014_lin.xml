<sdp_diaglet platform="linux" product="IM1014" set="A360IM1014_lin" title="Oracle Identity Management 10g (10.1.4) Preinstall (Linux)" type="A">
<sdp_meta type="version" id="$Id: A360IM1014_lin.xml,v 1.16 2012/07/27 18:46:24 mschenke Exp $" header="$Header: /home/cvs/cvs/RDA_4/src/scripting/lib/hcve/A360IM1014_lin.xml,v 1.16 2012/07/27 18:46:24 mschenke Exp $" version="1.0"/>
<sdp_meta author="JCR" change="Improve Power PC OS verification" date="20120727" type="history"/>
<sdp_content set="A360IM1014_lin" title="Oracle Identity Management 10g (10.1.4) Preinstall (Linux)" type="check">
<sdp_group>

<sdp_rule id="A00010" mode="RECORD" name="OS">
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$OS_BIT,$OS_NAM,$OS_TYP
var $BOOK
var $BOOK_I64 = 'Oracle Application Server Installation Guide 10g (10.1.4.0.1) \
                 for Linux Itanium'
var $BOOK_X86 = 'Oracle Application Server Installation Guide 10g (10.1.4.0.1) \
                 for Linux x86'
var $BOOK_IPS = 'Oracle Application Server Installation Guide 10g (10.1.4.0.1) \
                 for Linux on POWER'
var $BOOK_IZS = 'Oracle Application Server Installation Guide 10g (10.1.4.0.1) \
                 for IBM zSeries Based Linux'
var $CERTIF = 'Oracle Identity Management Certification Information Oracle \
               Identity Management (10.1.4) on Certify'
var $TYPE
call setHcveVariable('$BOOK','$BOOK_I64','$BOOK_IPS','$BOOK_IZS','$BOOK_X86',\
                     '$CERTIF','$TYPE')
if match($OS_ARC,'Itanium')
 var ($BOOK,$TYPE) = ($BOOK_I64,'Itanium')
elsif match($OS_ARC,'AMD|Intel')
 var ($BOOK,$TYPE) = ($BOOK_X86,'x86')
elsif match($OS_ARC,'Power|pSeries')
 var ($BOOK,$TYPE) = ($BOOK_IPS,'pSeries')
elsif match($OS_ARC,'zSeries|IBM/S390')
 var ($BOOK,$TYPE) = ($BOOK_IZS,'zSeries')
else
 return setHcveResult(concat('Other [',$OS_NAM,']'))
call setHcveResult(check($OS_TYP,\
   'Oracle',check(lc($OS_NAM),\
                  '(carthage|^oracle.*release\s5\.\d+$)',\
                              concat($OS_ARC,' ','OL5 ',$OS_BIT,'-bit'),\
                  'october',  concat($OS_ARC,' ','OL4 ',$OS_BIT,'-bit'),\
                              'Uncertified Oracle Linux version'),\
   'Red Hat',   check(lc($OS_NAM),\
                  'tikanga',  concat($OS_ARC,' ','RH5 ',$OS_BIT,'-bit'),\
                  'nahant',   concat($OS_ARC,' ','RH4 ',$OS_BIT,'-bit'),\
                  'taroon',   concat($OS_ARC,' ','RH3 ',$OS_BIT,'-bit'),\
                  'pensacola',concat($OS_ARC,' ','RH2 ',$OS_BIT,'-bit'),\
                              'Uncertified Red Hat Linux version'),\
   'SuSE',      check($OS_NAM,\
                  'SLES-8',   concat($OS_ARC,' ','SLES-8 ',$OS_BIT,'-bit'),\
                  'SLES-9',   concat($OS_ARC,' ','SLES-9 ',$OS_BIT,'-bit'),\
                  'SLES-10',  concat($OS_ARC,' ','SLES-10 ',$OS_BIT,'-bit'),\
                              'Uncertified SuSE Linux version'),\
                'Uncertified OS'))
]]>
</sdp_command>
<sdp_description><![CDATA[This rule retrieves the operating system (OS) description.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00020" mode="VERIFY" name="Processor Type OK?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_ARC,$TYPE
if !loadFile('/proc/cpuinfo')
 return setHcveResult('Cannot access /proc/cpuinfo')
if match($TYPE,'Itanium')
 return setHcveResult(cond(grepLastFile('family\s*:\sItanium\s2','fi'),\
   'Acceptable',\
   'Not acceptable Itanium'))
if match($TYPE,'x86')
{if match($OS_ARC,'AMD')
  var $X86 = cond(grepLastFile('name.*Opteron','f'),'AMD Opteron','AMD Other')
 else
  var $X86 = cond(grepLastFile('flag.*lm','f'),'Intel64','Intel32')
 call setHcveVariable('$X86')
}

if grepLastFile('flags\s*:.*\blm\b','f')
 call setHcveResult(check($TYPE,\
   'POWER|zSeries','Acceptable',\
                   cond(match($X86,'Intel64'),'Acceptable',\
                                              'Not acceptable x86')))
else
 call setHcveResult(check($TYPE,\
   'pSeries',  'Not acceptable POWER',\
   'zSeries','Not acceptable zSeries',\
             'Acceptable'))
]]>
</sdp_command>
<sdp_description><![CDATA[This rule determines if the processor type is acceptable. The minimum requirements for processor are an Itanium-2 for Itanium, an Intel 32-bit, an Intel EM64T for Intel 64-bit, an AMD 64-bit, an 64-bit processor for IBM pSeries, IBM zSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Acceptable" result="PASSED"><![CDATA[The processor type is acceptable.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Not acceptable Itanium|An Itanium processor that is not Itanium-2 was detected in your system. Refer to ${'BOOK_I64} for more information on requirements.|
|Not acceptable x86|An Intel processor that is not an Intel 32-bit or EM64T-compliant or an AMD 64-bit processor was detected in your system. Refer to ${'BOOK_X86} for more information on requirements.|
|Not acceptable POWER|A POWER processor that is not 64-bit was detected in your system. Refer to ${'BOOK_IPS} for more information on requirements.|
|Not acceptable zSeries|Refer to ${'BOOK_IZS} for more information on requirements.|
|Cannot access /proc/cpuinfo|Grant read permissions to ``/proc/cpuinfo`` to the user that is logged in.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00030" mode="VERIFY" name="Process Speed OK?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $TYPE
var ($lin) = grepLastFile('(cpu clock|MHz)\s*:','f')
call setHcveResult(check($TYPE,\
  'Itanium',cond(expr('>=',field('\s+:\s+',1,$lin),900),\
    'Acceptable',\
    'Need 900 MHz'),\
  'x86',cond(expr('>=',field('\s+:\s+',1,$lin),450),\
    'Acceptable',\
    'Need 450 MHz'),\
  'pSeries',cond(expr('>=',replace(field('\s+:\s+',1,$lin),'MHz'),900),\
    'Acceptable',\
    'Need 900 MHz'),\
  'Acceptable'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule determines whether the processor speed is adequate. For Itanium processors, the minimum speed is 900 MHz. For x86/x86-64 type processors, the minimum speed is 450 MHz. For IBM pSeries processors, the minimum speed is 900 MHz.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Acceptable" result="PASSED"><![CDATA[The processor speed is adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need 450 MHz|Use a processor with a speed of 450 MHz or more.|
|Need 900 MHz|Use a processor with a speed of 900 MHz or more.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00110" mode="VERIFY" name="OS OIMgr Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE,$X86
macro chk_version
{var ($pat,$ref) = @arg
 import $OS_NAM
 if match($OS_NAM,$pat,true)
  return compare('VALID',last,$ref)
 return 0
}

call setHcveResult(check($TYPE,\
  'x86',check($OS_TYP,\
    'Oracle',\
      cond(match($OS_NAM,'(carthage|^oracle.*release\s5\.\d+$)',true),\
             'Certified',\
           chk_version('release\s+(\d+\.\d+).*october','5.3'),\
             'Certified',\
           'Not Certified Oracle'),\
    'Red Hat',\
      cond(match($OS_NAM,'nahant',true),\
             'Certified',\
           chk_version('release\s+(\d+\.\d+).*Tikanga','5.3'),\
             'Certified',\
           'Not Certified Red Hat'),\
    'SuSE',\
      cond(match($OS_NAM,'SLES-10',true),\
             cond(and(grepLastFile('name\s*:.*Core.*2.*Duo'),\
                      expr('==',$OS_BIT,32)),\
                    'Certified',\
                  and(match($X86,'Intel64'),expr('==',$OS_BIT,64)),\
                    'Certified',\
                  'Not Certified SuSE Processor'),\
           'Not Certified SuSE'),\
    'Not Certified OS Type'),\
  'Not Certified Type'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the Linux operating system is certified for Oracle Identity Manager (OIMgr). The operating systems that are certified for Oracle Identity Manager are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED"><![CDATA[The operating system is certified for Oracle Identity Manager.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The operating system is not certified for Oracle Identity Manager. Refer to ${'CERTIF} for the certified operating systems for Oracle Identity Manager. 
|*Return Value*|*Action*|
|Not Certified Oracle|Your operating system was detected to be Oracle Linux, but not Oracle Linux 5.3 or 4.|
|Not Certified Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Enterprise Linux 5.3 or 4 or 3.|
|Not Certified SuSE Processor|Your operating system was detected to be SuSE Linux Enterprise Server 10, but not one of the following combinations: SuSE Linux Enterprise Server 10 32-bit on Pentium Core 2 Duo or SuSE Linux Enterprise Server 10 64-bit on Intel EM64T-compliant 64-bit.|
|Not Certified SuSE|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 10.|
|Not Certified OS Type|Your system was detected to be based on x86/x86-64 type processor, but not using an Oracle, Red Hat, or SuSE operating system.|
|Not Certified Type|Your system was detected to not be based on a certified x86/x86-64 type processor.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00120" mode="VERIFY" name="OS OIF Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE,$X86
call setHcveResult(check($TYPE,\
  'Itanium',check($OS_TYP,\
    'Red Hat',\
      cond(match($OS_NAM,'(EL|Enterprise).*(taroon|nahant)',true),\
             'Certified',\
             'Not certified Itanium Red Hat'),\
    'SuSE',\
      cond(match($OS_NAM,'SLES-9',true),\
             'Certified',\
             'Not certified Itanium SuSE'),\
    'Not certified Itanium'),\
  'x86',check($OS_TYP,\
    'Asianux',check($X86,\
      'Intel32',cond(match($OS_NAM,'2'),\
             'Certified',\
             'Not certified x86 Asianux Intel32'),\
      'Not certified x86 Asianux'),\
    'Oracle',check($X86,\
      'AMD Opteron',\
           cond(match($OS_NAM,\
             'carthage|october|^oracle.*release\s5\.\d+$',true),\
            'Certified',\
            'Not certified x86 Oracle AMD Opteron'),\
      'Intel32',\
           cond(and(match($OS_NAM,'october',true),expr('==',$OS_BIT,32)),\
             'Certified',\
           cond(match($OS_NAM,'carthage|^oracle.*release\s5\.\d+$',true)),\
             'Certified',\
             'Not certified x86 Oracle Intel32'),\
      'Intel64',\
           cond(match($OS_NAM,\
             'carthage|october|^oracle.*release\s5\.\d+$',true),\
             'Certified',\
             'Not certified x86 Oracle Intel64'),\
      'Not certified x86 Oracle'),\
    'Red Hat',check($X86,\
      'AMD Opteron',\
        cond(match($OS_NAM,'tikanga',true),\
               'Certified',\
             and(match($OS_NAM,'(EL|Enterprise).*(taroon|nahant)',true),\
                 expr('==',$OS_BIT,64)),\
               'Certified',\
             'Not certified x86 Red Hat AMD Opteron'),\
      'Intel32',\
        cond(and(match($OS_NAM,'tikanga',true),expr('==',$OS_BIT,32)),\
               'Certified',\
             and(match($OS_NAM,'(EL|Enterprise).*(taroon|nahant)',true),\
                 expr('==',$OS_BIT,64)),\
               'Certified',\
             match($OS_NAM,'(AS|Advanced).*(pensacola|nahant)',true),\
               'Certified',\
             'Not certified x86 Red Hat Intel32'),\
      'Intel64',\
        cond(match($OS_NAM,'tikanga',true),\
               'Certified',\
             and(match($OS_NAM,'taroon|nahant',true),expr('==',$OS_BIT,64)),\
               'Certified',\
             'Not certified Red Hat Intel64'),\
      'Not certified x86 Red Hat'),\
    'SuSE',check($X86,\
      'AMD Opteron|Intel64',\
         cond(match($OS_NAM,'SLES-(9|10)'),\
          'Certified',\
          'Not certified SuSE AMD Opteron Intel64'),\
      'Intel32',\
         cond(match($OS_NAM,'SLES-(8|9|10)'),\
          'Certified',\
          'Not certified SuSE Intel32'),\
      'Not certified x86 SuSE'),\
    'Not certified x86'),\
  'pSeries',check($OS_TYP,\
    'Red Hat',\
      cond(match($OS_NAM,'(EL|Enterprise).*nahant',true),\
             'Certified',\
             'Not certified pSeries Red Hat'),\
    'SuSE',\
      cond(match($OS_NAM,'SLES-9'),\
             'Certified',\
             'Not certified pSeries SuSE'),\
    'Not certified pSeries'),\
  'zSeries',\
    cond(and(grepLastFile('flags\s*:\blm\b','f'),\
             expr('==',$OS_BIT,64)),check($OS_TYP,\
           'Red Hat',\
             cond(match($OS_NAM,'(AS|Advanced).*nahant',true),\
               'Certified',\
               'Not certified zSeries Red Hat'),\
           'SuSE',\
             cond(match($OS_NAM,'SLES-9'),\
               'Certified',\
               'Not certified zSeries SuSE'),\
           'Not certified zSeries 64-bit'),\
         'Not certified zSeries'),\
  'Not Certified'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the Linux operating system is certified for Oracle Identity Federation (OIF). The operating systems that are certified for Oracle Identity Federation are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Identity Federation.]]>
</sdp_action>
<sdp_action condition="==" minimum="No Access" result="FAILED">
<![CDATA[Grant execute permissions on ``/usr/sbin/prtconf`` to the user who is logged in.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Identity Federation. Refer to ${'CERTIF} for the certified operating systems for Oracle Identity Federation. 
|*Return Value*|*Action*|
|Not certified Itanium Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Enterprise Linux 3 or 4.|
|Not certified Itanium SuSE|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 9.|
|Not certified Itanium|Your system was detected to be based on Itanium, but not using Red Hat or SuSE operating system.|
|Not certified x86 Asianux Intel32|Your operating system was detected to be Asianux, but not to be Asianux 2.0.|
|Not certified x86 Asianux|Your operating system was detected to be Asianux, but not to be on an Intel 32-bit processor.|
|Not certified x86 Oracle AMD Opteron|Your operating system was detected to be Oracle Linux, but not Oracle Linux 5 or 4.|
|Not certified x86 Oracle Intel32|Your operating system was detected to be Oracle Linux, but not Oracle Linux 5 32-bit or Oracle Linux 4 32-bit or 64-bit.|
|Not certified x86 Oracle Intel64|Your operating system was detected to be Oracle Linux, but not Oracle Linux 5 or 4.|
|Not certified x86 Oracle|Your operating system was detected to be Oracle Linux, but not on an x86/x86-64 type processor.|
|Not certified x86 Red Hat AMD Opteron|Your operating system was detected to be Red Hat Linux, but not Red Hat Enterprise Linux 5 or Red Hat Enterprise Linux 3 or 4 64-bit.|
|Not certified x86 Red Hat Intel32|Your operating system was detected to be Red Hat Linux, but not Red Hat Enterprise Linux 5 32-bit or Red Hat Advanced Server 4 32-bit or Red Hat Enterprise Linux 64-bit or Red Hat Enterprise Linux 3 64-bit or Red Hat Advanced Server 2.1 32-bit.|
|Not certified x86 Red Hat Intel64|Your operating system was detected to be Red Hat Linux, but not Red Hat Enterprise Linux 5 or Red Hat Enterprise Linux 3 or 4 64-bit.|
|Not certified x86 Red Hat|Your operating system was detected to be Red Hat Linux, but not on an approved processor.|
|Not certified x86 SuSE AMD Opteron Intel64|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 9 or 10.|
|Not certified x86 SuSE Intel32|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 8, 9, or 10.|
|Not certified x86 SuSE|Your operating system was detected to be SuSE, but not on an approved processor.|
|Not certified x86|Your system was detected to be x86/x86-64 type based, but not using an Oracle, Asianux, Red Hat, or SuSE operating system.|
|Not certified pSeries Red Hat|Your operating system was detected to be Red Hat on pSeries, but not using Red Hat Enterprise Linux 4.|
|Not certified pSeries SuSE|Your operating system was detected to be SuSE on pSeries, but not using SuSE Linux Enterprise Server 9.|
|Not certified pSeries|Your system was detected to be pSeries based, but not using Red Hat or SuSE operating system.|
|Not certified zSeries Red Hat|Your operating system was detected to be Red Hat, but not using Red Hat Linux Advanced Server 4 64-bit.|
|Not certified zSeries SuSE|Your operating system was detected to be SuSE, but not using SuSE Linux Enterprise Server 9 64-bit.|
|Not certified zSeries 64-bit|Your system was detected to be based on IBM zSeries 64-bit, but not using Red Hat or SuSE operating system.|
|Not certified zSeries|Your system was detected to be based on IBM zSeries, but either not a 64-bit processor or not a 64-bit operating system.|
|Not certified|Your system has been found to not be based on an approved Itanium, x86, pSeries, or zSeries. You must use an approved architecture.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>  
    	
<sdp_rule id="A00130" mode="VERIFY" name="OS OAM Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE
call setHcveResult(check($TYPE,\
  'x86',check($OS_TYP,\
    'Oracle',\
      cond(match($OS_NAM,'carthage|october|^oracle.*release\s5\.\d+$',true),\
        'Certified',\
        'Not Certified Oracle'),\
    'Red Hat',\
      cond(match($OS_NAM,'nahant|tikanga',true),\
             'Certified',\
           and(match($OS_NAM,'taroon',true),expr('==',$OS_BIT,32)),\
             'Certified',\
           'Not Certified Red Hat'),\
    'SuSE',\
      cond(and(match($OS_NAM,'SLES-9'),expr('==',$OS_BIT,32)),\
        'Certified',\
        'Not Certified SuSE'),\
    'Not Certified OS Type'),\
  'Not Certified Type'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the Linux operating system is certified for Oracle Access Manager. The operating systems that are certified for Oracle Access Manager are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Access Manager.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Access Manager. Refer to ${'CERTIF} for the certified operating systems for Oracle Access Manager.
|*Return Value*|*Action*|
|Not Certified Oracle|Your operating system was detected to be Oracle Linux, but not Oracle Linux 4 or 5.|
|Not Certified Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Advanced Platform 5, Red Hat Enterprise Linux 5, Red Hat Advanced Server 3 or 4, Red Hat ES 3 or 4.|
|Not Certified SuSE|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 9 32-bit.|
|Not Certified OS Type|Your system was detected to be on an x86/x86-64 type processor, but not using an Oracle, Red Hat, or SuSE operating system.|
|Not Certified Type|Your system was detected to not be based on an x86/x86-64 type processor.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00140" mode="VERIFY" name="OS OVD Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE
call setHcveResult(check($TYPE,\
  'x86',check($OS_TYP,\
    'Oracle',\
      cond(match($OS_NAM,'carthage|october|^oracle.*release\s5\.\d+$',true),\
        'Certified',\
        'Not Certified Oracle'),\
    'Red Hat',\
      cond(match($OS_NAM,'nahant|tikanga',true),\
             'Certified',\
           and(match($OS_NAM,'taroon',true),expr('==',$OS_BIT,32)),\
             'Certified',\
           'Not Certified Red Hat'),\
    'SuSE',\
      cond(match($OS_NAM,'SLES-10',true),\
             'Certified',\
           and(match($OS_NAM,'SLES-9',true),expr('==',$OS_BIT,32)),\
             'Certified',\
           'Not Certified SuSE'),\
    'Not Certified OS Type'),\
  'Not Certified Type'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the operating system is certified for Oracle Virtual Directory (OVD). The operating systems that are certified for Oracle Virtual Directory are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Virtual Directory.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Virtual Directory. Refer to ${'CERTIF} for the certified operating systems for Oracle Virual Directory.
|*Return Value*|*Action*|
|Not Certified Oracle|Your operating system was detected to be Oracle Linux, but not Oracle Linux 4 or 5.|
|Not Certified Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Enterprise Linux 4 or 5, Red Hat Enterprise Linux 3 32-bit.|
|Not Certified SuSE|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 10 or SuSE Linux Enterprise Server 9 32-bit.|
|Not Certified OS Type|Your system was detected to be on an x86/x86-64 type processor, but not using an Oracle, Red Hat, or SuSE operating system.|
|Not Certified Type|Your system was detected to not be based on an approved x86/x86-64 type processor.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00150" mode="VERIFY" name="OS ORM Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE
call setHcveResult(check($TYPE,\
  'x86',check($OS_TYP,\
    'Oracle',cond(match($OS_NAM,\
      'carthage|october|^oracle.*release\s5\.\d+$',true),\
      'Certified',\
      'Not Certified Oracle'),\
    'Red Hat',cond(match($OS_NAM,'nahant|tikanga',true),\
      'Certified',\
      'Not Certified Red Hat'),\
    'SuSE',cond(and(match($OS_NAM,'SLES-10'),expr('==',$OS_BIT,32)),\
      'Certified',\
      'Not Certified SuSE'),\
    'Not Certified OS Type'),\
  'Not Certified Type'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the Linux operating system is certified for Oracle Role Manager (ORM). The operating systems that are certified for Oracle Role Manager are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Role Manager.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Role Manager. Refer to ${'CERTIF} for the certified operating systems for Oracle Role Manager.
|*Return Value*|*Action*|
|Not Certified Oracle|Your operating system was detected to be Oracle Linux, but not Oracle Linux 4 or 5.|
|Not Certified Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Enterprise Linux 4 or 5.|
|Not Certified SuSE|Your operating system was detected to be SuSE, but not SuSE Linux Enterprise Server 10 32-bit.|
|Not Certified OS Type|Your system was detected to be on an x86/x86-64 type processor, but not using an Oracle, Red Hat, or SuSE operating system.|
|Not Certified Type|Your system was detected to not be based on an x86/x86-64 type processor.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00160" mode="VERIFY" name="OS OAAM Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE
call setHcveResult(check($TYPE,\
  'x86',check($OS_TYP,\
    'Red Hat',cond(and(match($OS_NAM,'Enterprise.*nahant',true),\
                       expr('==',$OS_BIT,32)),\
      'Certified',\
      'Not Certified Red Hat'),\
    'Not Certified OS Type'),\
  'Not Certified Type'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks if the Linux operating system is certified for Oracle Adaptive Access Manager (OAAM). The operating systems that are certified for Oracle Adaptive Access Manager are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Adaptive Access Manager.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Adaptive Access Manager. Refer to ${'CERTIF} for the certified operating systems for Oracle Adaptive Access Manager.
|*Return Value*|*Action*|
|Not Certified Red Hat|Your operating system was detected to be Red Hat, but not Red Hat Enterprise Linux 4 32-bit.|
|Not Certified OS Type|Your system was detected to be on an x86/x86-64 type processor, but not using a Red Hat operating system.|
|Not Certified Type|Your system was detected to not be based on an approved x86/x86-64 type processor.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00170" mode="VERIFY" name="OS OID and SSO Certified?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$OS_NAM,$OS_TYP,$TYPE,$X86
macro chk_el_version
{var ($rel) = @arg
 import $OS_NAM
 if !match($OS_NAM,$rel,true)
  return 0
 return 1
}

macro chk_rh_version
{var ($rel,$typ) = @arg
 import $OS_NAM
 if !match($OS_NAM,$rel,true)
  return 0
 if ?$typ
 {if !grepFile('/etc/redhat-release',$typ)
   return 0
 }
 return 1
}

call setHcveResult(check($TYPE,\
  'Itanium',check($OS_TYP,\
    'Red Hat',cond(chk_rh_version('taroon|nahant','EL|Enterprise'),\
       'Certified',\
       'Uncertified for Itanium Red Hat'),\
    'SuSE',cond(match($OS_NAM,'SLES-9'),\
       'Certified',\
       'Uncertified for Itanium SuSE'),\
    'Uncertified for Itanium OS Type'),\
  'x86',check($OS_TYP,\
    'Asianux',cond(and(match($OS_NAM,'2'),match($OS_ARC,'Intel')),\
      'Certified',\
      'Uncertified for x86 Asianux'),\
    'Oracle',check($X86,\
      'AMD Opteron',\
        cond(and(chk_el_version('carthage|october|^oracle.*release\s5\.\d+$'),\
                 expr('==',$OS_BIT,64)),\
          'Certified',\
          'Uncertified for x86 Oracle AMD Opteron'),\
      'Intel32',\
        cond(chk_el_version('carthage|october|^oracle.*release\s5\.\d+$'),\
          'Certified',\
          'Uncertified for x86 Oracle Intel32'),\
      'Intel64',\
         cond(chk_el_version('october'),\
                'Certified',\
              and(chk_el_version('carthage|^oracle.*release\s5\.\d+$'),\
                  expr('==',$OS_BIT,64)),\
                'Certified',\
              'Uncertified for x86 Oracle Intel64'),\
      'Uncertified for x86 Oracle'),\
    'Red Hat',check($X86,\
      'AMD Opteron',\
         cond(and(chk_rh_version('tikanga','EL|Enterprise'),\
                  expr('==',$OS_BIT,64)),\
                'Certified',\
              and(chk_rh_version('taroon|nahant'),expr('==',$OS_BIT,64)),\
                'Certified',\
              'Uncertified for x86 Red Hat AMD Opteron'),\
      'Intel32',\
         cond(chk_rh_version('tikanga','AS|Application'),\
                'Certified',\
              chk_rh_version('taroon|nahant','EL|Enterprise'),\
                'Certified',\
              chk_rh_version('pensacola|nahant','AS|Application'),\
                'Certified',\
              'Uncertified for x86 Red Hat Intel32'),\
      'Intel64',\
         cond(and(chk_rh_version('taroon|nahant|tikanga'),\
                  expr('==',$OS_BIT,64)),\
                'Certified',\
              'Uncertified for x86 Red Hat Intel64'),\
      'Uncertified for x86 Red Hat'),\
    'SuSE',check($X86,\
       'AMD Opteron|Intel64',\
         cond(match($OS_NAM,'SLES-(9|10)',true),\
           'Certified',\
           'Uncertified for x86 SuSE 64'),\
       'Intel32',\
         cond(match($OS_NAM,'SLES-(8|9|10)',true),\
           'Certified',\
           'Uncertified for x86 SuSE Intel32'),\
       'Uncertified for x86 SuSE'),\
    'Uncertified for x86 OS Type'),\
  'pSeries',check($OS_TYP,\
    'Red Hat',cond(chk_rh_version('nahant','EL|Enterprise'),\
      'Certified',\
      'Uncertified for pSeries Red Hat'),\
    'SuSE',cond(match($OS_NAM,'SLES-9'),\
      'Certified',\
      'Uncertified for pSeries SuSE'),\
    'Uncertified for pSeries'),\
  'zSeries',check($OS_TYP,\
    'Red Hat',cond(chk_rh_version('nahant','AS|Application'),\
      'Certified',\
      'Uncertified for zSeries Red Hat'),\
    'SuSE',cond(match($OS_NAM,'SLES-9'),\
      'Certified',\
      'Uncertified for zSeries SuSE'),\
    'Uncertified for zSeries'),\
  'Unsupported platform'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if the operating system is certified for Oracle Internet Directory (OID) and Oracle Application Server Single Sign-On (SSO). The operating systems that are certified for Oracle Internet Directory and Oracle Application Server Single Sign-On are specified in ``Oracle Identity Management Certification Information Oracle Identity Management (10.1.4)``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Certified" result="PASSED">
<![CDATA[The operating system is certified for Oracle Internet Directory and Oracle Application Server Single Sign-On.]]></sdp_action>
<sdp_action condition="==" minimum="No Access" result="FAILED">
<![CDATA[Grant execute permissions on ``/usr/sbin/prtconf`` to the user who is logged in.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki">
<![CDATA[The operating system is not certified for Oracle Internet Directory and Oracle Application Server Single Sign-On. Refer to ${'CERTIF} for the certified operating systems for Oracle Internet Directory and Oracle Application Server Single Sign-On.
|*Return Value*|*Action*|
|Uncertified for Itanium Red Hat|Your operating system was detected as being Red Hat, but not Red Hat Enterprise Linux 3 or 4.|
|Uncertified for Itanium SuSE|Your operating system was detected as being SuSE, but not SuSE Linux Enterprise Server 9.|
|Uncertified for Itanium OS Type|Your system was detected as being on an Itanium processor, but not using a Red Hat or SuSE operating system.|
|Uncertified for x86 Asianux|Your operating system was detected as being Asianux, but not Asianux 2.0 on an Intel 32-bit processor.|
|Uncertified for x86 Oracle AMD Opteron|Your operating system was detected as being Oracle, but not Oracle Linux 4 or 5 64-bit.|
|Uncertified for x86 Oracle Intel32|Your operating system was detected as being Oracle, but not Oracle Linux 4 or 5.|
|Uncertified for x86 Oracle Intel64|Your operating system was detected as being Oracle, but not Oracle Linux 5 64-bit or Oracle Linux 4.|
|Uncertified for x86 Oracle|Your operating system was detected as being Oracle, but not using an approved processor architecture.|
|Uncertified for x86 Red Hat AMD Opteron|Your operating system was detected as being Red Hat, but not Red Hat Enterprise Linux 3, 4, or 5 64-bit.|
|Uncertified for x86 Red Hat Intel32|Your operating system was detected as being Red Hat, but not Red Hat Linux 5, Red Hat Advanced Server 2.1 or 4, or Red Hat Enterprise Linux 3 or 4.| 
|Uncertified for x86 Red Hat Intel64|Your operating system was detected as being Red Hat, but not Red Hat Enterprise Linux 5 or Red Hat Enterprise Linux 3 or 4 64-bit.|
|Uncertified for x86 Red Hat|Your operating system was detected as being Red Hat, but not using an approved processor architecture.|
|Uncertified for x86 SuSE 64|Your operating system was detected as being SuSE, but not SuSE Linux Enterprise Server 9 or 10.|
|Uncertified for x86 SuSE Intel32|Your operating system was detected as being SuSE, but not SuSE Linux Enterprise Server 8, 9, or 10.|
|Uncertified for x86 SuSE|Your operating system was detected as being SuSE, but not using an approved processor architecture.|
|Uncertified for x86 OS Type|Your operating system was detected as being x86/x86-64 type processsor based, but not using Asianux, Oracle, Red Hat, or SuSE operating system.|
|Uncertified for pSeries Red Hat|Your operating system was detected as being Red Hat, but not Red Hat Enterprise Linux 4.|
|Uncertified for pSeries SuSE|Your operating system was detected as being SuSE, but not SuSE Linux Enterprise Server 9.|
|Uncertified for pSeries|Your system was detected as using an IBM pSeries architecture, but not using a Red Hat or SuSE operating system.|
|Uncertified for zSeries Red Hat|Your operating system was detected as being Red Hat, but not Red Hat Advanced Server 4.|
|Undertified for zSeries SuSE|Your operating system was detected as being SuSE, but not SuSE Linux Enterprise Server 9.|
|Uncertified for zSeries|Your system was detected as using an IBM zSeries architecture, but not using a Red Hat or SuSE operating system.|
|Unsupported platform|Your system has been found to not be based on an approved Itanium, x86, IBM pSeries, or IBM zSeries. You must use an approved architecture.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00200" mode="RECORD" name="Total Memory">
<sdp_command type="RDA"><![CDATA[var $MEM = undef
call setHcveVariable('$MEM')
var $MEM = field('\s+',1,grepFile('/proc/meminfo','MemTotal','f'))
call setHcveResult(cond(\
  not(testFile('r','/proc/meminfo')),'Cannot access /proc/meminfo',\
                                     concat($MEM,' KB')))]]>
</sdp_command>
<sdp_description><![CDATA[This rule retrieves the available physical memory in KB.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00300" mode="Verify" name="Memory MDR and OIM OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00200" minimum="KB$" result="FAILED" value="Physical memory size required"><![CDATA[This rule needs amount of physical memory.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  expr('>=',$MEM,1048576),'Available',\
                          'Need at least 1 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Oracle Application Server Metadata Repository (MDR) and Oracle Identity Management (OIM) installation type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough memory to install the Oracle Application Server Metadata Repository and Oracle Identity Management installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Oracle Application Server Metadata Repository and Oracle Identity Management installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00310" mode="VERIFY" name="Memory OIM OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00200" minimum="KB$" result="FAILED" value="Physical memory size required"><![CDATA[This rule needs amount of physical memory.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  expr('>=',$MEM,1048576),'Available',\
                          'Need at least 1 GB'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Oracle Identity Management only installation type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough memory to install the Oracle Identity Management only installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Oracle Identity Management only installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00320" mode="VERIFY" name="Memory MDR OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00200" minimum="KB$" result="FAILED" value="Physical memory size required"><![CDATA[This rule needs amount of physical memory.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  expr('>=',$MEM,1048576),'Available',\
                          'Need at least 1 GB'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Oracle Application Server Metadata Repository (MDR) only installation type. The minimum requirement is 1 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough memory to install the Oracle Application Server Metadata Repository only installation type.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1 GB|Increase the memory to 1 GB or more to install the Oracle Application Server Metadata Repository only installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00330" mode="VERIFY" name="Memory OIF OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00200" minimum="KB$" result="FAILED" value="Physical memory size required"><![CDATA[This rule needs amount of physical memory.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $MEM
call setHcveResult(cond(\
  expr('>=',$MEM,524288),'Available',\
                         'Need at least 512 MB'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough memory to install the Oracle Identity Federation (OIF) only installation type. The minimum requirement is 512 MB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough memory to install the Oracle Identity Federation only installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 512 MB|Increase the memory to 512 MB or more to install the Oracle Identity Federation only installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00400" mode="VERIFY" name="Temp Space OK?">
<sdp_command type="RDA"><![CDATA[import $TYPE
call setHcveVariable('$MIN_TEMP')
if match($TYPE,'x86')
{var $min = '409600'
 var $MIN_TEMP = '400 MB'
}
elsif match($TYPE,'(Itanium,POWER|zSeries)')
{var $min = '256000'
 var $MIN_TEMP = '250 MB'
}
else
 return setHcveResult('Architecture needed')
var ($flg,$tmp,@tbl) = (true,{'/tmp','/tmp'})
loop $key ('TMP','TMPDIR')
{if getEnv($key)
  var $tmp->{$key} = last
}
loop $key (keys(%tmp))
{if !testDir('d',$tmp->{$key})
  call push(@tbl,concat($key,' invalidDir'))
 else
 {if !testDir('w',$tmp->{$key})
   call push(@tbl,concat($key,' NoWrite'))
  if and($flg,expr('>=',get_df($tmp->{$key}),$min))
   var $flg = false
 }
}
if $flg
{loop $key (keys(%tmp))
  call push(@tbl,concat($key,' tooSmall'))
}
call setHcveParameter('RULE.A00400',$tmp)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'TempSpaceOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough temporary space. Initially Oracle Universal Installer (OUI) checks the ``TMP`` and ``TMPDIR`` environment variables to locate the temporary directory. If these environment variables do not exist, then OUI uses ``/tmp``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="TempSpaceOK" result="PASSED"><![CDATA[The system has enough temporary space.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|/tmp invalidDir|ALERT - ``/tmp`` is not a valid directory. ``/tmp`` needs to be a directory.|
|/tmp NoWrite|ALERT - The user does not have write permissions to the ``/tmp`` directory.|
|/tmp tooSmall|ALERT - There is less than the needed 400 MB of free space in the ``/tmp`` directory.|
|TMP invalidDir|ALERT - ``TMP`` is set to ${`RULE.A00400.TMP} in the environment; however, ${`RULE.A00400.TMP} is an invalid directory. Take appropriate action.|
|TMP NoWrite|ALERT - ``TMP`` is set to ${`RULE.A00400.TMP} in the environment; however, the user does not have write permissions to ${`RULE.A00400.TMP}.|
|TMP tooSmall|ALERT - ``TMP`` is set to ${`RULE.A00400.TMP} in the environment; however, ${`RULE.A00400.TMP} has less than the required ${MIN_TEMP} of free space. Make sure your temporary space has at least ${MIN_TEMP} of free space.|
|TMPDIR invalidDir|ALERT - ``TMPDIR`` is set to ${`RULE.A00400.TMPDIR} in the environment; however, ${`RULE.A00400.TMPDIR} is an invalid directory. Take appropriate action.|
|TMPDIR NoWrite|ALERT - ``TMPDIR`` is set to ${`RULE.A00400.TMPDIR} in the environment; however, the user does not have write permissions to ${`RULE.A00400.TMPDIR}.|
|TMPDIR tooSmall|ALERT - ``TMPDIR`` is set to ${`RULE.A00400.TMPDIR} in the environment; however, ${`RULE.A00400.TMPDIR} has less than the required ${MIN_TEMP} of free space. Make sure your temporary space has at least ${MIN_TEMP} of free space.|
|Architecture needed|Architecture could not be determined and architecture is needed to determine the amount of temporary space required.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00410" mode="VERIFY" name="Swap space OK?">
<sdp_command type="RDA"><![CDATA[var $SWAP = undef
if !testFile('r','/proc/meminfo')
 return setHcveResult('Cannot access /proc/meminfo')
var $swp = field('\s+',1,grepFile('/proc/meminfo','SwapTotal','f'))
call setHcveResult(cond(expr('>=',$swp,1572864),'Available',\
                                                'Need at least 1.5 GB'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough swap space. The minimum requirement is 1.5 GB.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED"><![CDATA[The system has enough swap space.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 1.5 GB|Increase the swap space to 1.5 GB or more.|
|Cannot access /proc/meminfo|Grant read permissions on ``/proc/meminfo`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00420" mode="RECORD" name="Disk Space">
<sdp_command type="RDA"><![CDATA[var $ORACLE_HOME = getEnv('ORACLE_HOME')
var $DU = cond(\
  not($ORACLE_HOME),             'ORACLE_HOME is not set',\
  not(testDir('d',$ORACLE_HOME)),'Cannot access ORACLE_HOME',\
                                 get_df($ORACLE_HOME))
call setHcveVariable('$DU')
call setHcveResult(cond(isNumber($DU),concat($DU,' KB'),$DU))]]>
</sdp_command>
<sdp_description><![CDATA[This rule retrieves the available disk space.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00500" mode="VERIFY" name="Disk Space Infra OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00420" minimum="KB$" result="FAILED" value="Amount of available disk space required"><![CDATA[This rule needs available disk space.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $TYPE,$DU
call setHcveResult(check($TYPE,\
  'Itanium',cond(expr('>=',$DU,5767168),'Available','Need 5.5 GB'),\
  'x86',    cond(expr('>=',$DU,3984588),'Available','Need 3.8 GB'),\
  'pSeries',cond(expr('>=',$DU,5767168),'Available','Need 5.5 GB'),\
  'zSeries',cond(expr('>=',$DU,5242880),'Available','Need 5 GB'),\
            cond(expr('>=',$DU,5767168),'Available','Other architecture')))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Infrastructure installation type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough disk space to install the Infrastructure installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need 5.5 GB|Increase the available space to 5.5 GB or more to install the Infrastructure installation type.|
|Need 3.8 GB|Increase the available space to 3.8 GB or more to install the Infrastructure installation type.|
|Need 5 GB|Increase the available space to 5 GB or more to install the Infrastructure installation type.|
|Other architecture|The architecture is unknown and must be known to establish the amount of disk space required for the Infrasture installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00510" mode="VERIFY" name="Disp Space OIMgr OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00420" minimum="KB$" result="FAILED" value="Amount of available disk space required"><![CDATA[This rule needs available disk space.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $TYPE,$DU
call setHcveResult(check($TYPE,\
  'Itanium',cond(expr('>=',$DU,1572864),'Available','Need 1.5 GB'),\
  'x86'    ,cond(expr('>=',$DU,1153434),'Available','Need 1.1 GB'),\
  'pSeries',cond(expr('>=',$DU,1572864),'Available','Need 1.5 GB'),\
  'zSeries',cond(expr('>=',$DU,2097152),'Available','Need 2 GB'),\
            cond(expr('>=',$DU,2097152),'Available','Other architecture')))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Oracle Identity Manager (OIMgr) only installation type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough disk space to install the Oracle Identity Manager only installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need 1.5 GB|Increase the available space to 1.5 GB or more to install the Oracle Identity Manager only installation type.|
|Need 1.1 GB|Increase the available space to 1.1 GB or more to install the Oracle Identity Manager only installation type.|
|Need 2 GB|Increase the available space to 2 GB or more to install the Oracle Identity Manager only installation type.|
|Other architecture|The architecture is unknown and must be known to establish the amount of disk space required for the Oracle Identity Manager only installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00520" mode="VERIFY" name="Disp Space MDR OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00420" minimum="KB$" result="FAILED" value="Amount of available disk space required"><![CDATA[This rule needs available disk space.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $TYPE,$DU
call setHcveResult(check($TYPE,\
  'Itanium',cond(expr('>=',$DU,5767168),'Available','Need 5.5 GB'),\
  'x86',    cond(expr('>=',$DU,3774874),'Available','Need 3.6 GB'),\
  'pSeries',cond(expr('>=',$DU,2097152),'Available','Need 2 GB'),\
  'zSeries',cond(expr('>=',$DU,5242880),'Available','Need 5 GB'),\
            cond(expr('>=',$DU,5767168),'Available','Other architecture')))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Oracle Application Server Metadata Repository (MDR) only installation type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough disk space to install the Oracle Application Server Metadata Repository only installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need 5.5 GB|Increase the available space to 5.5 GB or more to install the Oracle Application Server Metadata Repository only installation type.|
|Need 3.6 GB|Increase the available space to 3.6 GB or more to install the Oracle Application Server Metadata Repository only installation type.|
|Need 2 GB|Increase the available space to 2 GB or more to install the Oracle Application Server Metadata Repository only installation type.|
|Need 5 GB|Increase the available space to 5 GB or more to install the Oracle Application Server Metadata Repository only installation type.|
|Other architecture|The architecture is unknown and must be known to establish the amount of disk space required for the Oracle Application Server Metadata Repository only installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00530" mode="VERIFY" name="Disp Space OIF OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00420" minimum="KB$" result="FAILED" value="Amount of available disk space required"><![CDATA[This rule needs available disk space.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $TYPE,$DU
call setHcveResult(check($TYPE,\
  'Itanium',cond(expr('>=',$DU,921600) ,'Available','Need 900 MB'),\
  'x86'    ,cond(expr('>=',$DU,524288) ,'Available','Need 512 MB'),\
  'pSeries',cond(expr('>=',$DU,1153434),'Available','Need 1.1 GB'),\
  'zSeries',cond(expr('>=',$DU,1048576),'Available','Need 1 GB'),\
            cond(expr('>=',$DU,1153434),'Available','Other architecture')))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the system has enough disk space to install the Oracle Identity Federation (OIF) only installation type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Available" result="PASSED">
<![CDATA[The system has enough disk space to install the Oracle Identity Federation installation type.]]>
</sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need 900 MB|Increase the available space to 900 MB or more to install the Oracle Identity Federation installation type.|
|Need 512 MB|Increase the available space to 512 MB or more to install the Oracle Identity Federation installation type.|
|Need 1.1 GB|Increase the available space to 1.1 GB or more to install the Oracle Identity Federation installation type.|
|Need 1 GB|Increase the available space to 1 GB or more to install the Oracle Identity Federation installation type.|
|Other architecture|The architecture is unknown and must be known to establish the amount of disk space required for the Oracle Identity Federation installation type.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00600" mode="VERIFY" name="Itanium RH 3 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium RH3" result="SKIPPED" value="Not on Red Hat AS or ES 3 Itanium"><![CDATA[This rule only applies to Red Hat AS or ES 3 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'6')
 call setHcveResult(cmp_kernel('RH 3','2.4.21-37.EL','2.4.21.37'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 3 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 6`` or later.|
|Need at least 2.4.21-37.EL for RH 3|Use Red Hat 3 with kernel 2.4.21-37.EL or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00610" mode="VERIFY" name="Itanium RH 3 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium RH3" result="SKIPPED" value="Not on Red Hat AS or ES 3 Itanium"><![CDATA[This rule only applies to Red Hat AS or ES 3 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.14.90.0.4','39'])
call cmp_os_pkg(\@tbl,'compat-db',['4.0.14','5.1'])
call cmp_os_pkg(\@tbl,'compat-gcc',['7.3','2.96.128'])
call cmp_os_pkg(\@tbl,'compat-gcc-c++',['7.3','2.96.128'])
call cmp_os_pkg(\@tbl,'compat-libstdc++-devel',['7.3','2.96.128'])
call cmp_os_pkg(\@tbl,'gcc',['3.2.3','53'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.2.3','53'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.2','95.37'])
call cmp_os_pkg(\@tbl,'glibc-common',['2.3.2','95.37'])
call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.2','95.37'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.96','5'])
call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.96','5'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.2.3','53'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.2.3','53'])
call cmp_os_pkg(\@tbl,'make',['3.79.1','17.1'])
call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','9.RHEL3.6'])
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','21'])
call cmp_os_pkg(\@tbl,'setarch',['1.3','1'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','5.rhel3'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux AS/ES 3 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00620" mode="VERIFY" name="Itanium RH 4 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium RH4" result="SKIPPED" value="Not on Red Hat AS or ES 4 Itanium"><![CDATA[This rule only applies to Red Hat AS or ES 4 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'1')
 call setHcveResult(cmp_kernel('RH 4','2.6.9-11.EL','2.6.9.11'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 4 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 1`` or later.|
|Need at least 2.6.9-11.EL for RH 4|Use Red Hat 4 with kernel 2.6.9-11.EL or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00630" mode="VERIFY" name="Itanium RH 4 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium RH4" result="SKIPPED" value="Not on Red Hat AS or ES 4 Itanium"><![CDATA[This rule only applies to Red Hat AS or ES 4 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.92.0.2','13'])
call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'])
call cmp_os_pkg(\@tbl,'compat-libstdc++-296',['2.96','132.7.2'])
call cmp_os_pkg(\@tbl,'gcc',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.9'])
call cmp_os_pkg(\@tbl,'glibc-common',['2.3.4','2.9'])
call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.4','2.9'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'make',['3.80','5'])
call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','11'],undef,undef,\
                                    '(RH|rh)?(EL|el)\d.*$')
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','30'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','1'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux AS/ES 4 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00640" mode="VERIFY" name="Itanium SuSE 9 Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise 9 Itanium"><![CDATA[This rule only applies to SuSE Linux Enterprise 9 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call setHcveResult(cmp_kernel('SuSE 9','2.6.5-7.244'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel is adequate for SuSE Linux Enterprise 9 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.6.5-7.244 for SuSE 9|Use SuSE 9 with kernel 2.6.5-7.244 or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00650" mode="VERIFY" name="Itanium SuSE 9 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^Itanium SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise 9 Itanium"><![CDATA[This rule only applies to SuSE Linux Enterprise 9 Itanium.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.90.0.1.1','32.10'])
call cmp_os_pkg(\@tbl,'compat',['2004.7.1','1.2'])
call cmp_os_pkg(\@tbl,'db1',['1.85','85.1'])
call cmp_os_pkg(\@tbl,'gcc',['3.3.3','43.41'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.3.3','43-41'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.3','98.61'])
call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.3','98.61'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.102','1.5'])
call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.102','1.5'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.3.3','43.41'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.3.3','43.41'])
call cmp_os_pkg(\@tbl,'make',['3.80','184.1'])
call cmp_os_pkg(\@tbl,'openmotif-libs',['2.2.2','519.4'])
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','780.7'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.1','35.7'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 9 on Itanium.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00700" mode="VERIFY" name="x86 RH 3 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) RH3" result="SKIPPED" value="Not on Red Hat AS or ES 3 x86"><![CDATA[This rule only applies to Red Hat AS or ES 3 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_VER
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'3')
 call setHcveResult(cmp_kernel('RH 3','2.4.21-20.EL','2.4.21.20'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 3 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 3`` or later.|
|Need at least 2.4.21-20.EL for RH 3|Use Red Hat 3 with ``kernel-2.4.21-20.EL``, ``kernel-smp-2.4.21-20.EL``, ``kernel-hugemann-2.4.21-20.EL``, or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00710" mode="VERIFY" name="x86 RH 3 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) RH3" result="SKIPPED" value="Not on Red Hat AS or ES 3 x86"><![CDATA[This rule only applies to Red Hat AS or ES 3 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT
if expr('==',$OS_BIT,64)
{call cmp_os_pkg(\@tbl,'compat-db',['4.0.14','5.1'],'i386')
 call cmp_os_pkg(\@tbl,'compat-gcc',['7.3','2.96.122'],'i386')
 call cmp_os_pkg(\@tbl,'compat-glibc',['7','2.96.122'],'i386')
 call cmp_os_pkg(\@tbl,'compat-libstdc++',['7.3','2.96.128'],'i386')
 call cmp_os_pkg(\@tbl,'compat-libstdc++-devel',['7.3','2.96.128'],'i386')
 call cmp_os_pkg(\@tbl,'gcc',['3.2.3','42'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc',['2.3.2','95.27'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc',['3.2.3','95.27'],'i686')
 call cmp_os_pkg(\@tbl,'glibc-devel',['3.2.3','95.27'],'i386')
 call cmp_os_pkg(\@tbl,'glibc-devel',['3.2.3','95.27'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.2.90','34.1'],'i386')
 call cmp_os_pkg(\@tbl,'libgcc',['3.2.3','42'],'i386')
 call cmp_os_pkg(\@tbl,'libgcc',['3.2.3','42'],'x86_64')
 call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','8'],'i386')
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','21'],'x86_64')
 call cmp_os_pkg(\@tbl,'setarch',['1.3','1'],'x86_64')
 call cmp_os_pkg(\@tbl,'sysstat',['4.0.7','4'],'x86_64')
}
else
{call cmp_os_pkg(\@tbl,'binutils',['2.14.90.0.4','35'])
 call cmp_os_pkg(\@tbl,'compat-db',['4.0.14','5'])
 call cmp_os_pkg(\@tbl,'compat-glibc',['7','2.2.4.32.6'])
 call cmp_os_pkg(\@tbl,'compat-libstdc++',['7.3','2.96.128'])
 call cmp_os_pkg(\@tbl,'compat-libstdc++-devel',['7.3','2.96.128'])
 call cmp_os_pkg(\@tbl,'gcc',['3.2.3','42'])
 call cmp_os_pkg(\@tbl,'gcc-c++',['3.2.3','42'])
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.2.90','34.1'])
 call cmp_os_pkg(\@tbl,'glibc',['2.3.2','95.27'])
 call cmp_os_pkg(\@tbl,'glibc-common',['2.3.2','95.27'])
 call cmp_os_pkg(\@tbl,'libstdc++',['3.2.3','42'])
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.2.3','42'])
 call cmp_os_pkg(\@tbl,'make',['3.79.1','17'])
 call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','8'])
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','21'])
 call cmp_os_pkg(\@tbl,'setarch',['1.3','1'])
 call cmp_os_pkg(\@tbl,'sysstat',['4.0.7','4.3'])
}

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux AS/ES 3 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00720" mode="VERIFY" name="x86 OL/RH 4 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) (RH|OL)4" result="SKIPPED" value="Not on Red Hat AS or ES 4 or Oracle Linux 4 on x86"><![CDATA[This rule only applies to Red Hat AS or ES 4 or Oracle Linux 4 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'1')
 call setHcveResult(cmp_kernel('RH 4','2.6.9-11.EL','2.6.9.11'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 4 or Oracle Linux 4 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 1`` or later.|
|Need at least 2.6.9-11.EL for RH 4|Use Red Hat 4 with 2.6.9-11.EL kernel or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00730" mode="VERIFY" name="x86 OL/RH 4 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) (RH|OL)4" result="SKIPPED" value="Not on Red Hat AS or ES 4 or Oracle Linux 4 on x86"><![CDATA[This rule only applies to Red Hat AS or ES 4 or Oracle Linux 4 on x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT
if expr('==',$OS_BIT,64)
{call cmp_os_pkg(\@tbl,'binutils',['2.15.92.0.2','13'],'x86_64')
 call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'],'i386')
 call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'],'x86_64')
 call cmp_os_pkg(\@tbl,'control-center',['2.8.0','12'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.9'],'i686')
 call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.9'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc-common',['2.3.4','2.9'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.4','2.9'],'i386')
 call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.4','2.9'],'x86_64')
 call cmp_os_pkg(\@tbl,'gcc',['3.4.3','22.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'gcc-c++',['3.4.3','22.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.2.90','44.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs-devel',['1.4.1.2.90','44.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'libstdc++',['3.4.3','22.1'],'i386')
 call cmp_os_pkg(\@tbl,'libstdc++',['3.4.3','22.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.3','22.1'],'i386')
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.3','22.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'make',['3.80','5'],'x86_64')
 call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','11'],'i386',undef,\
                                     '(RH|rh)?(EL|el)\d.*$')
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','30'],'x86_64')
 call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','1'],'x86_64')
 call cmp_os_pkg(\@tbl,'setarch',['1.6','1'],'x86_64')
}
else
{call cmp_os_pkg(\@tbl,'binutils',['2.15.92.0.2','13'])
 call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'])
 call cmp_os_pkg(\@tbl,'compat-libstdc++-296',['2.96','132.7.2'])
 call cmp_os_pkg(\@tbl,'control-center',['2.8.0','12'])
 call cmp_os_pkg(\@tbl,'gcc',['3.4.3','22.1'])
 call cmp_os_pkg(\@tbl,'gcc-c++',['3.4.3','22.1'])
 call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.9'])
 call cmp_os_pkg(\@tbl,'glibc-common',['2.3.4','2.9'])
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.2.90','44.1'])
 call cmp_os_pkg(\@tbl,'libstdc++',['3.4.3','22.1'])
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.3','22.1'])
 call cmp_os_pkg(\@tbl,'make',['3.80','5'])
 call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','11'],undef,undef,\
                                     '(RH|rh)?(EL|el)\d.*$')
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','30'])
 call cmp_os_pkg(\@tbl,'setarch',['1.6','1'])
 call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','1'])
 call cmp_os_pkg(\@tbl,'xscreensaver',['4.18','5.rhel4.2'])
}

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux Server 4 and Oracle Linux 4 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00735" mode="VERIFY" name="x86 OL/RH 5 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) (RH|OL)5" result="SKIPPED" value="Not on Red Hat Linux 5 or Oracle Linux 5 on x86"><![CDATA[This rule only applies to Red Hat AS or ES 5 on x86, or Oracle Linux 5 on x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT
var @tbl = ()
call cmp_os_pkg(\@tbl,'binutils',['2.16.91.0.5','23.4'])
call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'])
call cmp_os_pkg(\@tbl,'gcc',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'gcc-c++',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'glibc-devel',['2.4','31.2'])
call cmp_os_pkg(\@tbl,'libgcc',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'libstdc++',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'make',['3.80','202.2'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux 5 or Oracle Linux 5 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00740" mode="VERIFY" name="x86 SuSE 8 Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) SLES-8" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 8 x86"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 8 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_VER
call setHcveResult(cmp_kernel('SuSE 8','2.4.21-138'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel is adequate for SuSE Linux Enterprise Server 8 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Kernel version is adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.4.21-138 for SuSE 8|Use SuSE 8 with ``k_smp-2.4.21-138``, ``k_deflt-2.4.21-138``, ``k_psmp-2.4.21-138``, or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00750" mode="VERIFY" name="x86 SuSE 8 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) SLES-8" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 8 x86"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 8 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.12.90.0.15','50'])
call cmp_os_pkg(\@tbl,'compat',['2003.1.10','0'])
call cmp_os_pkg(\@tbl,'gcc',['3.2.2','38'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.2.2','38'])
call cmp_os_pkg(\@tbl,'glibc',['2.2.2','124'])
call cmp_os_pkg(\@tbl,'libstdc++','3.2.2')
call cmp_os_pkg(\@tbl,'make',['3.79.1','407'])
call cmp_os_pkg(\@tbl,'openmotif21','2.1.30MLI4')
call cmp_os_pkg(\@tbl,'pdksh','5.2.14')
call cmp_os_pkg(\@tbl,'sysstat','4.0.3')

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 8 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00760" mode="VERIFY" name="x86 SuSE 9 Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 x86"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call setHcveResult(cmp_kernel('SuSE 9','2.6.5-7.97'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel is adequate for SuSE Linux Enterprise Server 9 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Kernel version is adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.6.5-7.97 for SuSE 9|Use SuSE 9 with ``kernel_bigsmp-2.6.5-7.97``, ``kernel_default-2.6.5-7.97``, ``kernel_smp-2.6.5-7.97``, or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00770" mode="VERIFY" name="x86 SuSE 9 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 x86"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
if expr('>',grepCommand('cat /proc/cpuinfo | grep flag','lm','c'),0)
{call cmp_os_pkg(\@tbl,'binutils',['2.15.90.0.1.1','32.10'],'x86_64')
 call cmp_os_pkg(\@tbl,'binutils-32bit',['9','200505232206'],'x86_64')
 call cmp_os_pkg(\@tbl,'compat',['2004.7.1','1.2'],'x86_64')
 call cmp_os_pkg(\@tbl,'compat-32bit',['9','200407011229'],'x86_64')
 call cmp_os_pkg(\@tbl,'db-32bit',['9','200407011229'],'x86_64')
 call cmp_os_pkg(\@tbl,'db1-32bit',['9','200407011229'],'x86_64')
 call cmp_os_pkg(\@tbl,'gcc',['3.3.3','43.34'],'x86_64')
 call cmp_os_pkg(\@tbl,'gcc-c++',['3.3.3','43.34'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc',['2.3.3','98.47'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc-32bit',['9','200506071226'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc-devel',['2.3.3','98.47'],'x86_64')
 call cmp_os_pkg(\@tbl,'glibc-devel-32bit',['9','200506062332'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.7','671.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs-devel',['1.4.1.7','671.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'gnome-libs-32bit',['9','200407011229'],'x86_64')
 call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.102','1.2'])
 call cmp_os_pkg(\@tbl,'libaio-devel-32bit',['9','200502241149'],'x86_64')
 call cmp_os_pkg(\@tbl,'libgcc',['3.3.3','43.36'],'x86_64')
 call cmp_os_pkg(\@tbl,'libstdc++',['3.3.3','43.34'],'x86_64')
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.3.3','43.34'],'x86_64')
 call cmp_os_pkg(\@tbl,'libstdc++-devel-32bit',['9','200407011229'],'x86_64')
 call cmp_os_pkg(\@tbl,'linux32',['1.0','341.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'make',['3.80','184.1'],'x86_64')
 call cmp_os_pkg(\@tbl,'openmotif21-libs',['2.1.30MLI4','119.4'])
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','780.7'],'x86_64')
 call cmp_os_pkg(\@tbl,'sysstat',['5.0.1','35.4'],'x86_64')
 call cmp_os_pkg(\@tbl,'XFree86-devel',['4.3.99.902','43.48'],'x86_64')
 call cmp_os_pkg(\@tbl,'XFree86-devel-32bit',['9','200506062332'],'x86_64')
}
else
{call cmp_os_pkg(\@tbl,'binutils',['2.15.90.0.1.1','32.5'])
 call cmp_os_pkg(\@tbl,'compat',['2004.7.1','1.2'])
 call cmp_os_pkg(\@tbl,'db1',['1.85','85.1'])
 call cmp_os_pkg(\@tbl,'gcc',['3.3.3','43.24'])
 call cmp_os_pkg(\@tbl,'gcc-c++',['3.3.3','43.24'])
 call cmp_os_pkg(\@tbl,'glibc',['2.3.3','98.28'])
 call cmp_os_pkg(\@tbl,'gnome-libs',['1.4.1.7','671.1'])
 call cmp_os_pkg(\@tbl,'gnome-libs-devel',['1.4.1.7','671.1'])
 call cmp_os_pkg(\@tbl,'libstdc++',['3.3.3','43.24'])
 call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.3.3','43.24'])
 call cmp_os_pkg(\@tbl,'make',['3.80','184.1'])
 call cmp_os_pkg(\@tbl,'openmotif21-libs',['2.1.30MLI4','119.1'])
 call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','780.1'])
 call cmp_os_pkg(\@tbl,'sysstat',['5.0.1','35.1'])
}

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 9 on x86/x86-64 type.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00790" mode="VERIFY" name="x86 SuSE 10 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^(Intel|AMD) SLES-10" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 10 x86"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 10 x86.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var @tbl = ()
call cmp_os_pkg(\@tbl,'binutils',['2.16.91.0.5','23.4'])
call cmp_os_pkg(\@tbl,'compat-2006',['1.25','11.2'])
call cmp_os_pkg(\@tbl,'compat-libstdc++',['5.0.7','22.2'])
call cmp_os_pkg(\@tbl,'gcc',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'gcc-c++',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'glibc-devel','2.4.31.2')
call cmp_os_pkg(\@tbl,'libgcc',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'libstdc++',['4.1.0','28.4'])
call cmp_os_pkg(\@tbl,'make',['3.80','202.2'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 10 on x86.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00800" mode="VERIFY" name="POWER RH 4 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^ Red Hat Enterprise Linux [AE]S release 4" result="SKIPPED" value="Not on Red Hat AS or ES 4 POWER"><![CDATA[This rule only applies to Red Hat AS or ES 4 POWER.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'1')
 call setHcveResult(cmp_kernel('RH 4','2.6.9-11.EL','2.6.9.11'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 4 on IBM pSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 1`` or later.|
|Kernel version is insufficient|You must be on ``kernel-2.6.9-11.EL`` or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00810" mode="VERIFY" name="POWER RH 4 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^ Red Hat Enterprise Linux [AE]S release 4" result="SKIPPED" value="Not on Red Hat AS or ES 4 POWER"><![CDATA[This rule only applies to Red Hat AS or ES 4 POWER.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.92.0.2','13'])
call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'])
call cmp_os_pkg(\@tbl,'compat-libstdc++-33',['3.2.3','47.3'])
call cmp_os_pkg(\@tbl,'db4',['4.2.52','7.1'])
call cmp_os_pkg(\@tbl,'gcc',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'gcc-c++-ppc32',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'gcc-ppc32',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'gdbm',['1.8.0','24'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.9'])
call cmp_os_pkg(\@tbl,'glibc-64bit',['2.3.4','2.9'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libaio-64bit',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libaio-devel-64bit',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libgcc',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'libgcc-64bit',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.3','22.1'])
call cmp_os_pkg(\@tbl,'make',['3.80','5'])
call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','11'],undef,undef,\
                                    '(RH|rh)?(EL|el)\d.*$')
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','30'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','1'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux AS/ES on IBM pSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00820" mode="VERIFY" name="POWER SuSE 9 Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^ SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 POWER"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 POWER.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call setHcveResult(cmp_kernel('SuSE 9','2.6.5-7.191'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel is adequate for SuSE Linux Enterprise Server 9 on IBM pSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Kernel version is adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.6.5-7.191 for SuSE 9|Use SuSE 9 with 2.6.5-7.191-pseries64 or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00830" mode="VERIFY" name="POWER SuSE 9 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^ SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 POWER"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 POWER.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.90.0.1.1','32.10'])
call cmp_os_pkg(\@tbl,'binutils-64bit',['9','200505240008'])
call cmp_os_pkg(\@tbl,'db',['4.2.52','86.3'])
call cmp_os_pkg(\@tbl,'db1',['1.85','85.1'])
call cmp_os_pkg(\@tbl,'gcc',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'gcc-64bit',['9','200505240008'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'gdbm',['1.8.3','228.1'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.3','98.47'])
call cmp_os_pkg(\@tbl,'glibc-64bit',['9','200506062240'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.102','1.2'])
call cmp_os_pkg(\@tbl,'libaio-64bit',['9','200502241152'])
call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.102','1.2'])
call cmp_os_pkg(\@tbl,'libaio-devel-64bit',['9','200502241152'])
call cmp_os_pkg(\@tbl,'libgcc',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'libgcc-64bit',['9','200505240008'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'make',['3.80','184.1'])
call cmp_os_pkg(\@tbl,'openmotif',['2.1.30','4_MLI'])
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','780.7'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.1','35.4'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 9 on IBM pSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
    
<sdp_rule id="A00900" mode="VERIFY" name="zSeries RH 4 Update and Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^zSeries Red Hat Enterprise Linux [AE]S release 4" result="SKIPPED" value="Not on Red Hat AS or ES 4 IBM zSeries"><![CDATA[This rule only applies to Red Hat AS or ES 4 IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var ($upd) = grepFile('/etc/redhat-release','Update','f')
var ($upd) = match($upd,'Update\s+(\d+)')
if expr('>=',$upd,'2')
 call setHcveResult(cmp_kernel('RH 4','2.6.9-22.EL','2.6.9.22'))
else
 call setHcveResult('Update required')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Update level and kernel are adequate for Red Hat Enterprise Linux AS/ES 4 on IBM zSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Update level and kernel version are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Update required|Update your operating system to ``Update 2`` or later.|
|Need at least 2.6.9-22.EL for RH 4|Use Red Hat 4 with 2.6.9-22.EL kernel or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00910" mode="VERIFY" name="zSeries RH 4 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^zSeries Red Hat Enterprise Linux [AE]S release 4" result="SKIPPED" value="Not on Red Hat AS or ES 4 IBM zSeries"><![CDATA[This rule only applies to Red Hat AS or ES 4 IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.92.0.2','13'])
call cmp_os_pkg(\@tbl,'compat-db',['4.1.25','9'])
call cmp_os_pkg(\@tbl,'compat-libstdc++-33',['3.2.3','47.3'])
call cmp_os_pkg(\@tbl,'db4',['4.2.52','7.1'])
call cmp_os_pkg(\@tbl,'gcc',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'gdbm',['1.8.0','24'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.4','2.13'])
call cmp_os_pkg(\@tbl,'glibc-64bit',['2.3.4','2.13'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libaio-64bit',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libaio-devel-64bit',['0.3.103','3'])
call cmp_os_pkg(\@tbl,'libgcc',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'libgcc-64bit',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.4.4','2'])
call cmp_os_pkg(\@tbl,'make',['3.80','5'])
call cmp_os_pkg(\@tbl,'openmotif21',['2.1.30','11'],undef,undef,\
                                    '(RH|rh)?(EL|el)\d.*$')
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','30.3'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.5','1'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for Red Hat Enterprise Linux AS/ES 4 on IBM zSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All required packages are present.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00920" mode="VERIFY" name="zSeries SuSE 9 Kernel OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^zSeries SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 IBM zSeries"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call setHcveResult(cmp_kernel('SuSE 9','2.6.5'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel is adequate for SuSE Linux Enterprise Server 9 on IBM zSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Kernel version is acceptable.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 2.6.5 for SuSE 9|Use SuSE 9 with 2.6.5 or later.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A00930" mode="VERIFY" name="zSeries SuSE 9 RPMs OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00010" minimum="^zSeries SLES-9" result="SKIPPED" value="Not on SuSE Linux Enterprise Server 9 IBM zSeries"><![CDATA[This rule only applies to SuSE Linux Enterprise Server 9 IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
call cmp_os_pkg(\@tbl,'binutils',['2.15.90.0.1.1','32.10'])
call cmp_os_pkg(\@tbl,'binutils-32bit',['9','200505240249'])
call cmp_os_pkg(\@tbl,'db',['4.2.52','86.3'])
call cmp_os_pkg(\@tbl,'db1',['1.85','85.1'])
call cmp_os_pkg(\@tbl,'gcc',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'gcc-c++',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'gdbm',['1.8.3','228.1'])
call cmp_os_pkg(\@tbl,'glibc',['2.3.3','98.47'])
call cmp_os_pkg(\@tbl,'glibc-32bit',['9','200506070135'])
call cmp_os_pkg(\@tbl,'libaio',['0.3.102','1.2'])
call cmp_os_pkg(\@tbl,'libaio-32bit',['9','200502241147'])
call cmp_os_pkg(\@tbl,'libaio-devel',['0.3.102','1.2'])
call cmp_os_pkg(\@tbl,'libaio-devel-32bit',['9','200502241147'])
call cmp_os_pkg(\@tbl,'libgcc',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'libgcc-32bit',['9','200505240249'])
call cmp_os_pkg(\@tbl,'libstdc++',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'libstdc++-devel',['3.3.3','43.34'])
call cmp_os_pkg(\@tbl,'libstdc++-devel-32bit',['9','200407011411'])
call cmp_os_pkg(\@tbl,'make',['3.80','184.1'])
call cmp_os_pkg(\@tbl,'openmotif21-libs',['2.1.30MLI4','119.4'])
call cmp_os_pkg(\@tbl,'pdksh',['5.2.14','780.7'])
call cmp_os_pkg(\@tbl,'sysstat',['5.0.1','35.4'])

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'rpmsOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the correct versions of the required RPMs are installed for SuSE Linux Enterprise Server 9 on IBM zSeries.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="rpmsOK" result="PASSED"><![CDATA[All packages are present and adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|... found|An incorrect version of the RPM was detected. Install a correct version.|
|... not installed|A required RPM is not installed. Install the required RPM.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01000" mode="VERIFY" name="Kernel Parameters OK?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
macro chk_minimum
{var (\@tbl,$nam,$max,$val) = @arg
 if !defined($val)
 {call push(@tbl,concat($nam,'Undef'))
  return
 }
 if expr('<',$val,$max)
  call push(@tbl,concat($nam,'TooSmall'))
}

var $mem = nvl(field('\s+',1,grepCommand('/usr/bin/free -m','Mem','f')),0)
var $FILEMAXREQD = 131072
var $MSGALLREQD  = 8192
var $MSGMAXREQD  = 65535
var $MSGMNIREQD  = 2878
var $SEMMNIREQD  = 142
var $SEMMNSREQD  = 32000
var $SEMMSLREQD  = 256
var $SEMOPMREQD  = 100
var $SHMALLREQD  = 2097152
var $SHMMAXREQD  = max(expr('*',$mem,524288),2147483648)
var $SHMMAXREQD  = min($SHMMAXREQD,4294967295)
var $SHMMNIREQD  = 4096
call setHcveVariable('$FILEMAXREQD','$MSGALLREQD','$MSGMAXREQD','$MSGMNIREQD',\
  '$SEMMNIREQD','$SEMMNSREQD','$SEMMSLREQD','$SEMOPMREQD',\
  '$SHMALLREQD','$SHMMAXREQD','$SHMMNIREQD')

var ($lin) = grepFile('/proc/sys/kernel/sem','.','f')
var ($msl,$mns,$opm,$mni) = split('\s+',$lin,5)
call chk_minimum(\@tbl,'FILEMAX',$FILEMAXREQD,\
                 grepFile('/proc/sys/fs/file-max','.','f'))
call chk_minimum(\@tbl,'MSGALL',$MSGALLREQD,\
                 grepFile('/proc/sys/kernel/msgall','.','f'))
call chk_minimum(\@tbl,'MSGMAX',$MSGMAXREQD,\
                 grepFile('/proc/sys/kernel/msgmax','.','f'))
call chk_minimum(\@tbl,'MSGMNI',$MSGMNIREQD,\
                 grepFile('/proc/sys/kernel/msgmni','.','f'))
call chk_minimum(\@tbl,'SEMMNI',$SEMMNIREQD,$mni)
call chk_minimum(\@tbl,'SEMMNS',$SEMMNSREQD,$mns)
call chk_minimum(\@tbl,'SEMMSL',$SEMMSLREQD,$msl)
call chk_minimum(\@tbl,'SEMOPM',$SEMOPMREQD,$opm)
call chk_minimum(\@tbl,'SHMALL',$SHMALLREQD,\
                 grepFile('/proc/sys/kernel/shmall','.','f'))
call chk_minimum(\@tbl,'SHMMAX',$SHMMAXREQD,\
                 grepFile('/proc/sys/kernel/shmmax','.','f'))
call chk_minimum(\@tbl,'SHMMNI',$SHMMNIREQD,\
                 grepFile('/proc/sys/kernel/shmmni','.','f'))

call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'KernelOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the kernel parameter settings meet minimum requirements.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="KernelOK" result="PASSED"><![CDATA[Kernel parameters meet minimum requirements.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|FILEMAXTooSmall|Increase the kernel parameter FILE-MAX to at least ${FILEMAXREQD}.|
|FILEMAXUndef|FILE-MAX is not defined and must be set to ${FILEMAXREQD}.|
|MSGALLUndef|MSGALL is not defined and must be set to ${MSGALLREQD} or more.|
|MSGALLTooSmall|Increase the kernel parameter MSGALL to at least ${MSGALLREQD}.|
|MSGMAXUndef|MSGMAX is not defined and must be set to ${MSGMAXREQD} or more.|
|MSGMAXTooSmall|Increase the kernel parameter MSGMAX to at least ${MSGMAXREQD}.|
|MSGMNIUndef|MSGMNI is not defined and must be set to ${MSGMNIREQD} or more.|
|MSGMNITooSmall|Increase the kernel parameter MSGMNI to at least ${MSGMNIREQD}.|
|SEMMNIUndef|SEMMNI is not defined and must be set to ${SEMMNIREQD}.|
|SEMMNITooSmall|Increase the kernel parameter SEMMNI to at least ${SEMMNIREQD}.|
|SEMMSLUndef|SEMMSL is not defined and must be set to ${SEMMSLREQD}.|
|SEMMSLTooSmall|Increase the kernel parameter SEMMSL to at least ${SEMMSLREQD}.|
|SEMMNSUndef|SEMMNS is not defined and must be set to ${SEMMNSREQD}.|
|SEMMNSTooSmall|Increase the kernel parameter SEMMNS to at least ${SEMMNSREQD}.|
|SEMOPMUndef|SEMOPM is not defined and must be set to ${SEMOPMREQD}.|
|SEMOPMTooSmall|Increase the kernel parameter SEMOPM to at least ${SEMOPMREQD}.|
|SHMALLUndef|SHMALL is not defined and must be set to ${SHMALLREQD} or more.|
|SHMALLTooSmall|Increase the kernel parameter SHMALL to at least ${SHMALLREQD}.|
|SHMMAXUndef|SHMMAX is not defined and must be set to ${SHMMAXREQD} or more.|
|SHMMAXTooSmall|Increase the kernel parameter SHMMAX to at least ${SHMMAXREQD}.|
|SHMMNIUndef|SHMMNI is not defined and must be set to ${SHMMNIREQD} or more.|
|SHMMNITooSmall|Increase the kernel parameter SHMMNI to at least ${SHMMNIREQD}.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01010" mode="VERIFY" name="Port Range OK?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A00010" minimum="^Other" result="FAILED" value="Unsupported platform"><![CDATA[The platform must be a member of one of these recognized platform families: Linux on Itanium, x86, IBM pSeries, or IBM zSeries.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var @tbl = ()
if !testFile('f','/proc/sys/net/ipv4/ip_local_port_range')
 return setHcveResult('iplocalNotFound')
macro chk_port_range
{var (\@tbl,$min,$max) = @arg
 if !?$min
  return push(@tbl,'iplocalNotFound')
 if !?$max
  return push(@tbl,'iplocalNotFound')
 if !expr('==',$min,10000)
  call push(@tbl,'LowValue')
 if !expr('==',$max,65000)
  call push(@tbl,'HighValue')
}
call chk_port_range(\@tbl,split('\s+',\
  grepFile('/proc/sys/net/ipv4/ip_local_port_range','\d+','f'),2))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'RangeOK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``ip_local_port_range`` kernel parameter is between 10000 and 65000.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="RangeOK" result="PASSED"><![CDATA[The sockets defined in ``/proc/sys/net/ipv4/ip_local_port_range`` are adequate for installing the application tier of Oracle E-Business Suite Release 12 on Linux. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The values in ``/proc/sys/net/ipv4/ip_local_port_range`` are not set as recommended. To change the settings according to the recommendation execute:
%BR%``$ /bin/echo 10000 65000 > /proc/sys/net/ipv4/ip_local_port_range``
The values recommended for the local port range may must be adjusted according to the specific needs of your environment in order to avoid port conflicts.
|*Return Value*|*Action*|
|LowValue|The recommended low end value for ``ip_local_port_range`` is 10000.|
|HighValue|The recommended high end value for ``ip_local_port_range`` is 65000.|
|iplocalNotFound|``ip_local_port_range`` is not present in the ``/proc/sys/net/ipv4`` directory as required.|]]></sdp_action>
</sdp_actions>
</sdp_rule>
 
<sdp_rule id="A01100" mode="RECORD" name="IP Address">
<sdp_command type="RDA"><![CDATA[var $hst = field('\.',0,command('hostname'))
var ($lin) = grepFile('/etc/hosts',\
 concat('^[^#]+\s\<?',quote($hst),'\>?($|\.|\s)'),'f')
call setHcveResult(field('\s+',0,$lin))]]></sdp_command>
<sdp_description><![CDATA[This rule gets the host IP address.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A01110" mode="RECORD" name="Host Domain Name">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A01100" minimum="RECORD" result="FAILED"><![CDATA[Needs IP address.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $ip = "%A01100%"
var ($hst) = command('hostname')
var ($nam,$dom) = split('\.',$hst,2)
if testFile('x','/bin/domainname')
 var ($nis) = command('/bin/domainname')
if testFile('r','/etc/resolv.conf')
 var $dns = field('\s+',1,grepFile('/etc/resolv.conf','domain'))
if testFile('x','/usr/bin/nslookup')
{if $nam
  var $nsl = field(concat(quote($nam),'\.'),1,\
                   grepCommand(concat('/usr/bin/nslookup ',$hst),'Name','f'))
 else
  var $nsl = field(concat(quote($hst),'\.'),1,\
                   grepCommand(concat('/usr/bin/nslookup ',$hst),'Name','f'))
}
if $ip
{if !$nam
  var $ipn = trim(field(concat($hst,'\.'),1,\
             grepCommand(concat('/usr/bin/nslookup -sil ',$ip),'Name','f')),'.')
}
call setHcveResult(cond($dom,$dom,\
                        and(length($nis),compare('ne',$nis,'(none)')),$nis,\
                        $dns,$dns,\
                        $nsl,$nsl,\
                        $ipn,$ipn,\
                             'Not configured'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule gets the host domain name.]]></sdp_description>
</sdp_rule> 

<sdp_rule id="A01120" mode="VERIFY" name="Format /etc/hosts OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A01110" minimum="RECORD" result="FAILED"><![CDATA[Requires domain name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
if !testFile('r','/etc/hosts')
 return setHcveResult('Cannot access /etc/hosts')
if !@tbl = grepFile('/etc/hosts',\
  concat('^([^\s\#]+\s+)+',quote(${RDA.HOST}),\
         '\s+([^\s\#]+\s+)*',quote(${RDA.NODE}),'(\s|\z|\#)'))
 return setHcveResult('no entry found')

# Test that line begins with IPv4 IP address
if grep(@tbl,'^(\d{1,3}\.){3}\d{1,3}\s','f')
 return setHcveResult('Adequate IPv4 entry')

# Tests that line begins with IPv6 IP address, first that all eight groups are populated, then situations where groups that are all zero are omitted (two colons together).
if grep(@tbl,'^([A-F\d]{1,4}(:[A-F\d]{1,4}){7}\s|\
                :(:[A-F\d]{1,4}){1,6}\s|\
                ([A-F\d]{1,4}:){1,5}(:[A-F\d]{1,4}){1,5}\s|\
                ([A-F\d]{1,4}:){1,6}:\s)','f')
 return setHcveResult('Adequate IPv6 entry')
return setHcveResult('no correct entry found')
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the ``/etc/hosts`` file contains a line with ``ip_address fully_qualified_domainname short_hostname``.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="^Adequate" result="PASSED"><![CDATA[The ``/etc/hosts`` entry for the fully qualified domain name and host name is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="Cannot access /etc/hosts" result="FAILED"><![CDATA[Grant read permissions on ``/etc/hosts`` to the current user.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The fully qualified host name and host name are not configured correctly. Ensure that there is an IP address entry for the fully qualified domain name with the host name as one of the aliases.
|*Return Value*|*Action"|
|no entry found|No entry with the fully qualified domain name followed by the host name was found.|
|no correct entry found|No entry beginning with an IP address with the fully qualified domain name followed by the host name was found.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01140" mode="VERIFY" name="DNS Lookup?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A01100" minimum="RECORD" result="FAILED"><![CDATA[Requires IP address.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A01110" minimum="RECORD" result="FAILED"><![CDATA[Requires domain name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[var $dom = "%A01110%"
var $ip  = "%A01100%"
var $hst = field('\.',0,command('hostname'))
if !length($hst)
{if and(compare('ne',$dom,'Not configured'),length($dom))
  var $hst = concat($hst,'.',$dom)
}
call setHcveResult(cond(\
  not(length($ip)),\
    'Cannot determine IP address',\
  not(testFile('x','/usr/bin/nslookup')),\
    'Cannot access /usr/bin/nslookup',\
  not(grepCommand(concat('/usr/bin/nslookup -sil ',$hst),quote($ip),'f')),\
    'nslookup host.domain',\
  not(grepCommand(concat('/usr/bin/nslookup -sil ',$ip),quote($hst),'f')),\
    'nslookup IP_address',\
    'Host correctly registered in DNS'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the host is registered correctly in the DNS.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Host correctly registered in DNS" result="PASSED"><![CDATA[The host is registered correctly in the DNS.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|nslookup host.domain|The DNS server failed to resolve the nslookup using host.domain.|
|nslookup IP_address|The DNS server failed to resolve the nslookup using IP address.|
|Cannot determine IP address|Fix any problem with the host IP address.|
|Cannot access /usr/bin/nslookup|Grant execute permissions on ``/usr/bin/nslookup`` to the user who is logged in.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01160" mode="VERIFY" name="Port 1521 Available?">
<sdp_command type="RDA"><![CDATA[var @lst = grepCommand('/bin/netstat -an','LISTEN')
if !grep(@lst,'1521','f')
 return setHcveResult('Free')
if testFile('x','/usr/sbin/lsof')
 var ($prc) = grepCommand('/usr/sbin/lsof -i TCP:1521','LIST','f')
elsif testFile('x','/usr/bin/lsof')
 var ($prc) = grepCommand('/usr/bin/lsof -i TCP:1521','LIST','f')
else
 return setHcveResult('Cannot use lsof')
if !length($prc)
 return setHcveResult('Cannot use lsof')
macro chk_tns
{var ($prc) = @arg
 var @cmd = grepCommand('ps auxww',field('\s+',1,$prc))
 var @ver = command(replace(field(\
    '\s+',10,grep(@cmd,'tnslsnr','f')),'tnslsnr','lsnrctl version'))
 var $ver = field('\s+',4,grep(@ver,'LSNRCTL','f'))
 return cond(compare('older',$ver,'10.1.0.2'),\
             concat('TNS Listener version [',$ver,'] is running'),\
             'TNS Listener 10.1.0.2 or later is running')
}
call setHcveResult(cond(not(match(field('\s+',0,$prc),'tnslsnr',true)),\
                        'Port is used by non-Oracle program',\
                        chk_tns($prc)))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that port 1521 is free. If an Oracle listener version 10.1.0.2 or later uses port 1521, then the existing database and the Oracle Application Server 10g Metadata Repository will use the existing listener. The installer performs this configuration automatically. If an Oracle listener version earlier than 10.1.0.2 uses port 1521, then the existing listener must be stopped. After the installation is complete, you can configure the new 10.1.0.2 listener to listen to the existing (pre 10.1.0.2) databases. If non-Oracle programs use port 1521, then this program must be configured to listen to ports other than 1521. For more information, see the "If Port 1521 is in Use" section of the ''Oracle Application Server 10g Installation Guide''.]]></sdp_description>
<sdp_actions>
<sdp_action condition="=~" minimum="TNS Listener 10.1.0.2 or later is running|Free" result="PASSED"><![CDATA[Port 1521 is not used or is used by TNS Listener version 10.1.0.2 or later.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|TNS Listener version ... is running|Stop the existing listener.|
|Port is used by non-Oracle program|Reconfigure the program to use a port different from 1521.|
|Cannot use lsof|Check port 1521 manually.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01170" mode="VERIFY" name="Oracle Home Length?">
<sdp_command type="RDA"><![CDATA[var $ORACLE_HOME = getEnv('ORACLE_HOME')
call setHcveResult(cond(\
  not(defined($ORACLE_HOME)),\
    'ORACLE_HOME is not set',\
  expr('<=',length($ORACLE_HOME),127),\
    'Less than 127 char',\
    'Longer than 127 characters'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the path to the Oracle home directory is not longer than 127 characters.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Less than 127 char" result="PASSED"><![CDATA[The Oracle home directory is not longer than 127 characters.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Longer than 127 characters|Change ORACLE_HOME to a directory not longer than 127 characters.|
|ORACLE_HOME is not set|Set the ORACLE_HOME environment variable.|]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A01220" mode="VERIFY" name="Monitor Colors">
<sdp_command type="RDA"><![CDATA[call loadCommand('/usr/X11R6/bin/xdpyinfo 2>&1')
var @dpt = grepLastFile('depths')
call setHcveResult(cond(\
  grep(@dpt,'8','f'),              'Adequate',\
  not(defined(getEnv('DISPLAY'))), 'DISPLAY is not set',\
  grepLastFile('unable','f'),      'Cannot open DISPLAY',\
                                   'Need at least 256 colors'))]]>
</sdp_command>
<sdp_description><![CDATA[This rule checks that the monitor has a minimum of 256 colors.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The monitor has enough colors.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|Need at least 256 colors|Use a display with at least 256 colors. Several components or X-Windows programs could require it unless you have already deployed workarounds for each of them.|
|DISPLAY is not set|Set the DISPLAY environment variable to a valid display. Several components or X-Windows programs could require it unless you have already deployed workarounds for each of them.|
|Cannot open DISPLAY|Set the DISPLAY environment variable to a correct display. Several components or X-Windows programs could require it unless you have already deployed workarounds for each of them.|]]>
</sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
</sdp_content>
</sdp_diaglet>
