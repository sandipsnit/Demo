<sdp_diaglet platform="solaris" product="NCC" set="A491NCC001_sol" title="Network Charging and Control Preinstallation (Solaris)" type="A">
<sdp_meta type="version" id="$Id: A491NCC001_sol.xml,v 1.1 2012/02/08 21:30:52 mschenke Exp $"/>
<sdp_meta author="JCR" change="Initial Release" date="20120203" type="history"/>
<sdp_content set="A491NCC001_sol" title="Network Charging and Control Preinstallation (Solaris)" type="check">

<sdp_group title="Purpose">
<sdp_rule id="A00010" mode="RECORD" name="Select Purpose(s)">
<sdp_command type="RDA"><![CDATA[
# Select the purposes
var ($cnt,%rsp,@all,@itm) = (0,'*','*')
loop $rec (\
  ['HDW','Is the hardware and memory sufficient for a standard Network \
          Charging and Control installation?'],\
  ['DBP','Is the Oracle database installed with appropriate parameters for \
          Network Charging and Control? '],\
  ['DSK','Are disks, disks arrays and mount points configured correctly for a \
          Network Charging and Control installation? '],\
  ['SPC','Is there sufficient space on all partititions to support a Network \
          Charging and Control installation? '],\
  ['OSR','Is the operating system ready for a Network Charging and Control? '])
{call push(@itm,incr($cnt),$rec->[1])
 call push(@all,$rsp{$cnt} = $rsp{$abr} = $rec->[0])
}
call setTempSetting('HCVE_INFO','select')
call setTempSetting('HCVE_INFO_BEF',\
  'Indicate the purpose(s) you have for running this check:')
call setTempSetting('HCVE_INFO_ITM',join('|',@itm,'*|All purposes'))
call setTempSetting('HCVE_INFO_RSP',join('|',%rsp))
call setTempSetting('HCVE_DEFAULT','*')
call requestSetting('HCVEinfo')
call setHcveResult($sel = getSetting('HCVE_SELECT'))

# Indicate which purposes must be checked
if compare('eq',$sel,'*')
{loop $key (@all)
  call setHcveParameter(concat('NCC.PURPOSE.',$key),true)
}
else
{loop $key (split('\|',$sel))
  call setHcveParameter(concat('NCC.PURPOSE.',$key),true)
}
if match($sel,'(\*|HDW|OSR)')
 call setHcveParameter('NCC.PURPOSE.OSRHDW',true)
]]></sdp_command>
<sdp_command type="GROUP" exec="NCC.PURPOSE.OSR">OSR</sdp_command>
<sdp_command type="GROUP" exec="NCC.PURPOSE.OSRHDW">OSRHDW</sdp_command>
<sdp_command type="GROUP" exec="NCC.PURPOSE.HDW">HDW</sdp_command>
<sdp_command type="GROUP">COMMON</sdp_command>
<sdp_command type="GROUP" exec="NCC.PURPOSE.DSK">DSK</sdp_command>
<sdp_command type="GROUP" exec="NCC.PURPOSE.SPC">SPC</sdp_command>
<sdp_description><![CDATA[This rule selects the purposes and launches related rules.]]></sdp_description>
</sdp_rule>
</sdp_group>

<sdp_group exec="0" id="OSR" title="OSR Rules">

<sdp_rule id="A00100" mode="RECORD" name="OS Type">
<sdp_command type="RDA"><![CDATA[import $OS_NAM
call setHcveResult($OS_NAM)
]]></sdp_command>
<sdp_description><![CDATA[This rule displays the name of the detected operating system.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00101" mode="RECORD" name="OS Bit">
<sdp_command type="RDA"><![CDATA[import $OS_BIT
call setHcveResult($OS_BIT)
]]></sdp_command>
<sdp_description><![CDATA[This rule displays the detected bit width of the operating system.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00110" mode="VERIFY" name="OS OK?">
<sdp_command type="RDA"><![CDATA[import $OS_NAM,$OS_VER,$OS_BIT
var $ver = field('\.',1,$OS_VER)
@tbl = ()
if !match($OS_NAM,'sunos',true)
 call push(@tbl,'notSolaris')
elsif expr('==',$ver,9)
 call push(@tbl,'Solaris9')
elsif !expr('==',$ver,10)
 call push(@tbl,'notSolaris10')
if !expr('==',$OS_BIT,64)
 call push(@tbl,'not64bit')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'Adequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines the operating system is acceptable. The acceptable operating system in Solaris 10 64-bit.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The operating system is adequate for Network Charging and Control.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The operating system is not adequate for new installations of Network Charging and Conrol.
|*Return Value*|*Action*|
|notSolaris|The operating system must be Solaris 10 64-bit.|
|Solaris9|Only Solaris 10 is acceptable for new installations of Network Charging and Control.|
|notSolaris10|Only Solaris 10 64-bit is acceptable for new installations of Network Charging and Control.|
|not64bit|Network Charging and Control requires the 64-bit version of the operating system.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00120" mode="VERIFY" name="Server Timezone OK?">
<sdp_command type="RDA"><![CDATA[
call setHcveResult(value(grepCommand('env','TZ','f')))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the server's timezone is set to GMT.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="GMT0" result="PASSED"><![CDATA[The server's timezone is set to GMT. No action needed.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The server is not set to GMT timezone as required. Change the server's timezone to GMT.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>

<sdp_group exec="0" id="OSRHDW" title="OSR and HDW Common Rules">

<sdp_rule id="A01000" mode="VERIFY" name="Solaris Zoning?">
<sdp_command type="RDA"><![CDATA[
if grepCommand('/usr/sbin/zoneadmin list','global','v')
 return setHcveResult('zoned')
return setHcveResult('notZoned')
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that Solaris zoning is not being used.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="notZoned" result="PASSED"><![CDATA[Solaris zoning is not being used. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Solaris zoning is being used. Network Charging and Control requires the Solaris zoning not be used.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>

<sdp_group exec="0" id="HDW" title="HDW Rules">

<sdp_rule id="A02000" mode="VERIFY" name="Processor Architecture?">
<sdp_command type="RDA"><![CDATA[import $OS_ARC
call setHcveResult(check(lc($OS_ARC),'sparc','SPARC',\
                                     'x86',  'x86',\
                                             'notSparc'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines if the detected architecture is acceptable for Network Charging and Control. The acceptable architecture is SPARC.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="SPARC" result="PASSED"><![CDATA[The architecture is ``SPARC``, which is adequate for Network Charging and Control.]]></sdp_action>
<sdp_action condition="==" minimum="x86" result="FAILED"><![CDATA[``x86`` architecture is only acceptable for Oracle internal testing of Network Charging and Control.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The only acceptable architecture is ``SPARC``. You must use a SPARC-based platform.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A02010" mode="VERIFY" name="Physical Memory OK?">
<sdp_command type="RDA"><![CDATA[
if !grepCommand('/usr/sbin/prtconf','Memory size:\s+(.*)','if1')
 return setHcveResult('NotDetermined')
var ($val,$unt) = split('\s',trim(last))
var $val = cond(match($unt,'^g',true),$val,\
                match($unt,'^m',true),expr('/',$val,1024),\
                match($unt,'^k',true),expr('/',$val,1048576),\
                                      '?')
if compare('eq',$val,'?')
 return setHcveResult('NotDetermined')
if expr('>=',$val,16)
 return setHcveResult(concat($val,' GB'))
if expr('>=',$val,8)
 return setHcveResult(concat('Warning ',$val,' GB'))
return setHcveResult(concat('Inadequage ',$val,' GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines if the amount of physical memory is adequate. Oracle recommends at least 16 GB of physical memory for a production environment.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NotDetermined" result="FAILED"><![CDATA[The amount of physical memory installed was not determined. Verify that you have at least 16 GB of physical memory installed.]]></sdp_action>
<sdp_action condition="=~" minimum="^Warning" result="FAILED"><![CDATA[The amount of physical memory is probably not enough to handle the load of a production environment. Oracle recommends a minimum of 16 GB for a production environment.]]></sdp_action>
<sdp_action condition="=~" minimum="^Insufficient" result="FAILED"><![CDATA[Oracle recommends at least 16 GB of physical memory for a production environment.]]></sdp_action>
<sdp_action result="PASSED"><![CDATA[Physical memory is adequate.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>

<sdp_group exec="0" id="COMMON" title="Common Rules">

<sdp_rule id="A03000" mode="RECORD" name="Type of Server">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('$NCC_SERVER_TYPE')
# Select the purposes
var ($cnt,%rsp,@all,@itm) = (0,'*','*')
loop $rec (\
  ['SSMS','SMS (Service Management System) (Single Node) '],\
  ['CSMS','SMS (Service Management System) (Cluster) '],\
  ['SLC','SLC (Service Logic Controller) '],\
  ['VWS','VWS (Voucher and Wallet Server) '])
{call push(@itm,incr($cnt),$rec->[1])
 call push(@all,$rsp{$cnt} = $rsp{$abr} = $rec->[0])
}
call setTempSetting('HCVE_INFO','choice')
call setTempSetting('HCVE_INFO_BEF',\
  'Indicate the type of server you wish to install:')
call setTempSetting('HCVE_INFO_ITM',join('|',@itm))
call setTempSetting('HCVE_INFO_RSP',join('|',%rsp))
call setTempSetting('HCVE_DEFAULT','SSMS')
call requestSetting('HCVEinfo')
call setHcveResult($NCC_SERVER_TYPE = getSetting('HCVE_SELECT'))
]]></sdp_command>
<sdp_description><![CDATA[This rule selects the server type.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A03010" mode="RECORD" name="Installation Sizing">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('$NCC_USAGE_TYPE')
# Select the purposes
var ($cnt,%rsp,@all,@itm) = (0,'*','*')
loop $rec (\
  ['TST','Test System '],\
  ['SPS','Small Production System '],\
  ['MPS','Medium Production System '],\
  ['LPS','Large Production System '])
{call push(@itm,incr($cnt),$rec->[1])
 call push(@all,$rsp{$cnt} = $rsp{$abr} = $rec->[0])
}
call setTempSetting('HCVE_INFO','choice')
call setTempSetting('HCVE_INFO_BEF',\
  'Indicate the type of installation you are planning:')
call setTempSetting('HCVE_INFO_ITM',join('|',@itm))
call setTempSetting('HCVE_INFO_RSP',join('|',%rsp))
call setTempSetting('HCVE_DEFAULT','TST')
call requestSetting('HCVEinfo')
call setHcveResult($NCC_USAGE_TYPE = getSetting('HCVE_SELECT'))
]]></sdp_command>
<sdp_description><![CDATA[This rule selects the installation usage.]]></sdp_description>
</sdp_rule>

</sdp_group>

<sdp_group exec="0" id="DSK" title="DSK Rules">

<sdp_rule id="A04000" mode="RECORD" name="NCC Installation Location">
<sdp_command default="/IN" type="PROMPT" variable="$NCC_HOME"><![CDATA[NCC installation location]]></sdp_command>
<sdp_description><![CDATA[This rule obtains where the Network Charging and Control application will be installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A04001" mode="VERIFY" name="Valid NCC Installation Location?">
<sdp_dependencies>
<sdp_dependency id="A04000" condition="IS" minimum="RECORD" result="SKIPPED" syntax="wiki" value="no location"><![CDATA[Requires an NCC installation location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $NCC_HOME
call setHcveResult(cond(testDir('e',$NCC_HOME),'Valid','Invalid'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Network Charging and Control installation location is valid (exists).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Valid" result="PASSED"><![CDATA[The Network Charging and Control location is valid. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The Network Charging and Control location is not valid (does not exist). Ensure that the designated location exists and rerun the checks.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A04010" mode="RECORD" name="Database Server Location">
<sdp_command default="/u01" type="PROMPT" variable="$NCC_DB_HOME"><![CDATA[Database server location]]></sdp_command>
<sdp_description><![CDATA[This rule obtains where the database server is installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A04011" mode="VERIFY" name="Valid Database Server Location?">
<sdp_dependencies>
<sdp_dependency id="A04010" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[No database server location to validate.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $NCC_DB_HOME
call setHcveResult(cond(testDir('e',$NCC_DB_HOME),'Valid','Invalid'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the database server location is valid (exists).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Valid" result="PASSED"><![CDATA[The database server location is valid. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The database server location is not valid (does not exist). Ensure that the designated location exists and rerun the checks.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A04020" mode="RECORD" name="Data Files Location">
<sdp_command default="/oracle/data1" type="PROMPT" variable="$NCC_DATA_HOME"><![CDATA[NCC data files location]]></sdp_command>
<sdp_description><![CDATA[This rule obtains where the data files will be installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A04021" mode="VERIFY" name="Valid Data Files Location?">
<sdp_dependencies>
<sdp_dependency id="A04020" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[Requires the data files location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $NCC_DATA_HOME
call setHcveResult(cond(testDir('e',$NCC_DATA_HOME),'Valid','Invalid'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the database server location is valid (exists).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Valid" result="PASSED"><![CDATA[The data files location is valid. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The data files location is not valid (does not exist). Ensure that the designated location exists and rerun the checks.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A04030" mode="RECORD" name="Temporary Tablespace Location">
<sdp_command default="" type="PROMPT" variable="$NCC_TEMP_TABLESPACE"><![CDATA[Temporary tablespace location]]></sdp_command>
<sdp_description><![CDATA[This rule obtains where the data files will be installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A04031" mode="VERIFY" name="Valid Temporary Tablespace Location?">
<sdp_dependencies>
<sdp_dependency id="A04030" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[Requires the data files location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $NCC_TEMP_TABLESPACE
call setHcveResult(cond(testDir('e',$NCC_TEMP_TABLESPACE),'Valid','Invalid'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the database server location is valid (exists).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Valid" result="PASSED"><![CDATA[The data files location is valid. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The data files location is not valid (does not exist). Ensure that the designated location exists and rerun the checks.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>

<sdp_group exec="0" id="SPC" title="SPC Rules">

<sdp_rule id="A05000" mode="VERIFY" name="Installation Disk Space OK?">
<sdp_dependencies>
<sdp_dependency id="A03000" condition="IS" minimum="RECORD" result="SKIPPED" value="no server type"><![CDATA[Requires type of server.]]></sdp_dependency>
<sdp_dependency id="A03010" condition="IS" minimum="RECORD" result="SKIPPED" value="no intended usage"><![CDATA[Requires intended usage (installation sizing).]]></sdp_dependency>
<sdp_dependency id="A04000" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[Requires the Network Charging anc Control install location.]]></sdp_dependency>
<sdp_dependency id="A04001" condition="IS" minimum="PASSED" result="SKIPPED" value="location invalid"><![CDATA[Requires a valid install location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
import $NCC_SERVER_TYPE,$NCC_USAGE_TYPE,$NCC_HOME
call setHcveVariable('$NCC_HOME_NEED')
var $NCC_HOME_NEED = check($NCC_SERVER_TYPE,\
  'SSMS',check($NCC_USAGE_TYPE,'TST','20','SPS','24','MPS','55','LPS','72'),\
  'CSMS',check($NCC_USAGE_TYPE,'TST','20','SPS','24','MPS','55','LPS','72'),\
  'SLC', check($NCC_USAGE_TYPE,'TST','20','SPS','21','MPS','51','LPS','71'),\
  'VWS', check($NCC_USAGE_TYPE,'TST','20','SPS','21','MPS','51','LPS','71'))
if !?get_df($NCC_HOME)
 return setHcveResult('NotDetermined')
var $dsk = expr('/',last,1048576)
call setHcveResult(cond(expr('>=',$dsk,$NCC_HOME_NEED),'Adequate',\
                                                       'Inadequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines if the amount disk space in the installation location is adequate for the server type and the intended usage.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The available disk space in the installation location is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="notDetermined" result="FAILED" syntax="wiki"><![CDATA[The amount of available disk space was not determined. Verify that ${NCC_HOME_NEED} GB of disk space is available in the installation location.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The available disk space in the installation location is inadequarte. ${NCC_HOME_NEED} GB is required.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A05010" mode="VERIFY" name="Data Files Disk Space OK?">
<sdp_dependencies>
<sdp_dependency id="A03000" condition="IS" minimum="RECORD" result="SKIPPED" value="no server type"><![CDATA[Requires type of server.]]></sdp_dependency>
<sdp_dependency id="A03010" condition="IS" minimum="RECORD" result="SKIPPED" value="no intended usage"><![CDATA[Requires intended usage (installation sizing).]]></sdp_dependency>
<sdp_dependency id="A04020" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[Requires the data files location.]]></sdp_dependency>
<sdp_dependency id="A04021" condition="IS" minimum="PASSED" result="SKIPPED" value="location invalid"><![CDATA[Requires a valid data files location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
import $NCC_SERVER_TYPE,$NCC_USAGE_TYPE,$NCC_DATA_HOME
call setHcveVariable('$NCC_DATA_NEED')
var $NCC_DATA_NEED = check($NCC_SERVER_TYPE,\
 'SSMS',check($NCC_USAGE_TYPE,'TST','70','SPS','109','MPS','677','LPS','2240'),\
 'CSMS',check($NCC_USAGE_TYPE,'TST','70','SPS','109','MPS','677','LPS','2240'),\
 'SLC',check($NCC_USAGE_TYPE, 'TST','25','SPS','26', 'MPS','31', 'LPS','37'),\
 'VWS',check($NCC_USAGE_TYPE, 'TST','45','SPS','40', 'MPS','56', 'LPS','59'))
if !?get_df($NCC_DATA_HOME)
 return setHcveResult('NotDetermined')
var $dsk = expr('/',last,1048576)
call setHcveResult(cond(expr('>=',$dsk,$NCC_DATA_NEED),'Adequate',\
                                                       'Inadequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines if the amount disk space in the data files location is adequate for the server type and the intended usage.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The available disk space in the data files location is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="notDetermined" result="FAILED" syntax="wiki"><![CDATA[The amount of available disk space was not determined. Verify that ${NCC_DATA_NEED} GB of disk space is available in the data files location.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The available disk space in the data files location is inadequarte. ${NCC_DATA_NEED} GB is required.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A05020" mode="VERIFY" name="Temporary Tablespace Disk Space OK?">
<sdp_dependencies>
<sdp_dependency id="A03000" condition="IS" minimum="RECORD" result="SKIPPED" value="no server type"><![CDATA[Requires type of server.]]></sdp_dependency>
<sdp_dependency id="A03010" condition="IS" minimum="RECORD" result="SKIPPED" value="no intended usage"><![CDATA[Requires intended usage (installation sizing).]]></sdp_dependency>
<sdp_dependency id="A04030" condition="IS" minimum="RECORD" result="SKIPPED" value="no location"><![CDATA[Requires the temporary tablespace location.]]></sdp_dependency>
<sdp_dependency id="A04031" condition="IS" minimum="PASSED" result="SKIPPED" value="location invalid"><![CDATA[Requires a valid temporary tablespace location.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
import $NCC_SERVER_TYPE,$NCC_USAGE_TYPE,$NCC_TEMP_TABLESPACE
call setHcveVariable('$NCC_TEMPTABLE_NEED')
if match($NCC_USAGE_TYPE,'TST')
 return setHcveResult('NA')
var $NCC_TEMPTABLE_NEED = check($NCC_SERVER_TYPE,\
  'SSMS',check($NCC_USAGE_TYPE,'MPS','30','LPS','50','SPS','10'),\
  'CSMS',check($NCC_USAGE_TYPE,'MPS','30','LPS','50','SPS','10'),\
  'SLC' ,'10',\
  'VWS' ,'10')
if !?get_df($NCC_TEMP_TABLESPACE)
 return setHcveResult('NotDetermined')
var $dsk = expr('/',last,1048576)
call setHcveResult(cond(expr('>=',$dsk,$NCC_TEMPTABLE_NEED),'Adequate',\
                                                            'Inadequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines if the amount disk space in the installation location is adequate for the server type and the intended usage.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[The available disk space in the temporary tablespace is not applicable to test server type.]]></sdp_action>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The available disk space in the temporary tablespace location is adequate.]]></sdp_action>
<sdp_action condition="==" minimum="notDetermined" result="FAILED" syntax="wiki"><![CDATA[The amount of available disk space was not determined. Verify that ${NCC_TEMPTABLE_NEED} GB of disk space is available in the temporary tablespace location.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The available disk space in the temporary tablespace location is inadequate. ${NCC_TEMPTABLE_NEED} GB is required.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>

</sdp_content>
</sdp_diaglet>
