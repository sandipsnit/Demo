<sdp_diaglet family="Cygwin,Windows" product="EPM1112" set="A545EPM1112_win" title="Oracle Enterprise Performance Management 11.1.2 Client Preinstall (Windows)" type="A">
<sdp_meta id="$Id: A545EPM1112_win.xml,v 1.12 2012/09/10 06:54:03 mschenke Exp $" type="version"/>
<sdp_meta author="JCR" change="Improve registry checks" date="20120524" type="history"/>
<sdp_content set="A545EPM1112_win" title="Oracle Enterprise Performance Management 11.1.2 Client Preinstall (Windows)" type="check">
<-- ----------------------------------------------------------------------- -->
<sdp_facts>
<sdp_fact id="F00001">
<sdp_description><![CDATA[This fact collects parameters preferentially from the systeminfo command and alternatively from the wmic command and set command.]]></sdp_description>
<sdp_parameters>
<sdp_parameter name="EPM.CLIENT"/>
</sdp_parameters>
<sdp_command type="RDA"><![CDATA[import $OS_NAM
var $hsh = {}
macro get_wmic_value
{var (undef,$val) = command(@arg)
 return trim($val)
}
macro get_wmic_values
{var ($hdr,@lin) = command(@arg)

 # Identify the output format
 var ($cnt,@lgt,@nam,@res) = (0,0)
 while match($hdr,'^((\S+)\s*)(.*)$')
 {var ($col,$nam,$hdr) = last
  incr $cnt
  $nam[$cnt] = lc($nam)
  $lgt[$cnt] = length($col)
 }

 # Decode the results
 if ($cnt)
 {loop $lin (@lin)
  {next !$lin
   var $res = {}
   for $col (1,$cnt)
   {var $res->{$nam[$col]} = trim(substr($lin,0,$lgt[$col]))
    var $lin = substr($lin,$lgt[$col])
   }
   call push(@res,$res)
  }
 }
 return @res
}

# Load the system information
call loadCommand('systeminfo')

# Get the available physical memory
if ?trim(field(':',1,grepLastFile('^Available Physical Memory:','f')))
{var ($val,$unt) = split('\s',last)
 var $val = replace($val,'[,\.]','',true)
 var $val = cond(match($unt,'^K',true),expr('*',$val,1024),\
                 match($unt,'^M',true),expr('*',$val,1048576),\
                 match($unt,'^G',true),expr('*',$val,1073741824),\
                                       $val)
}
if !isNumber($val)
 var $val = get_wmic_value('wmic OS get FreePhysicalMemory')
if isNumber($val)
 var $hsh->{'FREE_MEMORY'} = $val

# Get the operating system name
var $val = trim(grepLastFile('^OS Name:\s+(.*)','if1'))
if !match($val,'Windows',true)
 var $val = get_wmic_value('wmic OS get Caption')
if !match($val,'Windows',true)
 var $val = $OS_NAM
var $hsh->{'OSN'} = $val

# Get the service pack level
if grepLastFile('^OS Version:.*Service Pack (\d+)','f1')
 var ($hsh->{'SP'}) = last
elsif match(get_wmic_value('wmic OS get CSDVersion'),'Service Pack (\d+)')
 var ($hsh->{'SP'}) = last

# Get processor information
var ($max,@lin) = (0)
if grepLastFile('^\s*\[(\d+)\]:(\s+\S+){2,}')
{# Extract the processor lines
 loop $lin (last)
 {var ($cur,$dat) = match($lin,'^\s*\[(\d+)\]:\s+(.*)$')
  break expr('<=',$cur,$max)
  var $max = $cur
  call push(@lin,$dat)
 }
 
 # Get the processor number
 var $hsh->{'CPU','NUM'} = @lin

 # Get the processor type
 var $typ = undef
 loop $lin (@lin)
 {loop $nam ('Itanium','AMD','EM64T','Intel64','x86','GenuineIntel')
  {if match($lin,concat($nam,'\s'),true)
   {var $typ = join('|',$typ,$nam)
    break
   }
  }
 }
 var $hsh->{'CPU','TYPE'} = $typ
 
 # Determine the processor speed of the first processor
 var $min = undef
 loop $lin (@lin)
 {if match($lin,'\~\s*(\d+(\.\d+)?)\s*([KMG])Hz',true)
  {var ($val,undef,$unt) = last
   var $val = cond(match($unt,'K',true),expr('/',$val,1000000),\
                   match($unt,'M',true),expr('/',$val,1000),\
                                        $val)
   if !expr('>=',$val,$min)
    var $min = $val
  }
 }
 if ?$min
  var $hsh->{'CPU','SPEED'} = $min
}
elsif get_wmic_values('wmic CPU get Caption,Manufacturer,MaxClockSpeed')
{var @res = last

 # Determine the number of processors
 var $hsh->{'CPU','NUM'} = @res

 # Get the lowest processor speed
 var $min = undef
 loop $res (@res)
 {if !expr('>=',$cur = $res->{'maxclockspeed'},$min)
   var $min = $cur
 }
 var $hsh->{'CPU','SPEED'} = expr('/',$min,1000)

 # Get the processor type
 var $typ = undef
 loop $res (@res)
 {var $cur = concat($res->{'caption'},',',$res->{'manufacturer'})
  loop $nam ('Itanium','AMD','EM64T','Intel64','x86','GenuineIntel')
  {if match($cur,concat($nam,'\s'),true)
   {var $typ = join('|',$typ,$nam)
    break
   }
  }
 }
 var $hsh->{'CPU','TYPE'} = $typ
}
else
{# Get the number of processors
 var $hsh->{'CPU','NUM'} = ${ENV.NUMBER_OF_PROCESSORS:1}

 # Determine the processor speed of the first processor
 var $min = undef
 var $pth = 'HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor'
 loop $key (grepRegValue($pth,'ProcessorNameString'))
 {var $nam = getRegValue($key,'ProcessorNameString')
  if match($nam,'\@\s*(\d+(\.\d+)?)\s*([KMG])Hz',true)
  {var ($val,undef,$unt) = last
   var $val = cond(match($unt,'K',true),expr('/',$val,1000000),\
                   match($unt,'M',true),expr('/',$val,1000),\
                                        $val)
   if !expr('>=',$val,$min)
    var $min = $val
  }
 }
 if ?$min
  var $hsh->{'CPU','SPEED'} = $min
 
 # Determine the processor type
 var $cur = ${ENV.PROCESSOR_IDENTIFIER}
 loop $nam ('Itanium','AMD','EM64T','Intel64','x86','GenuineIntel')
 {if match($cur,concat($nam,'\s'),true)
  {var $hsh->{'CPU','TYPE'} = $nam
   break
  }
 }
}

# Get system drive
var $hsh->{'SYSTEMDRIVE'} = ${ENV.SYSTEMDRIVE:'C:'}

# Create the parameters
call setHcveParameter('EPM.CLIENT.',$hsh)
]]></sdp_command>
</sdp_fact>
</sdp_facts>

<-- ----------------------------------------------------------------------- -->
<sdp_group title="Common Rules">

<sdp_rule id="A00010" mode="RECORD" name="Select Purpose(s)">
<sdp_command type="RDA"><![CDATA[
# Select the purposes
var ($cnt,%rsp,@all,@itm) = (0)
loop $rec (\
  ['PRE','Are the EPM Client prerequisites ready?'],\
  ['DIR','Is the EPM Client installer directory ready?'],\
  ['DEL','Is environment clean of partial EPM Client install?'])
{call push(@itm,incr($cnt),$rec->[1])
 call push(@all,$rsp{$cnt} = $rsp{$abr} = $rec->[0])
}
call setTempSetting('HCVE_INFO','pick')
call setTempSetting('HCVE_INFO_BEF',\
  'Indicate the purpose(s) you have for running this check:')
call setTempSetting('HCVE_INFO_ITM',join('|',@itm))
call setTempSetting('HCVE_INFO_RSP',join('|',%rsp))
call setTempSetting('HCVE_DEFAULT',join('|',@all))
call requestSetting('HCVEinfo')
call setHcveResult($sel = getSetting('HCVE_SELECT'))

# Indicate which purposes must be checked
if match($sel,'(PRE|DIR)')
 call setHcveParameter('EPM.PURPOSE.BEF',true)
loop $key (split('\|',$sel))
 call setHcveParameter(concat('EPM.PURPOSE.',$key),true)
]]></sdp_command>
<sdp_command type="GROUP" exec="EPM.PURPOSE.BEF">BEF</sdp_command>
<sdp_command type="GROUP" exec="EPM.PURPOSE.PRE">PRE</sdp_command>
<sdp_command type="GROUP" exec="EPM.PURPOSE.DIR">DIR</sdp_command>
<sdp_command type="GROUP" exec="EPM.PURPOSE.DEL">DEL</sdp_command>
<sdp_description><![CDATA[This rule selects the purposes and launches related rules.]]></sdp_description>
</sdp_rule>

</sdp_group>
<-- ----------------------------------------------------------------------- -->
<sdp_group exec="0" id="BEF" name="Before Preinstallation and Install Directory">

<sdp_rule id="A00100" mode="RECORD" name="OS Name">
<sdp_command type="RDA"><![CDATA[
call setHcveResult(getHcveFact('EPM.CLIENT.OSN'))
]]></sdp_command>
<sdp_description><![CDATA[This rule determines the operating system name in sufficient detail to determine its acceptability for EPM Client products.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00101" mode="RECORD" name="OS Bit">
<sdp_command type="RDA"><![CDATA[import $OS_BIT
call setHcveResult($OS_BIT)
]]></sdp_command>
<sdp_description><![CDATA[This rule displays the bit width of the operating system.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00105" mode="RECORD" name="EPM Client Version">
<sdp_command default="11.1.2.2" type="PROMPT" variable="$INSTALLATION_VERSION"><![CDATA[EPM Client Version (11.1.2.0, 11.1.2.1, 11.1.2.2)]]></sdp_command>
<sdp_description><![CDATA[This rule gets the version of the EPM Client that the user is planning to install.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00110" mode="VERIFY" name="OS OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system name.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00101" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system bit width.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00105" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the EPM version.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,$INSTALLATION_VERSION
var $nam = getHcveFact('EPM.CLIENT.OSN')
if !match($nam,'Windows',true)
 return setHcveResult('notWindows')
if expr('==',$OS_BIT,32)
{if match($nam,'2003')
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),2),\
                                       'Adequate',\
                                       'Minimum SP 2'))
 if and(match($nam,'2008'),not(match($nam,'R2')))
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),1),\
                                       'Adequate',\
                                       'Minimum SP 2'))
 if and(match($nam,'XP'),match($nam,'Professional',true))
 {if compare('OLDER',$INSTALLATION_VERSION,'11.1.2.2')
   return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),2),\
                                       'Adequate',\
                                       'Minimum SP 2'))
  else
   return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),3),\
                                       'Adequate',\
                                       'Minimum SP 3'))
 }
 if and(match($nam,'Vista',true),not(match($nam,'Home',true)))
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),1),\
                                        'Adequate',\
                                        'Minimum SP 1'))
 if and(match($nam,'Windows 7'),not(match($nam,'Home',true)))
  return setHcveResult('Adequate')
}
if expr('==',$OS_BIT,64)
{if and(match($nam,'2003'),compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'))
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),2),\
                                       'Adequate',\
                                       'Minimum SP 2'))
 if match($nam,'2008')
 {if match($nam,'R2')
   return setHcveResult('Adequate')
  if !match($nam,'R')
  {if compare('OLDER',$INSTALLATION_VERSION,'11.1.2.2')
    return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),1),\
                                       'Adequate',\
                                       'Minimum SP 1'))
   else
    return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),2),\
                                       'Adequate',\
                                       'Minimum SP 2'))
  }
 }
 if and(match($nam,'XP'),match($nam,'Professional',true),\
        compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'))
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),3),\
                                       'Adequate',\
                                       'Minimum SP 3'))
 if and(match($nam,'Vista',true),not(match($nam,'Home',true)),\
        compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'))
  return setHcveResult(cond(expr('>=',getHcveFact('EPM.CLIENT.SP'),1),\
                                        'Adequate',\
                                        'Minimum SP 1'))
 if and(match($nam,'Windows 7'),match($nam,'Professional',true))
  return setHcveResult('Adequate')
}
call setHcveResult('Inadequate')
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the Windows operating system is adequate for Oracle Hyperion Enterprise Performance Management Client 11.1.2.0 and 11.1.2.1. Additional certification checks may be made for specific sub-products.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The operating system is adequate. There may be additional criteria for specific products checked later.]]></sdp_action>
<sdp_action condition="==" minimum="notWindows" result="FAILED"><![CDATA[The operating system is not Windows. This rule set is only valid for Windows.]]></sdp_action>
<sdp_action condition="=~" minimum="^Minimum SP" result="FAILED"><![CDATA[The operating system is not at an adequate Service Pack level. Bring it up to at least the minimum acceptable Service Pack Level.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The operating system is not adequate. The acceptable operating systems are:
%LIST%32-bit: Windows Server 2003 with SP2/R2 or SP3+, Windows Server 2008 with SP1+ (SP2+ for EPM 11.1.2.2 or later), Windows XP Professional with SP2+ (SP3+ for EPM 11.1.2.2+), Windows Vista with SP1+ (above "Home" series), Windows 7 (above "Home" series)%NEXT%64-bit: Windows 2003 with SP2/R2+ or SP3+ (only for EPM 11.1.2.2 or later, not valid for 11.1.2.0 and 11.1.2.1), Windows Server 2008 R2 (only for EPM 11.1.2.1 or later, not valid for EPM 11.1.2.0), Windows 2008 SP1+ (SP2+ for EPM 11.1.2.2 or later), Windows XP Professional with SP3+ (for EPM 11.1.2.2 or later, not valid for 11.1.2.0 or 11.1.2.1), Windows Vista with SP1+ (for EPM 11.1.2.2 or later, not valid for 11.1.2.0 or 11.1.2.1), Windows 7 (above "Home" series) (for EPM 11.1.2.2 or later, not valid for 11.1.2.0 or 11.1.2.1)%ENDLIST%]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00120" mode="RECORD" name="EPM System Installer Location">
<sdp_command default="" type="PROMPT" variable="$INSTALLER_HOME"><![CDATA[Location of EPM System Installer]]></sdp_command>
<sdp_description><![CDATA[This rule gets the directory where the EPM System Installer will be or has been placed. This is where the ``installTool.cmd`` will be executed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00121" mode="VERIFY" name="Exists EPM Installer Location?">
<sdp_command type="RDA"><![CDATA[import $INSTALLER_HOME
call setHcveResult(cond(testDir('e',$INSTALLER_HOME),'Exists','NotExist'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that EPM System Installer home location exists.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Exists" result="PASSED"><![CDATA[The EPM Installer directory was found. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The EPM Installer directory was not found. Create the directory and then rerun; or rerun with the correct entry.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A00130" mode="RECORD" name="Product Installation Location">
<sdp_command default="$ORACLE_HOME" type="PROMPT" variable="$PRODUCTS_HOME"><![CDATA[Products Installation directory]]></sdp_command>
<sdp_description><![CDATA[This rule gets the directory in which the product(s) will be installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A00131" mode="VERIFY" name="Exists Product Installation Location?">
<sdp_command type="RDA"><![CDATA[import $PRODUCTS_HOME
call setHcveResult(cond(testDir('e',$PRODUCTS_HOME),'Exists','NotExist'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that products installation location exists.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Exists" result="PASSED"><![CDATA[The products install directory was found. No action required.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The products install directory was not found. Create the directory and then rerun; or rerun with the correct entry.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
<-- ----------------------------------------------------------------------- -->
<sdp_group exec="0" id="PRE" title="Prerequisites Check">

<sdp_rule id="A10000" mode="VERIFY" name="Processor Speed OK?">
<sdp_command type="RDA"><![CDATA[
if !?$spd = getHcveFact('EPM.CLIENT.CPU.SPEED')
 return setHcveResult('NotFound')
call setHcveResult(cond(expr('<',$spd,1.6),'Inadequate','Adequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies the processor speed. The minimum requirement is 1.6 GHz.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED" syntax="wiki"><![CDATA[The ${EPM.CLIENT.CPU.NUM} processor(s) can run at least at ${EPM.CLIENT.CPU.SPEED} GHz, which satisfies the minimum speed requirement of 1.6 GHz.]]></sdp_action>
<sdp_action condition="==" minimum="NotFound" result="FAILED"><![CDATA[The processor speed information was not found. Verify that the speed of the processor(s) is at least 1.6 GHz.]]></sdp_action>
<sdp_action condition="==" minimum="Inadequate" result="FAILED"><![CDATA[The slowest processor can run at ${EPM.CLIENT.CPU.SPEED} GHz, which is less than the required 1.6 GHz. It is recommended that you use a machine with processors of at least 1.6 GHz.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10010" mode="VERIFY" name="User Privileges?">
<sdp_command type="RDA"><![CDATA[
macro check_priv
{var $flg = true
 loop $lin (grepCommand(concat('net user ',${RDA.LOGIN}),\
   '(^(Global|Local) Group Memberships|^\s+\S)'))
 {if $flg
  {next !match($lin,'^Local')
   var $flg = false
  }
  if match($lin,'\bAdministrators\b')
   return true
  break match($lin,'^Global')
 }
 return false
}
call setHcveResult(cond(check_priv(),'Adequate','NotAdministrator'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user has ``Administrator`` privileges, as required for installation.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[The user has ``Administrator`` privileges, which is required for installation.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The user does not have ``Administrator`` privileges, which is required for installation.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10100" mode="RECORD" name="Install Product List">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('@PRD')
# Select the product
var ($cnt,%rsp,@all,@itm) = (0)
loop $rec (\
  ['FSC', 'Foundation Services Common client components'],\
  ['FMC', 'Financial Management Client'],\
  ['ERC', 'Essbase Runtime Client and Essbase Spreadsheet Add-in'],\
  ['EASC','Essbase Administration Services Console'],\
  ['EIS', 'Essbase Integration Services'],\
  ['ESC', 'Essbase Studio Console'],\
  ['DM',  'Disclosure Management'],\
  ['OP',  'Offline Planning'],\
  ['FW',  'FDM Workbench'],\
  ['SV',  'SmartView'],\
  ['FRS', 'Oracle Hyperion Financial Reporting Studio'],\
  ['FRPS','Financial Reporting Print Server'],\
  ['DDS', 'Oracle Hyperion Dashboard Development Services/Impact Manager'],\
  ['IRS', 'Oracle Hyperion Interactive Reporting Studio'],\
  ['SPRS','Oracle Hyperion SQR Production Reporting Studio'],\
  ['SPRV','Oracle Hyperion SQR Production Reporting Viewer'],\
  ['SPRR','Oracle Hyperion SQR Production Reporting Remote'],\
  ['SPRA','Oracle Hyperion SQR Production Reporting Activator'],\
  ['WAS', 'Oracle Hyperion Web Analysis Studio'],\
  ['PMA', 'Performance Management Architect'],\
  ['SFC', 'Strategic Finance Client'],\
  ['SFR', 'Oracle Hyperion Strategic Finance Reader'])
{var ($abr,$dsc) = @{$rec}
 call push(@itm,incr($cnt),$dsc)
 call push(@PRD,$rsp{$cnt} = $abr)
 call setHcveParameter(concat('EPM.PRODUCT.',$abr),$dsc)
}
call setHcveParameter('EPM.PRODUCT.INS','EPM System Installer')
call setTempSetting('HCVE_INFO','pick')
call setTempSetting('HCVE_INFO_BEF',\
  'Indicate the product(s) you are planning to install:')
call setTempSetting('HCVE_INFO_ITM',join('|',@itm))
call setTempSetting('HCVE_INFO_RSP',join('|',%rsp))
call setTempSetting('HCVE_DEFAULT',join('|',@PRD))
call requestSetting('HCVEinfo')
call setHcveResult($sel = getSetting('HCVE_SELECT'))

# Indicate which products must be checked
var @PRD = split('\|',$sel)
]]></sdp_command>
<sdp_description><![CDATA[This rule obtains the list of products to be installed.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A10200" mode="VERIFY" name="Itanium Restrictions?">
<sdp_dependencies>
<sdp_dependency condition="!~" id="A10000" minimum="ProcessorInfoNotFound" result="SKIPPED"><![CDATA[Requires the processor information.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
if !match(getHcveFact('EPM.CLIENT.CPU.TYPE'),'Itanium',true)
 return setHcveResult('NA')
var @tbl = ()
loop $prd (grep(@PRD,'^(DDS|FMC|IRS|SPRA|SPRR|SPRS|SPRV)$'))
 call push(@tbl,$prd)
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if platform is Itanium processor based; and if so, for products in the install products list that are not Itanium processor compatible.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[The platform is not Itanium processor based.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[No products that are incompatible with Itanium processors are on the install products list. No action required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The platform is based on Itanium processor(s). The following products in the install products list are incompatible:
|*Return Value*|*Action*|
|DDS|&nbsp;&nbsp;${EPM.PRODUCT.DDS}|
|FMC|&nbsp;&nbsp;${EPM.PRODUCT.FMC}|
|IRS|&nbsp;&nbsp;${EPM.PRODUCT.IRS}|
|SPRA|&nbsp;&nbsp;${EPM.PRODUCT.SPRA}|
|SPRR|&nbsp;&nbsp;${EPM.PRODUCT.SPRR}|
|SPRS|&nbsp;&nbsp;${EPM.PRODUCT.SPRS}|
|SPRV|&nbsp;&nbsp;${EPM.PRODUCT.SPRV}|
]]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10210" mode="VERIFY" name="AMD 64-bit Restrictions?">
<sdp_dependencies>
<sdp_dependency id="A10000" condition="!~" minimum="ProcessorInfoNotFound" result="SKIPPED"><![CDATA[Requires processor information.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00101" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system bit width.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD,$OS_BIT
if !and(expr('==',$OS_BIT,64),\
        match(getHcveFact('EPM.CLIENT.CPU.TYPE'),'AMD'))
 return setHcveResult('NA')
return setHcveResult(cond(grep(@PRD,'ERC','f'),'warn','NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule warns about the need for using the 32-bit Essbase Client if you wish to use the Essbase Spreadsheet Add-in on a 64-bit AMD platform.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED" syntax="wiki"><![CDATA[The platform is not AMD 64-bit.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[There are no AMD 64-bit restricted products install products list.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[If you wish to use the Essbase Spreadsheet Add-in, be sure that you install the 32-bit version of the Essbase Client.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10300" mode="VERIFY" name="Vista Restrictions?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
if !match(getHcveFact('EPM.CLIENT.OSN'),'Vista',true)
 return setHcveResult('NA')
call setHcveResult(cond(grep(@PRD,'FMC','f'),'FMC','NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if Windows Vista restricted products are in the install products list.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[This rule only applies to Windows Vista.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[No Vista incompatible products are in the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The operating system is Windows Vista. Install ${EPM.PRODUCT.FMC} only if Windows Vista (non-Home) is operating in compatibility mode.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10310" mode="VERIFY" name="Windows 7 Restrictions?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00100" minimum="Windows 7" result="SKIPPED"><![CDATA[Only applicable to Windows 7.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
call setHcveResult(cond(grep(@PRD,'EIS','f'),'EIS','NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if Windows 7 restricted products are in the install products list.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[The operating system is not Windows 7.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[No Windows 7 incompatible products are in the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The operating system is Windows 7. ${EPM.PRODUCT.EIS} is not supported on Windows 7. It is supported on Windows 2003 SP2/R2, SP3, Windows XP Professional SP2, and Windows Vista (not Home).]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10320" mode="VERIFY" name="Windows 2008 64-bit Restrictions?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00101" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system bit width.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,@PRD,$INSTALLATION_VERSION
if compare('VALID',$INSTALLATION_VERSION,'11.1.2.2')
 return setHcveResult('NA')
if !and(match(getHcveFact('EPM.CLIENT.OSN'),'2008'),expr('==',$OS_BIT,'64'))
 return setHcveResult('NA')
var @tbl = ()
if grep(@PRD,'^EIS$','f')
 call push(@tbl,'EIS')
if and(compare('eq',$INSTALLATION_VERSION,'11.1.2.1'),grep(@PRD,'^FRS$','f'))
 call push(@tbl,'FRS')
if and(compare('eq',$INSTALLATION_VERSION,'11.1.2.0'),grep(@PRD,'^FRPS$'))
 call push(@tbl,'FRPS')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[If the operating system is Windows 2008 64-bit, this rule checks for Windows 2008 64-bit restricted products on the install products list.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[The operating system is not Windows 2008 64-bit or no PDF generators are required.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[No Windows 2008 64-bit incompatible products are on the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|EIS|Due to a JDBC-ODBC bridge limitation, XML import/export is not supported on Windows 2008 64-bit platforms. If you must perform XML import/export, the ${EPM.PRODUCT.EIS} must be hosted on a 32-bit machine.|
|FRPS|Adobe Distiller 6.0 or 8.0 is not compatible with Microsoft Windows 2008 64-bit or Microsoft Windows 2008 R2 64-bit, so cannot be used with Financial Reporting Printer Service, which is a Microsoft only service. Alternative PDF generators that are supported (and should be installed before configuring ${EPM.PRODUCT.FRPS}) are Ghostscript: GPL Ghostscript 8.63; AFPL Ghostscript 8.54 or 8.51; GNU Ghostscript 7.0.6.|
|FRS|Adobe Distiller 6.0 or 8.0 is not compatible with Microsoft Windows 2008 64-bit or Microsoft Windows 2008 R2 64-bit, so cannot be used with Financial Reporting Printer Service, which is a Microsoft only service. Alternative PDF generators that are supported (and should be installed before configuring ${EPM.PRODUCT.FRS}) are Ghostscript: GPL Ghostscript 8.63; AFPL Ghostscript 8.54 or 8.51; GNU Ghostscript 7.0.6. The Financial Reporting Printer Service is installed in conjunction with ${EPM.PRODUCT.FRS}.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10400" mode="VERIFY" name="Memory OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[
var $mem = expr('/',getHcveFact('EPM.CLIENT.FREE_MEMORY'),1048576)
call setHcveVariable('$MORE_MEM_NEEDED')
call setHcveResult(cond(expr('>=',$mem,1000),'Adequate',\
                                             'Inadequate'))
var $MORE_MEM_NEEDED = expr('-',1000,$mem)
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the machine has at least 1000 MB of available physical memory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[There is adequate physical memory for a Hyperion client to run in addition to the existing load.]]></sdp_action>
<sdp_action condition="==" minimum="NotDetermined" result="FAILED"><![CDATA[The amount of available physical memory could not be determined. Ensure that there is at least 1000 MB of physical memory available in addition to the physical memory required by the system's current load.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Increase machine physical memory to ensure at least 1000 MB of physical memory is available. ${MORE_MEM_NEEDED} MB more physical memory is needed to run a Hyperion client in addition to the existing load.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10420" mode="VERIFY" name="System Space OK?">
<sdp_command type="RDA"><![CDATA[
var $drv = getHcveFact('EPM.CLIENT.SYSTEMDRIVE')
if !?get_df(concat($drv,'\'))
 return setHcveResult('notDetermined')
call setHcveResult(cond(expr('>=',last,1572864),'Adequate','Need 1.5 GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that there is sufficient temporary space available.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[There is adequate space on the ${EPM.CLIENT.SYSTEMDRIVE} drive for swap and temporary directory.]]></sdp_action>
<sdp_action condition="==" minimum="notDetermined" result="FAILED"><![CDATA[Unable to determine the amount of disk space available on drive ${EPM.CLIENT.SYSTEMDRIVE}. Verify that there is at least 1.5 GB of available space for swap and the temporary directory.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[There is not at least 1.5 GB of disk space available on drive ${EPM.CLIENT.SYSTEMDRIVE}, which is required for swap and the temporary directory.
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10430" mode="RECORD" name="Product Disk Space">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00130" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the product installation directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00131" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the product installation directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $PRODUCTS_HOME
call setHcveVariable('$DSK')
var $DSK = expr('/',get_df($InstallDirectory),1048576)
if expr('==',$DSK,0)
 var $DSK = 'notDetermined'
call setHcveResult(concat($DSK,' GB'))
]]></sdp_command>
<sdp_description><![CDATA[This rule finds the amount of available disk space in the product installation directory.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A10440" mode="VERIFY" name="Disk Space OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00120" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the EPM Installer directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00121" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the EPM Installer directory exists.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00130" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the product installation directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00131" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the product installation directory exists.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10430" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the free space in the products installation directory.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $DSK,@PRD,$PRODUCTS_HOME
call setHcveVariable('$PROD_DISK_SPACE_NEED')
if !isNumber($DSK)
 return setHcveResult('NotDetermined')
var %dsk_need = ('DSS','190',\
                 'DM','300',\
                 'EASC','300',\
                 'EIS','90',\
                 'ERC','150',\
                 'ESC','80',\
                 'FMC','100',\
                 'FRS','400',\
                 'FSC','400',\
                 'FW','200',\
                 'IRS','700',\
                 'OP','280',\
                 'PMA','20',\
                 'SFC','700',\
                 'SFR','700',\
                 'SPRA','30',\
                 'SPRR','10',\
                 'SPRS','90',\
                 'SPRV','40',\
                 'SV','100',\
                 'WAS','40')
var $tot = 0
var @tbl = ()
loop $prd (@PRD)
 incr $tot,$dsk_need{$prd}
var $tot = expr('/',$tot,1024)
var $PROD_DISK_SPACE_NEED = concat($tot,' GB')
call setHcveResult(cond(expr('>=',$DSK,$tot),'Adequate','ProdDirInadequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that there is sufficient available disk space on the installer drive for the installer and in the product installation directory to install the products on the install products list.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[There is sufficient available disk space in the selected product installation directory to install the products on the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NotDetermined|The amount of available disk space in the product installation directory was not determined.|
|ProdDirInadequate|${PROD_DISK_SPACE_NEED} is required for product installation in the product installation directory.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10500" mode="VERIFY" name=".NET OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system name.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
call setHcveVariable('$NET_MIN')
var $nam = getHcveFact('EPM.CLIENT.OSN')
if !@lst = grep(@PRD,'^(DM|FW|PMA|SV)$')
 return setHcveResult('NA')
var $NET_MIN = cond(match($nam,'2003.*R2'),'3.5','2.2.307293')
var $min = cond(grep(@lst,'^(FW|PMA|SV)$'),$NET_MIN,'1.1')
var ($dir,$ver) = (0,0)
var $drv = getHcveFact('EPM.CLIENT.SYSTEMDRIVE')
loop $dir (findDir(catDir($drv,'WINDOWS','Microsoft.NET','Framework'),\
  '^v\d+(\.\d+)+','i'))
{var $dir = substr($dir,1)
 if compare('newer',$dir,$ver)
  var $ver = $dir
}
if !$ver
 return setHcveResult('No.NET')
if compare('valid',$ver,$NET_MIN)
 return setHcveResult('Valid.NET')
if grep(@lst,'^(FW|PMA|SV)$')
 return setHcveResult('Old.NET')
call setHcveResult(cond(compare('valid',$ver,$min),'DMValid.NET',\
   'DMOld.NET'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if the required .NET framework for .NET sensitive products in the install products list is available.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED" syntax="wiki"><![CDATA[There are no .NET sensitive products in the install products list.]]></sdp_action>
<sdp_action condition="==" minimum="Valid.NET" result="PASSED" syntax="wiki"><![CDATA[An adequate .NET framework is available for ${EPM.PRODUCT.DM}, ${EPM.PRODUCT.FW}, ${EPM.PRODUCT.PMA}, and ${EPM.PRODUCT.SV}. No action required.]]></sdp_action>
<sdp_action condition="==" minimum="DMValid.NET" result="PASSED" syntax="wiki"><![CDATA[An adequate .NET framework is available for ${EPM.PRODUCT.DM}. ${EPM.PRODUCT.DM} requires .NET framework for Taxonomy Designer.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[An adequate .NET framework is not available. The EPM Installer should add it automatically. Verify that it is present after installation.
|*Return Value*|*Action*|
|No.NET|No .NET framework was found.|
|Old.NET|The .NET framework is too old of a version. At least version ${NET_MIN} is required.|
|DMOld.NET|The .NET framework is too old of a version. ${EPM.PRODUCT.DM} requires .NET framework version 1.1 or later for Taxonomy Designer.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10510" mode="VERIFY" name="Acrobat Reader OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00101" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system bit width.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $OS_BIT,@PRD
call setHcveVariable('$ACRO_READER_VER')
if !grep(@PRD,'^(FRS|IRS)$','f')
 return setHcveResult('NA')
var @key = grepReg32Value('HKLM\SOFTWARE\Adobe\Acrobat Reader','InstallDate')
if !or(@key,hasRegOption(),expr('==',$OS_BIT,32))
 var @key = grepRegValue('HKLM\SOFTWARE\Wow6432Node\Adobe\Acrobat Reader',\
                         'InstallDate')
var $max = 0
loop $key (@key)
{if match($key,'Acrobat Reader\\(\d+(\.\d+)*)\\',true)
 {var ($ver) = last
  if compare('valid',$ver,$max)
   var $max = $ver
 }
}
if !$max
 return setHcveResult('NotPresent')
var $ACRO_READER_VER = $max
call setHcveResult(cond(compare('valid',$max,6),'Adequate','Inadequate'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Acrobat Reader installed is adequate for Oracle's Hyperion Interactive Reporting Studio and Oracle Hyperion Financial Reporting Studio. It must be at least version 6.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[No Acrobat Reader version sensitive products are in the install products list.]]></sdp_action>
<sdp_action condition="==" minimum="Adequate" result="PASSED" syntax="wiki"><![CDATA[The Microsoft Registry reports Acrobat Reader ${ACRO_READER_VER} is installed on this machine. No action needed.]]></sdp_action>
<sdp_action condition="==" minimum="Inadequate" result="FAILED" syntax="wiki"><![CDATA[The Microsoft Registry reports Acrobat Reader is only version ${ACRO_READER_VER}; whereas, it should be at least version 6. Ensure that Acrobat Reader 6 or later is installed.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Is Acrobat Reader 6.0 or later present? It is needed for ${EPM.PRODUCT.FRS} and ${EPM.PRODUCT.IRS}.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10530" mode="VERIFY" name="Microsoft Office OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00101" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the operating system bit width.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD,$OS_BIT,$INSTALLATION_VERSION
var @tbl = ()
if !@lst = grep(@PRD,'^(DM|ERC|FMC|FW|OP|PMA|SFR|SV)$')
 return setHcveResult('NA')
if !@pth = grepRegValue('HKLM\SOFTWARE\Microsoft\Office','ProductName')
 return setHcveResult('NotFound')
var $nam = getRegValue(pop(@pth),'ProductName')
if !match($nam,'(2003|2007|2010)')
 return setHcveResult('Inadequate')
if and(match($nam,'2003'),grep(@lst,'^DM$','f'))
{call push(@tbl,'PAM')
 if !match($nam,'professional',true)
  call push(@tbl,'Professional')
}
if and(match($nam,'2010'),compare('older',$INSTALLATION_VERSION,'11.1.2.1'))
 call push(@tbl,'Version')
if expr('==',$OS_BIT,64)
{if !and(match($nam,'2010'),compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'))
  call push(@tbl,'64bit')
}
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for the presence of Microsoft Office Suite and for any advisories that apply.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[No products with known Microsoft Office restrictions are on the install products list.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[The Microsoft Office installed has no known restrictions with the products on the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[A potential issue with Microsoft Office has been detected:
|*Return Value*|*Action*|
|NotFound|Verify that you have an acceptable version of Microsoft Office Suite installed. ${EPM.PRODUCT.SV}, ${EPM.PRODUCT.DM}, ${EPM.PRODUCT.ERC}, ${EPM.PRODUCT.OP}, ${EPM.PRODUCT.FMC}, ${EPM.PRODUCT.FW}, ${EPM.PRODUCT.PMA}, {EPM.PRODUCT.PMA}, and ${EPM.PRODUCT.SFR} require Microsoft Office Professional versions 2003 32-bit, 2007 32-bit, or 2010 32-bit (2010 is not supported with EPM 11.1.2.0).|
|Inadequate|The Microsoft Office Suite you have installed in not supported with ${EPM.PRODUCT.SV} and/or ${EPM.PRODUCT.DM}. Install a supported version. The supported versions are 2003 32-bit, 2007 32-bit, and 2010 32-bit (2010 is not supported with EPM 11.1.2.0).|
|PAM|With Microsoft Office Suite 2003, ensure that ``Metalogix PAM4Exchange 4.3.9`` is not installed. If PAM4Exchange is installed, refer to ``Microsoft article 907417`` (http://support.microsoft.com/kb/907417).|
|Professional|Microsoft Office Suite Professional Edition is required for ${EPM.PRODUCT.DM}.|
|Version|Microsoft Office 2010 is only supported with EPM 11.1.2.1 and later. Microsoft Office 2007 or 2003 is recommended for EPM 11.1.2.0.|
|64bit|Microsoft Office Productivity Suite must be 32-bit only. Ensure that you are using the 32-bit version.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10540" mode="VERIFY" name="IE Version OK?">
<sdp_command type="RDA"><![CDATA[import $INSTALLATION_VERSION,$OS_NAM
if !?$ver = getRegValue('HKLM\SOFTWARE\Microsoft\Internet Explorer','Version')
 return setHcveResult(cond(\
   or(compare('OLDER',$INSTALLATION_VERSION,'11.1.2.2'),match($OS_NAM,'XP')),\
                                                 'NotFound78',\
                                                 'NotFound789'))
if or(compare('OLDER',$INSTALLATION_VERSION,'11.1.2.2'),match($OS_NAM,'XP'))
 return setHcveResult(cond(match($ver,'^[78]\.'),'Adequate',\
                                                 'Inadequate78'))
return setHcveResult(cond(match($ver,'^[789]\.'),'Adequate',\
                                                 'Inadequate789'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks the acceptability of installed Microsoft Internet Explorer version.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Installed Microsoft Internet Explorer version is acceptable.]]></sdp_action>
<sdp_action condition="==" minimum="NotFound78" result="FAILED"><![CDATA[Microsoft Internet Explorer 7 or 8 is required.]]></sdp_action>
<sdp_action condition="==" minimum="NotFound789" result="FAILED"><![CDATA[Microsoft Internet Explorer 7, 8, or 9 is required.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Installed Microsoft Internet Explorer is unacceptable.
|*Return Value*|*Action*|
|Inadequate78|The version must be 7 or 8.|
|Inadequate789|The version must be 7, 8, or 9.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10550" mode="VERIFY" name="Firefox Version OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD,$INSTALLATION_VERSION
if grep(@PRD,'^(FW|IRS)$')
 return setHcveResult('NotSupported')
if !?nvl(getReg32Value('HKLM\SOFTWARE\Mozilla\Mozilla Firefox',\
                       'CurrentVersion'),\
         getRegValue('HKLM\SOFTWARE\Wow6432Node\Mozilla\Mozilla Firefox',\
                     'CurrentVersion'))
 return setHcveResult('NotFound')
var $ver = version(replace(last,'\s+','.',true))
if and(compare('SAME',$INSTALLATION_VERSION,'11.1.2'),\
       compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'),\
       compare('VALID',$ver,'10'))
 return setHcveResult('10+Notice')
if and(compare('SAME',$ver,'3'),compare('VALID',$ver,'3.5'))
 return setHcveResult('Adequate')
call setHcveResult(cond(compare('OLDER',$INSTALLATION_VERSION,'11.1.2.2'),\
  'Inadequate 3','Inadequate 3/10'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that any Mozilla Firefox installed is acceptable for the products on the install products list.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NotFound" result="PASSED"><![CDATA[No Mozilla Firefox was found.]]></sdp_action>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Any Mozilla Firefox installed is acceptable.]]></sdp_action>
<sdp_action condition="==" minimum="NotSupported" result="FAILED"><![CDATA[Mozilla Firefox was found. Mozilla Firefox is unacceptable for ${EPM.PRODUCT.FW} and ${EPM.PRODUCT.IRS}.]]></sdp_action>
<sdp_action condition="==" minimum="10+Notice" result="WARNING"><![CDATA[With Mozilla Firefox 10 and greater, ensure that the ``Remote XUL Manager plugin`` is installed and activated to avoid blank logon pages for workspace.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The version of Mozilla Firefox installed is unacceptable.
|*Return Value*|*Action*|
|Inadequate 3|The version must be 3.x and at least 3.5. Upgrade the version of Mozilla Firefox.|
|Inadequate 3/10|The version must be either 3.x and at least 3.5 or version 10 or later. Upgrade the version of Mozilla Firefox. When you are installing version 10 or later, ensure that the ``Remote XUL Manager plugin`` is installed and activated to avoid blank logon pages for workspace.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10560" mode="VERIFY" name="Adobe Flash OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
if !grep(@PRD,'^IRS$')
 return setHcveResult('NA')
var $key = 'HKLM\SOFTWARE\Microsoft\Internet Explorer\Low Rights\Elevation\
  Policy\{FAF199D2-BFA7-4394-A4DE-044A08E59B32}'
if !?$val = getRegValue($key,'Policy')
 return setHcveResult('NotFound')
var @tbl = ()
if !match($val,'0x0*3')
 call push(@tbl,'IncorrectPolicy')
var $nam = getRegValue($key,'AppName')
var ($ver) = match($nam,'^FlashUtil(\d+)',true)
if !expr('>=',$ver,8)
 call push(@tbl,'InadequateVersion')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'OK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks for an acceptable version and policy setting of Adobe Flash.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED" syntax="wiki"><![CDATA[No products on the install products list require Adobe Flash.]]></sdp_action>
<sdp_action condition="==" minimum="OK" result="PASSED"><![CDATA[Flash version 8 or later with a policy of 0x00000003 was found.]]></sdp_action>
<sdp_action condition="==" minimum="NotFound" result="FAILED" syntax="wiki"><![CDATA[Adobe Flash 8 or later is required for ${EPM.PRODUCT.IRS}. Install Adobe Flash.]]></sdp_action>
<sdp_action result="FAILED" wiki="syntax"><![CDATA[An Adobe Flash issue was encountered.
|*Return Value*|*Action*|
|InadequateVersion|Adobe Flash version is earlier than 8. Flash 8 or later is required for ${EPM.PRODUCT.IRS}. Upgrade to version 8 or later.|
|IncorrectPolicy|The Adobe Flash policy is not 0x00000003. Set the policy to 0x00000003.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10570" mode="VERIFY" name="Java Plug-in OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00105" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the version of EPM Client to be installed.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD,$INSTALLATION_VERSION,$OS_BIT
if !grep(@PRD,'^WAS$','f')
 return setHcveResult('NA')
var $nam = 'UseJava2IExplorer'
var @key = grepReg32Value('HKLM\SOFTWARE\JavaSoft\Java Plug-in',$nam)
if and(expr('==',$OS_BIT,64),hasRegOption())
 call push(@key,grepReg64Value('HKLM\SOFTWARE\JavaSoft\Java Plug-in',$nam))
var $max = 0
loop $key (@key)
{var ($cur) = match($key,'\\(\d+([\._]\d+)*)$')
 next !?$cur
 var $cur = replace($cur,'_','.',true)
 if compare('newer',$cur,$max)
  var $max = $cur
}
if !$max
 return setHcveResult('NotFound')
if compare('older',$INSTALLATION_VERSION,'11.1.2.1')
 return setHcveResult(cond(compare('valid',$max,'1.5.0.17'),'Adequate',\
                                                            'Inadequate15'))
var $min = cond(compare('VALID',$INSTALLATION_VERSION,'11.1.2.2'),'1.6.0.29',\
                                                                  '1.6.0.22')
return setHcveResult(cond(compare('valid',$max,$min),'Adequate',\
                                                     'Inadequate16'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the Java Plug-in is adequate for the version of EPM Client being installed.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[The Java Plug-in requirement does not apply to any of the products on the install products list.]]></sdp_action>
<sdp_action condition="==" minimum="Adequate" result="PASSED"><![CDATA[Java plugin is registered as being installed, ${EPM.PRODUCT.WAS} will use the plugin.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NotFound|In order to use ${EPM.PRODUCT.WAS}, install a JRE plug-in 1.5.0_17 or later for EPM 11.1.2.0; or version 1.6.0_22 or later for EPM 11.1.2.1.|
|Inadequate15|The JRE plug-in is earlier than 1.5.0_17. Oracle installer will install a plug-in of version 1.5.0_17.|
|Inadequate16|The JRE plug-in is earlier than 1.6.0_22 (for EPM 11.1.2.1) or 1.6.0_29 (for EMP 11.1.2.2). Oracle installer will install a plug-in of the minimum version.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10700" mode="VERIFY" name="Browser Settings OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
var @tbl = ()
var $pth = \
  'HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3'
var @key = ('1206','1400','1809','1A10','2102')
if grep(@PRD,'^IRS$','f')
 call push(@key,'1004','1200','1201')
loop $key (@key)
{if !?getRegValue($pth,$key)
  call push(@tbl,concat($key,'_NotFound'))
 elsif !match(last,'^0x0+$')
  call push(@tbl,concat($key,'_Incorrect'))
}
var $pth = 'HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings'
if !match(getRegValue($pth,'EnableHttp1_1'),'^0x0*1$')
 call push(@tbl,'badHttp')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'Satisfactory'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that critical browser settings are set as needed.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Satisfactory" result="PASSED"><![CDATA[Browser settings are adequate.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[An issue with browser settings has been detected:
|*Return Value*|*Action*|
|1206_NotFound|The settings for scripting of Internet Explorer Web browser control was not determined. Verify that scripting is enabled without restrictions.|
|1206_Incorrect|Change your scripting of Internet Explorer Web browser control settings to allow all scripting without restrictions.|
|1400_NotFound|The settings for JavaScripts was not determined. Verify that JavaScripts are enabled without restrictions.|
|1400_Incorrect|Change your JavaScript settings to allow all JavaScripts.|
|1809_NotFound|The settings for pop-ups was not determined. Verify that pop-ups are enabled without restrictions.|
|1809_Incorrect|Change your pop-up settings to allow all pop-ups without restrictions.|
|1A10_NotFound|The settings for cookies was not determined. Verify that cookies are enabled without restrictions.|
|1A10_Incorrect|Change your cookie settings to allow all cookies without resstrictions.|
|2101_NotFound|The settings for script-initiated Windows was not determined. Verify that script-initiated Windows are enabled without size or position constraint.|
|2101_Incorrect|Change your script-initiated Windows settings to allow script-initiated Windows without size or position constraint.|
|1004_NotFound|The settings for download of ActiveX controls was not found. Verify that ActiveX controls can be downloaded without restrictions.|
|1004_Incorrect|Change your settings for download of ActiveX controls to allow download without restrictions.|
|1200_NotFound|The settings for running ActiveX controls was not found. Verify that ActiveX controls can be run without restrictions.|
|1200_Incorrect|Change your settings for running ActiveX controls to allow running without restrictions.|
|1201_NotFound|The settings for initialization and scripting of ActiveX controls not marked as safe for scripting was not found. Verify that ActiveX conrols not maked as safe for scriptiong can be initialized and scripted without restriction.|
|1201_Incorrect|Change your settings for initialization and scripting of ActiveX controls not marked as safe for scripting to allow initializing and scripting without restrictions.|
|badHttp|Select HTTP 1.1 as the HTTP protocol.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10800" mode="VERIFY" name="Financial Reporting Print Server?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD,$INSTALLATION_VERSION
call setHcveResult(\
  cond(and(grep(@PRD,'^FRS$','f'),\
           compare('SAME',$INSTALLATION_VERSION,'11.1.2.1')),'Instructions',\
                                                             'NA'))

]]></sdp_command>
<sdp_description><![CDATA[This rule provides critical instructions for setting up the Financial Reporting Print Server.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED" syntax="wiki"><![CDATA[${EPM.PRODUCT.FRS} is not in the install products list or the EPM Client version to be installed is not 11.1.2.1.]]></sdp_action>
<sdp_action condition="==" minimum="Instructions" result="FAILED" syntax="wiki"><![CDATA[Be sure to perform the following:%BR%
Run the ${EPM.PRODUCT.FRS} installer. (It installs the ${EPM.PRODUCT.FRS} and files for the print server.)%BR%
``Run EPMSystem11R1\products\financialreporting\install\bin\FRSetupPrintServer.cmd`` with the server URL parameter to configure the print server.
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A10900" mode="VERIFY" name="Ports Available?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A10100" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the install products list.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import @PRD
if !grep(@PRD,'(EASC|EIS|ERC|ESC|FW|FMC|FRS|IRS|SV)')
 return setHcveResult('NA')

var %req = (\
  EASC => [1423,10080,[32768,33768]],\
  EIS  => [1423,3388,[32768,33768]],\
  ERC  => [1423,3388,9080,[32768,33768]],\
  ESC  => [80,5300],\
  FMC  => [28080],\
  FRS  => [1423,[6800,6805],8200,8299,13080,28080,[32768,33768],45000],\
  IRS  => [1423,[32768,33768]],\
  SV   => [80,8200,8300,13080,16000,28080])
var (@out,@prt) = ()
loop $lin (grepCommand('netstat -an','LISTEN|ESTABLISHED'))
{var ($prt) = match($lin,'[\.:](\d+)\s')
 if !grep(@prt,concat('^',$prt,'$'),'f')
  call push(@prt,$prt)
}
loop $prd (@PRD)
{next missing($req{$prd})
 var @lst = ()
 var @req = ()
 loop $rec (@{$req{$prd}})
  call push(@req,cond(ref($rec),$rec,[$rec]))
 loop $prt (@prt)
 {loop $rec (@req)
  {next or(expr('<',$prt,$rec->[0]),expr('>',$prt,$rec->[-1]))
   call push(@lst,$prt)
   break
  }
 }
 if defined($lst[0])
  call push(@out,concat($prd,'[ port conflict ',join("\040",@lst),']'))
}
call setHcveResult(cond(scalar(@out),join("\012",@out),'NoConflicts'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks if the ports required by the products in the install products list are already in use.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NA" result="SKIPPED"><![CDATA[There are no products in the install products list that have default ports.]]></sdp_action>
<sdp_action condition="==" minimum="NoConflicts" result="PASSED"><![CDATA[Active ports on the computer do not overlap with default ports that would be used by the products on the install products list.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[Some of the ports required by the products on the install products list are already used. The ports being used and what is using them can be seen by running ``netstat -nab``. Recommend that the output be sent to a file (for example, ``netstate -nab > portusage.txt``) for easier analysis. Make appropriate adjustments.
|*Return Value*|*Action*|
|EASC...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.EASC}.|
|EIS...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.EIS}.|
|ERC...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.ERC}.|
|ESC...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.ESC}.|
|FMC...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.FMC}.|
|FRS...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.FRS}.|
|IRS...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.IRS}.|
|SV...|There is an overlap of active ports and ports typically used by ${EPM.PRODUCT.SV}.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A11000" mode="RECORD" name="IP Address(es)">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('@IP')
loop $hit (grepCommand('ipconfig','IP(v4)? Address.*:\s*(\S+)','i2'))
 call push(@IP, $hit)
call setHcveResult(cond(scalar(@IP),join("\012",@IP),'Not determined'))
]]></sdp_command>
<sdp_description><![CDATA[This rule finds the IP address(es) currently defined.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A11010" mode="RECORD" name="Host Name">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('$HST')
if field('\.',0,command('hostname'))
 return setHcveResult($HST = last)
call setHcveResult('Not determined')
]]></sdp_command>
<sdp_description><![CDATA[This rule finds the host name.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A11020" mode="RECORD" name="Domain Name">
<sdp_command type="RDA"><![CDATA[call setHcveVariable('$DOM')
if grepCommand('ipconfig /all','DNS Suffix.*:\s*\S','fi')
 return setHcveResult($DOM = field(':\s*',1,last))
call setHcveResult('Not determined')
]]></sdp_command>
<sdp_description><![CDATA[This rule finds the domain name.]]></sdp_description>
</sdp_rule>

<sdp_rule id="A11030" mode="VERIFY" name="Functional Network?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A11000" minimum="PASSED|RECORD" result="SKIPPED" value="No IP"><![CDATA[Requires IP address.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A11010" minimum="PASSED|RECORD" result="SKIPPED" value="No host"><![CDATA[Requires host name.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A11020" minimum="PASSED|RECORD" result="SKIPPED" value="No domain"><![CDATA[Requires domain name.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $DOM,$HST,@IP
var $cmd = findCommand('nslookup.exe')
if ?$cmd
{var $hst = join('.',$HST,$DOM)
 if grepCommand(concat($cmd,' ',$hst),'Address:\s*(\S+)','1',1,4)
 {if grep(@IP,concat('^',quote(last),'$'))
   return setHcveResult('DNSregistered')
 }
}

macro check_domain
{var @dom = split('\.',@arg)
 if expr('<',scalar(@dom),2)
  return true
 loop $str (@dom)
 {if !match($str,'^[A-Za-z\d]+(\-[A-Za-z\d]+)*$')
   return true
 }
 var $top = pop(@dom)
 return expr('<',length($dom),2)
}

var @tbl = ()
if check_domain($DOM)
 call push(@tbl,'InvalidDomain')
if !match($HST,'^[A-Za-z\d]+(\-[A-Za-z\d]+)*$')
 call push(@tbl,'InvalidHost')
if !@IP
 call push(@tbl,'NoIP')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that computer may be part of a functional network.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="DNSregistered" result="PASSED"><![CDATA[The computer is part of a functional network.]]></sdp_action>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[The computer may be part of a functional network.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|InvalidDomain|The domain is not valid.|
|InvalidHost|The host name is not valid.|
|NoIP|No IP address was found.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
<-- ----------------------------------------------------------------------- -->
<sdp_group exec="0" id="DIR" title="Installer Directory Readiness">

<sdp_rule id="A20000" mode="VERIFY" name="Installer Path OK?">
<sdp_dependencies>
<sdp_dependency condition="=~" id="A00120" minimum="\S" result="SKIPPED"><![CDATA[Requires the EPM Installer directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00121" minimum="PASSED" result="FAILED"><![CDATA[Requires that the EPM Installer directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $INSTALLER_HOME
var $pat = '[\000-\054\057\073-\100\133\^\140\173-\175\177]'
var @tbl = ()
var $pth = cond(match($INSTALLER_HOME,'^([A-Z]:)',true),\
  substr($INSTALLER_HOME,2),$INSTALLER_HOME)
if match($pth,$pat)
 call push(@tbl,'characterPath')
if expr('>',length($INSTALLER_HOME),100)
 call push(@tbl,'longPath')
call setHcveResult(cond(scalar(@tbl),join("\12",@tbl),'OK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the EPM System Installer path does not contain unacceptable characters. The only acceptable characters are letters, numbers, slash (\), underscore (_), dash (-), tilde (~), and dot (.).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="OK" result="PASSED"><![CDATA[Only acceptable characters were found in the path.]]></sdp_action>
<sdp_action condition="==" minimum="EPMInstallerHomeInvalid" result="FAILED"><![CDATA[The location given for ``EPM System Installer`` does not exist.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|characterPath|The path to the ``EPM System Installer`` contains unacceptable characters.|
|longPath|The path to the ``EPM System Installer`` is greater than 100 characters. The path must be less than 100 characters.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A20010" mode="VERIFY" name="installTool.cmd OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00120" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the EPM Installer directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00121" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the EPM Installer directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $INSTALLER_HOME
call setHcveResult(cond(\
  testFile('r',catFile($INSTALLER_HOME,'installTool.cmd')),'Readable',\
  testFile('e',catFile($INSTALLER_HOME,'installTool.cmd')),'NotReadable',\
                                                           'NotFound'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the ``installTool.cmd`` is present and executable.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Readable" result="PASSED"><![CDATA[``installTool.cmd`` is present and executable in the installation directory.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[|*Return Value*|*Action*|
|NotFound|``installTool.cmd`` is not present in the ${INSTALLER_HOME} directory. Verify the presence of ``installTool.cmd`` in the installer directory.|
|NotReadable|Ensure that the installing user has the privileges required to execute ``installTool.cmd``.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A20020" mode="VERIFY" name="Installer Files OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00120" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the EPM Installer directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00121" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the EPM Installer directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $INSTALLER_HOME
call setHcveVariable('$TOP_ASSEMBLIES')
var ($TOP_ASSEMBLIES,@tbl) = (catDir($INSTALLER_HOME,'assemblies'))
if findDir($TOP_ASSEMBLIES,'\w','n')
{loop $dir (last)
 {var $cnt = 0
  loop $sub (findDir([$TOP_ASSEMBLIES,$dir],'^11\.'))
  {var $dat = catFile($sub,'assembly.dat')
   incr $cnt
   if !testFile('f',catFile($TOP_ASSEMBLIES,$dat))
    call push(@tbl,concat($dat,' missing'))
   elsif !testFile('r',lastFile())
    call push(@tbl,concat($dat,' not readable'))
   elsif testFile('z',lastFile())
    call push(@tbl,concat($dat,' empty'))
  }
  if !$cnt
   call push(@tbl,concat('No assemblies in ',$dir))
  elsif decr($cnt)
   call push(@tbl,concat('Multiple assemblies in ',$dir))
 }
}
else
 return setHcveResult('NoInstallFiles')
return setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'NoIssues'))
]]></sdp_command>
<sdp_description><![CDATA[This rule ensures that there are ``assembly.dat`` files in the appropriate directories. Missing or zero size ``assembly.dat`` files are indicative of corrupted install files.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NoIssues" result="PASSED"><![CDATA[An ``assembly.dat`` file is present for each of the assemblies in the installation directory.]]></sdp_action>
<sdp_action condition="==" minimum="NoInstallFiles" result="FAILED" syntax="wiki"><![CDATA[No installation files were found in the ${`TOP_ASSEMBLIES} directory.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[One or more assemblies is probably corrupted; redownload and uncompress the assemblies using 7-zip (http://www.7-zip.org) or clear the ``Use folder names`` option to use WinZip.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A20030" mode="VERIFY" name="Installer Directory Access?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00120" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the EPM Installer directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00121" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the EPM Installer directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $INSTALLER_HOME
var @tbl = ()
if !testDir('r',$INSTALLER_HOME)
 call push(@tbl,'NotRead')
if !testDir('x',$INSTALLER_HOME)
 call push(@tbl,'NotExecute')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'AdequatePrivileges'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user has the needed privileges to the installer directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="AdequatePrivileges" result="PASSED"><![CDATA[The user has read, write, and execute permissions on the installer directory. Not action needed.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The user does not have all the permissions required on the installer directory.
|*Return Value*|*Action*|
|NotRead|The user must have read permissions to the installer directory.|
|NotExecute|The user must have execute permissions to the installer directory.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A20100" mode="VERIFY" name="Installation Path OK?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00130" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the product installation directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00131" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the product installation directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $PRODUCTS_HOME
var $pat = '[\000-\054\057\073-\100\133\^\140\173-\175\177]'
var $pth = replace($PRODUCTS_HOME,'^([A-Za-z]:)','')
call setHcveResult(cond(match($pth,$pat),'characterPath','OK'))
]]></sdp_command>
<sdp_description><![CDATA[This rule checks that the product installation path does not contain unacceptable characters. The only acceptable characters are letters, numbers, slash (\), underscore (_), dash (-), tilde (~), and dot (.).]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="OK" result="PASSED"><![CDATA[Only acceptable characters were found in the path.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[The product installation directory path contains unacceptable characters.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A20130" mode="VERIFY" name="Product Directory Access?">
<sdp_dependencies>
<sdp_dependency condition="IS" id="A00130" minimum="RECORD" result="SKIPPED"><![CDATA[Requires the product installation directory.]]></sdp_dependency>
<sdp_dependency condition="IS" id="A00131" minimum="PASSED" result="SKIPPED"><![CDATA[Requires that the product installation directory exists.]]></sdp_dependency>
</sdp_dependencies>
<sdp_command type="RDA"><![CDATA[import $PRODUCTS_HOME
var @tbl = ()
if !testDir('r',$PRODUCTS_HOME)
 call push(@tbl,'NotRead')
if !testDir('w',$PRODUCTS_HOME)
 call push(@tbl,'NotWrite')
if !testDir('x',$PRODUCTS_HOME)
 call push(@tbl,'NotExecute')
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'AdequatePrivileges'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the user has the needed privileges to the product installation directory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="AdequatePrivileges" result="PASSED"><![CDATA[The user has read, write, and execute permissions on the product installation directory. Not action needed.]]></sdp_action>
<sdp_action result="FAILED" syntax="wiki"><![CDATA[The user does not have all the permissions required on the product installation directory.
|*Return Value*|*Action*|
|NotRead|The user must have read permissions to the product installation directory.|
|NotWrite|The user must have write permissions to the product installation directory.|
|NotExecute|The user must have execute permissions to the product installation directory.|
]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
<-- ----------------------------------------------------------------------- -->
<sdp_group exec="0" id="DEL" title="Check Prior Installation Deletion">

<sdp_rule id="A30000" mode="VERIFY" name="Environment OK?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
loop $lin (grepCommand('cmd /c set','(Hyperion|Middleware|Oracle).*=','i'))
 call push(@tbl,key($lin))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'Clean'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the environment variables do not have settings from prior Oracle installations.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Clean" result="PASSED"><![CDATA[No evidence of prior Oracle installations was found in the environment variables.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Environment variables were found that contained settings from Oracle installations.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A30010" mode="VERIFY" name="Registry OK?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
var $key = 'HKCU\Software'
call push(@tbl,grepCommand(concat('reg query "',$key,'"'),\
  '(^HK.*\\(Brio|Hyperion( .*)?|Oracle))\s*$','i1'))
loop $key ('HKLM\SOFTWARE','HKLM\SOFTWARE\wow6432node')
{var @lst = grepCommand(concat('reg query "',$key,'"'),\
   '(^HK.*\\(Brio|Hyperion( .*)?|Oracle))\s*$','i1')
 call push(@tbl,grep(@lst,'Oracle\s+MyDesktop','iv'))
}
loop $key ('HKLM\SYSTEM\ControlSet001\Services',\
           'HKLM\SYSTEM\ControlSet002\Services',\
           'HKLM\SYSTEM\ControlSet003\Services')
 call push(@tbl,grepCommand(concat('reg query "',$key,'"'),\
   '(^HK.*\\(Hyperion|Oracle HyS9))\s*$','i1'))
var $pre = 'HKLM\SYSTEM\CurrentControlSet\Services'
call push(@tbl,grepCommand(concat('reg query "',$key,'"'),\
  '(^HK.*\\(BPS|Hyperion|HyS9|Oracle))\s*$','i1'))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'Clean'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies the registry does not have settings from prior Oracle installations.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Clean" result="PASSED"><![CDATA[No evidence of prior Oracle installations was found in the registry.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Registry entries were found indicating prior Oracle installations.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A30020" mode="VERIFY" name="Directories OK?">
<sdp_command type="RDA"><![CDATA[var @tbl = ()
var %dir = (\
  catDir(${ENV.USERPROFILE},'.oracle.instances'),1,\
  catDir(getHcveFact('EPM.CLIENT.SYSTEMDRIVE'),'Oracle','Middleware'),1)
loop $key ('PROGRAMFILES','ProgramFiles(x86)','ProgramW6432')
{if getEnv($key)
  var $dir{catDir(last,'Oracle Hyperion Disclosure Management')} = 1
}
loop $dir(keys(%dir))
{if testDir('e',$dir)
  call push(@tbl,$dir)
}
var %dir = ()
loop $key ('COMMONPROGRAMFILES','CommonProgramFiles(x86)','CommonProgramW6432')
{if getEnv($key)
  var $dir{catDir(last,'InstallShield')} = 1
}
loop $dir (keys(%dir))
 call push(@tbl,findDir($dir,'(brio|hyperion|oracle|universal)','i'))
call setHcveResult(cond(scalar(@tbl),join("\012",@tbl),'Clean'))
]]></sdp_command>
<sdp_description><![CDATA[This rule verifies that the directories do not have evidence of prior Oracle installations.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="Clean" result="PASSED"><![CDATA[No directory evidence was found of prior Oracle installations.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[Evidence was found in the directories of prior Oracle installations.]]></sdp_action>
</sdp_actions>
</sdp_rule>

<sdp_rule id="A30030" mode="VERIFY" name="Oracle Inventory?">
<sdp_command type="RDA"><![CDATA[import $OS_BIT
var $dir = cond(hasRegOption(),\
   nvl(getReg64Value('HKLM\SOFTWARE\Oracle','inst_loc'),\
       getReg32Value('HKLM\SOFTWARE\Oracle','inst_loc')),\
   getRegValue('HKLM\SOFTWARE\Oracle','inst_loc'))
if and(defined($dir),testDir('d',$dir))
 return setHcveResult($dir)
loop $dir (getEnv('PROGRAMFILES'),getEnv('ProgramW6432'))
{next !?$dir
 if testDir('d',catDir($dir,'Oracle','Inventory'))
  return setHcveResult(lastDir())
}
return setHcveResult('NotFound')
]]></sdp_command>
<sdp_description><![CDATA[Verifies that there is no Oracle inventory.]]></sdp_description>
<sdp_actions>
<sdp_action condition="==" minimum="NotFound" result="PASSED"><![CDATA[No Oracle inventory was found.]]></sdp_action>
<sdp_action result="FAILED"><![CDATA[An Oracle inventory was found indicating incomplete removal of prior installation.]]></sdp_action>
</sdp_actions>
</sdp_rule>

</sdp_group>
</sdp_content>
</sdp_diaglet>
