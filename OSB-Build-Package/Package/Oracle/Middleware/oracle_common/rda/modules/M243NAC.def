# M243NAC.def: Collects Alarm Card Information on Netra CT Servers
# $Id: M243NAC.def,v 1.6 2012/05/08 04:36:04 mschenke Exp $
# ARCS: $Header: /home/cvs/cvs/RDA_4/src/scripting/lib/modules/M243NAC.def,v 1.6 2012/05/08 04:36:04 mschenke Exp $
#
# Change History
# 20120507  MSC  Apply naming conventions.

=head1 NAME

M243NAC - Collects Alarm Card Information on Netra CT Servers

=head1 DESCRIPTION

This module collects Alarm Card information on Netra CT 410 and 810 servers.

=cut

use Mrc

# Initialization
var $VALIDATE = true
keep $VALIDATE

section begin

var $ERR = '---## Associated Errors'
var $TOC = '%TOC%'
var $TOP = '[[#Top][Back to top]]'

run XPLRlib('netract')

# Get the ping syntax
var $PING = check(${RDA.OS},'solaris','/usr/sbin/ping %s',\
                            'linux',  '/bin/ping -c 1 %s',\
                            'cygwin', '/bin/ping %s 64 1')

#------------------------------------------------------------------------------
# XPLR_nac section
#------------------------------------------------------------------------------

section XPLR_nac

# Validate the execution context
if !${XPLR_GLOBAL:true}
 return
call log_run('Processing NAC sections ...')
if !grepCommand('/usr/bin/uname -i','SUNW,NetraCT-[48]10')
 return log_info('Only runs on Netra CT 410 and 810 platforms')

toc '2:Alarm Card'

# Describe commands for getting Alarm Card configuration information
var @cfg = (['netract/ifconfig',\
             'ifconfig',\
             '---+ Status of Active Network Interfaces'],\
            ['netract/mohusershow',\
             'mohusershow',\
             '---+ MOH User Accounts'],\
            ['netract/showcpustate',\
             'showcpustate',\
             '---+ Board Type, Power State, and Boot State for CPU Boards'],\
            ['netract/showdate',\
             'showdate',\
             '---+ System Date'],\
            ['netract/showenvironment',\
             'showenvironment',\
             '---+ Summary of Current Environmental Information'],\
            ['netract/showescapechar',\
             'showescapechar',\
             '---+ Escape Character Used to End a Console Session'],\
            ['netract/showfru_midplane_1_Sun_Part_No',\
             'showfru midplane 1 Sun_Part_No',\
             '---+ Midplane Part Number'],\
            ['netract/showfru_midplane_1_Sun_Serial_No',\
             'showfru midplane 1 Sun_Serial_No',\
             '---+ MidPlane Serial Number'],\
            ['netract/showfru_slot_4_Boot_Devices',\
             'showfru slot 4 Boot_Devices',\
             '---+ Slot 4 Boot Devices'],\
            ['netract/showfru_slot_5_Boot_Devices',\
             'showfru slot 5 Boot_Devices',\
             '---+ Slot 5 Boot Devices'],\
            ['netract/showhealth',\
             'showhealth',\
             '---+ CPU Nodes Health Information'],\
            ['netract/showhostname',\
             'showhostname',\
             '---+ Host Name Used in the Command-Line Prompt'],\
            ['netract/showipaddr-b1',\
             'showipaddr -b 1',\
             '---+ Port 1 IP Address'],\
            ['netract/showipnetmask-b1',\
             'showipnetmask -b 1',\
             '---+ Port 1 Network Mask'],\
            ['netract/showipgateway-b1',\
             'showipgateway -b 1',\
             '---+ Port 1 Gateway'],\
            ['netract/showipmode-b1',\
             'showipmode -b 1',\
             '---+ Port 1 Mode'],\
            ['netract/showipaddr-b2',\
             'showipaddr -b 2',\
             '---+ Port 2 IP Address'],\
            ['netract/showipnetmask-b2',\
             'showipnetmask -b 2',\
             '---+ Port 2 Network Mask'],\
            ['netract/showipgateway-b2',\
             'showipgateway -b 2',\
             '---+ Port 2 Gateway'],\
            ['netract/showipmode-b2',\
             'showipmode -b 2',\
             '---+ Port 2 Mode'],\
            ['netract/showmohsecurity',\
             'showmohsecurity',\
             '---+ MOH Security Mode'],\
            ['netract/shownetwork',\
             'shownetwork',\
             '---+ Network Configuration'],\
            ['netract/showntpserver',\
             'showntpserver',\
             '---+ IP Address of the NTP Server'],\
            ['netract/showpanicdump',\
             'showpanicdump',\
             '---+ Panic Dump Settings for CPU Nodes'],\
            ['netract/showrecovery',\
             'showrecovery',\
             '---+ Setrecovery Action Values'],\
            ['netract/showsecondaryboot',\
             'showsecondaryboot',\
             '---+ Secondary Boot Mode'],\
            ['netract/showservicemode',\
             'showservicemode',\
             '---+ Flash Update Service Mode'],\
            ['netract/usershow',\
             'usershow',\
             '---+ User Accounts'],\
            ['netract/version',\
             'version',\
             '---+ Software and Firmware Versions'],\
            ['netract/aps',\
             'aps',\
             '---+ ChorusOS: List of all Actors Running'],\
            ['netract/arp-a',\
             'arp -a',\
             '---+ ChorusOS: Address Resolution'],\
            ['netract/netstat-a',\
             'netstat -a',\
             '---+ ChorusOS: Network Status'],\
            ['netract/sysctl-A',\
             'sysctl -A',\
             '---+ ChorusOS: Micro Kernel State'])

# Describe commands for getting Alarm Card log information
var @log = (['netract/consolehistory',\
              'consolehistory',\
              '---+ Nonempty Console Logs'],\
             ['netract/debuglog',\
              'debuglog',\
              '---+ Last Debugging Log'],\
             ['netract/loghistory',\
              'loghistory',\
              '---+ Event Log History'])

# Collect configuration and log information from specified Alarm Cards

loop $hst(split('\|',getSetting('XPLR_NAC_HOST')))
{next !?$hst
 debug ' Inside NAC collection, validating ',$hst,' access'
 if !match($hst,'^[\w\-\.\:]+$')
  next log_info(concat('The Alarm Card name or IP "',$hst,\
                       '"contains invalid characters'))
 call command(sprintf($PING,$hst))
 if status()
  next log_info(concat('Host ',$hst,' is not reachable'))

=head2 Netra Alarm Card Configuration Information

Gathers the settings, parameters, and status information from the specified
Netra Alarm Cards using the following commands:

=over 2

=item o F<ifconfig>

=item o F<mohusershow>

=item o F<showcpustate>

=item o F<showdate>

=item o F<showenvironment>

=item o F<showescapechar>

=item o C<showfru midplane 1 Sun_Part_No>

=item o C<showfru midplane 1 Sun_Serial_No>

=item o C<showfru slot 4 Boot_Devices>

=item o C<showfru slot 5 Boot_Devices>

=item o F<showhealth>

=item o F<showhostname>

=item o C<showipaddr -b 1>

=item o C<showipaddr -b 2>

=item o C<showipgateway -b 1>

=item o C<showipgateway -b 2>

=item o C<showipmode -b 1>

=item o C<showipmode -b 2>

=item o C<showipnetmask -b 1>

=item o C<showipnetmask -b 2>

=item o F<showmohsecurity>

=item o F<shownetwork>

=item o F<showntpserver>

=item o F<showpanicdump>

=item o F<showrecovery>

=item o F<showsecondaryboot>

=item o F<showservicemode>

=item o F<usershow>

=item o F<version>

=item o F<aps>

=item o C<arp -a>

=item o C<netstat -a>

=item o C<sysctl -A>

=back

=cut

 debug ' Inside NAC collection, getting configuration from ',$hst
 report concat('nac_cfg_',$hst)
 title '---+!! ',$hst,' Configuration Information'
 title $TOC
 loop $rec (@cfg)
 {var $cmd = concat('/bin/rsh ',$hst,' ',$rec->[1])
  prefix
  {write $rec->[2]
   write '---## Using: ',encode($cmd)
  }
  call collectCommand({nam=>$rec->[0],\
    out=>{blk=>true,flt=>true,idx=>true,rpt=>${CUR.REPORT}},\
    err=>{blk=>true,flt=>true,hdr=>$ERR,rpt=>${CUR.REPORT}}\
    },$cmd)
  if hasOutput(true)
   write $TOP
 }
 if isCreated(true)
  toc '3:[[',getFile(),'][rda_report][',$hst,' Configuration Information]]'

=head2 Netra Alarm Card Log Information

Gathers the console, debug, and event log information from the specified Netra
Alarm Cards using the following commands:

=over 2

=item o F<consolehistory>

=item o F<debuglog>

=item o F<loghistory>

=back

=cut

 debug ' Inside NAC collection, getting log information from ',$hst
 report concat('nac_log_',$hst)
 title '---+!! ',$hst,' Log Information'
 title $TOC
 loop $rec (@log)
 {var $cmd = concat('/bin/rsh -n ',$hst,' ',$rec->[1])
  prefix
  {write $rec->[2]
   write '---## Using: ',encode($cmd)
  }
  call collectCommand({nam=>$rec->[0],\
    out=>{blk=>true,flt=>true,idx=>true,rpt=>${CUR.REPORT}},\
    err=>{blk=>true,flt=>true,hdr=>$ERR,rpt=>${CUR.REPORT}}\
    },$cmd)
  if hasOutput(true)
   write $TOP
 }
 if isCreated(true)
  toc '3:[[',getFile(),'][rda_report][',$hst,' Log Information]]'
}

=head2 nac_dhcp - DHCP Information

Gathers DHCP configuration information for the current Netra CT system using
the following commands:

=over 2

=item o C</usr/sbin/dhtadm -P>

=item o C</usr/sbin/pntadm -P E<96>/usr/sbin/pntadm -LE<96>>

=item o C</usr/platform/SUNW,NetraCT-810/sbin/netraos list>

=item o C</usr/platform/SUNW,NetraCT-810/sbin/netradc list>

=back

=cut

var ($net) = command('/usr/sbin/pntadm -L')
debug ' Inside NAC collection, generating NAC_dhcp report'
report nac_dhcp
title '---+ DHCP Information'
title $TOC
call do_exec(['netract/dhtadm-P',\
              '/usr/sbin/dhtadm','-P',\
              '---+ DHCP service configuration table'],\
             [concat('netract/pntadm-P_',$net),\
              '/usr/sbin/pntadm',concat('-P ',$net),\
              '---+ DHCP network tables configured'],\
             ['netract/netraos_list',\
              '/usr/platform/SUNW,NetraCT-810/sbin/netraos','list',\
              '---+ netraos list'],\
             ['netract/netradc_list',\
              '/usr/platform/SUNW,NetraCT-810/sbin/netradc','list',\
              '---+ netradc list'])
if isCreated(true)
 toc '3:[[',getFile(),'][rda_report][DHCP Information]]'

=head2 nac_local_logs - Local Log Files

Collects the following log files for the current Netra CT system:

=over 2

=item o F</var/adm/consolehistory*>

=item o F</var/adm/loghistory*>

=back

=cut

debug ' Inside NAC collection, gathering local log files'
report nac_local_logs
prefix
{write '---+ Local Log Files'
 write '   * Links point to files that have been collected in their original \
             format. Opening them directly in your browser can present \
             risks. To prevent them, access the file outside the browser or \
             use the link to save them and use an adequate viewer.'
 write '|*File Path*| *Size*|*Last Modified Date*|'
}
loop $fil (grepDir('/var/adm','^(console|log)history','np'))
{if collectFile(substr($fil,1),$fil)
  write '|[[',last,'][_blank][',$fil,']]| ',getSize($fil),'|',\
        getLastModify($fil,'%d-%b-%Y&nbsp;%H:%M:%S'),' |'
 else
  write '|',$fil,' | ',getSize($fil),'|',\
        getLastModify($fil,'%d-%b-%Y&nbsp;%H:%M:%S'),' |'
}
if isCreated(true)
{write $TOP
 toc '3:[[',getFile(),'][rda_report][Local log files]]'
}

#------------------------------------------------------------------------------
# Input file conversion section
#------------------------------------------------------------------------------

section input

# Define the input file parser macro
macro parse_input
{var ($fil,$flg) = @arg
 loop $hst (grepFile($fil,'^\s*#','v'))
 {next !?$hst
  call push(@hst,$hst)
 }
 if @hst
 {call setTempSetting('XPLR_NAC_HOST',join('|',@hst))
  call setTempSetting('xplr_nac_accept',true)
 }
 else
  call setTempSetting('xplr_nac_accept',$flg)
}

# Determine which input file must be parsed
if and(defined($fil = ${ENV.EXP_ACINPUT_CONFIG}),\
       testFile('frs',catFile($fil)))
 call parse_input(lastFile(),true)
else
 call parse_input(catFile(${XPLR_ETC},'acinput.txt'),false)

=head1 SEE ALSO

L<S150XPLR.def|modules::S150XPLR>,
L<XPLRlib.def|modules::XPLRlib>

=head1 COPYRIGHT NOTICE

Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.

=head1 TRADEMARK NOTICE

Oracle and Java are registered trademarks of Oracle and/or its
affiliates. Other names may be trademarks of their respective owners.

=cut
