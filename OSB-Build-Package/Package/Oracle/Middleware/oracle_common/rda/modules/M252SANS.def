# M252SANS.def: Collects Storage Area Network (SAN) Switches Information
# $Id: M252SANS.def,v 1.2 2012/08/10 17:45:08 mschenke Exp $
# ARCS: $Header: /home/cvs/cvs/RDA_4/src/scripting/lib/modules/M252SANS.def,v 1.2 2012/08/10 17:45:08 mschenke Exp $
#
# Change History
# 20120810  MSC  Add RCS tags.

=head1 NAME

M252SANS - Collects Storage Area Network (SAN) Switches Information

=head1 DESCRIPTION

This module collects Storage Area Network (SAN) switches information.

=cut

use Mrc
use Telnet

# Initialization
var $VALIDATE = true
keep $VALIDATE

section begin

var $ERR = '---## Associated Errors'
var $TOC = '%TOC%'
var $TOP = '[[#Top][Back to top]]'

run XPLRlib('sanextended')

# Get the ping syntax
var $PING = check(${RDA.OS},'solaris','/usr/sbin/ping %s',\
                            'linux',  '/bin/ping -c 1 %s',\
                            'cygwin', '/bin/ping %s 64 1')

#------------------------------------------------------------------------------
# XPLR_sans section
#------------------------------------------------------------------------------

section XPLR_sans

# Validate the execution context
if !${XPLR_GLOBAL:true}
 return
call log_run('Processing SANS sections ...')

pretoc '2:Storage Area Network (SAN) Switches'

=head2 Storage Area Network (SAN) Switches Information

Gathers Storage Area Network (SAN) switches information using the following
commands:

=over 2

=item o C<capture ${SAN_NAME}> (sanbox1)

=item o C</usr/bin/ls -l ${EXP_SANINPUT_CONFIG}>

=back

In addition, gathers Storage Area Network (SAN) switches information from
remote switch using the following commands through telnet:

=over 2

=item o C<bloomphantomshow> (brocade)

=item o C<loomphantomshow> (brocade)

=item o C<show eventlog> (mcdata)

=item o C<show features> (mcdata)

=item o C<show frus> (mcdata)

=item o C<show ip ethernet> (mcdata)

=item o C<show loginserver> (mcdata)

=item o C<show nameServer> (mcdata)

=item o C<show port config> (mcdata)

=item o C<show port info>  (mcdata)

=item o C<show port status> (mcdata)

=item o C<show port technology> (mcdata)
￼
=item o C<show security portbinding> (mcdata)

=item o C<show support> (sanbox1, sanbox2)

=item o C<show switch> (mcdata)

=item o C<show system> (mcdata)

=item o C<show tech-support details> (cisco)

=item o C<show zoning> (mcdata)

=item o C<supportshow> (brocade)

=item o C<switchtype>

=back

=cut

# Treat all requests
loop $set (split('\|',${XPLR_SANS_SET}))
{var ($lgo,$pmt,@cmd,@tbl) = ('exit')
 var $hst = getSetting(concat('XPLR_SANS_HOST_',$set))
 var $typ = getSetting(concat('XPLR_SANS_TYPE_',$set))
 var $usr = getSetting(concat('XPLR_SANS_USER_',$set))
 next !?$hst

 if compare('eq',$typ,'brocade')
  var $pmt = ':admin> '
 elsif compare('eq',$typ,'cisco')
 {var $pmt = '# '
  var @cmd = (\
    ['terminal_length_0.out',\
     'terminal length 0',\
     '---++ Disable Page Scroll'],\
    ['show_tech-support_details.out',\
     'show tech-support details',\
     '---++ Router Detailed Information'])
 }
 elsif compare('eq',$typ,'mcdata')
 {var $lgo = 'logout'
  var $pmt = 'Root> '
 }
 elsif compare('eq',$typ,'sanbox1')
  var $pmt = '>'
 elsif compare('eq',$typ,'sanbox2')
  var $pmt = '#> '

 # Validate the input parameters
 debug ' Inside SANS collection, validating ',$hst,' access'
 if !match($hst,'^[\w\-\.\:]+$')
  next log_info(concat('The Storage Area Network (SAN) switch name or ',\
                       'IP "',$hst,'"contains invalid characters.'))
 call command(sprintf($PING,$hst))
 if status()
  next log_info(concat('Switch ',$hst,' is not reachable.'))

 if !hasPassword('host',$hst,$usr)
  call setPassword('host',$hst,$usr,\
    askPassword(concat('Enter ',$usr,' password for Storage Area Network ',\
                       '(SAN) switch ',$hst,': ')))

 # Connect to the Storage Area Network (SAN) switch
 var $ctl = new('Telnet',hst=>$hst)
 if !?$ctl->open
  next log_warning($ctl->get_info('msg'))
 if !?$ctl->login($usr,{dis=>$lgo,\
                        pat=>concat('m/',$pmt,'/')})
  next log_warning($ctl->get_info('msg'))

 # Verify the switch type is correct
 if compare('ne',$typ,'cisco')
 {var @out =  $ctl->command('switchtype')
  if grep(@out,'Fabric OS')
  {# Brocade switch type
   var @cmd = (\
     ['supportshow.out',\
      'supportshow',\
      '---++ Detailed Switch Information'])
   var @out =  $ctl->command('supportshow')
   var ($mod) = grep(@out,'switchType')
   var $mod = field('\.',0,field('\s+',1,$mod))
   if match($mod,'^1$|^2$|^3$|^5$')
    call push(@cmd,\
      ['loomphantomshow.out',\
       'loomphantomshow',\
       '---++ Phantom Translation Tables'])
   elsif match($mod,'^9$|^12$|^16$')
    call push(@cmd,\
      ['bloomphantomshow.out',\
       'bloomphantomshow',\
       '---++ Phantom Translation Tables'])
  }
  elsif grep(@out,'Sanbox','i')
  {# Sanbox2 switch type
   var @cmd = (\
     ['show_support.out',\
      'show support',\
      '---++ Detailed Switch Information'])
  }
  elsif grep(@out,'^Login:')
  {# Sanbox1 switch type
   var @out =  $ctl->command('show support')
   if grep(@out,'version','i')
    var @cmd = (\
      ['show_support.out',\
       'show support',\
       '---++ Detailed Switch Information'])
   else
   {var $bin = get_bin_tool('capture')
    if defined($bin)
     var @tbl = (\
       [join('/','san',$hst,basename($bin)),\
        $bin,undef,\
        '---++ Detailed Switch Information'])
   }
  }
  elsif grep(@out,'Root')
  {# Mcdata switch type
   var @cmd = (\
     ['show_ip_ethernet.out',\
      'show ip ethernet',\
      '---++ Ethernet Attributes'],\
     ['show_eventlog.out',\
      'show eventlog',\
      '---++ Event Log Information'],\
     ['show_features.out',\
      'show features',\
      '---++ Feature Sets and Their States'],\
     ['show_frus.out',\
      'show frus',\
      '---++ FRU Information'],\
     ['show_loginserver.out',\
      'show loginserver',\
      concat('---++ Login Server Database Information for Devices Attached ',\
             'to This Switch')],\
     ['show_nameServer.out',\
      'show nameServer',\
      concat('---++ Name Server Database Information for Devices Attached ',\
             'to This Switch')],\
     ['show_security_portbinding.out',\
      'show security portbinding',\
      '---++ Port Binding Configuration'],\
     ['show_port_config.out',\
      'show port config',\
      '---++ Port Configuration'],\
     ['show_port_info.out',\
      'show port info',\
      '---++ Port Information'],\
     ['show_port_status.out',\
      'show port status',\
      '---++ Port Status'],\
     ['show_port_technology.out',\
      'show port technology',\
      '---++ Port Technology Information'],\
     ['show_switch.out',\
      'show switch',\
      '---++ Switch Attributes'],\
     ['show_system.out',\
      'show system',\
      '---++ System Attributes'],\
     ['show_zoning.out',\
      'show zoning',\
      '---++ Zoning Configuration Saved on the Fabric'])
  }
  else
   next log_info(concat($hst,' switch type cannot be determined. ',\
                        'Data gathering is not possible.'))
 }

 # Genererate the report
 debug ' Inside SANS collection, gathering ',$hst,' information'
 report concat('sans_',$hst)
 title '---+!! Storage Area Network (SAN) Switch'
 title '---## ',$hst,' Information'
 title $TOC
 loop $rec (@cmd)
 {if !ref($rec)
   write $rec
  else
  {prefix
   {write $rec->[2]
    write '---## Using: ',encode($rec->[1])
    call beginBlock(true)
    call addBlock('E','D',concat('san/',$hst,'/',$rec->[0]))
   }
   if $ctl->collect(${CUR.REPORT},{cmd=>$rec->[1]})
    call log_warning($ctl->get_info('msg'))
   if hasOutput(true)
   {call endBlock()
    write $TOP
   }
  }
 }
 call do_exec(@tbl)
 if isCreated(true)
  toc '3:[[',getFile(),'][rda_report][',$hst,' Information]]'

 # Close the connection
 call $ctl->quit
}

=head2 sans_input - Input File

Lists the characteristics of the specified input file.

=cut

if testFile('r',catFile(${XPLR_SANS_CFG}))
{debug ' Inside SANS collection, getting input file characteristics'
 report sans_input
 title '---+ Input File Details'
 call do_exec(\
   [concat('san/ls_-l_',replace(lastFile(),'\/','@',true)),\
    '/usr/bin/ls',concat('-l ',lastCommand()),\
    '---+ Explorer Input File'])
 if isCreated()
  toc '3:[[',getFile(),'][rda_report][Input File]]'
}

unpretoc

#------------------------------------------------------------------------------
# Input file conversion section
#------------------------------------------------------------------------------

section input

# Define the input file parser macro
macro parse_input
{var ($fil,$flg) = @arg

 var @sta = getStat($fil)
 if !expr('&',$sta[2],077)
 {# Parse the input file
  var ($set,@set) = (0)
  loop $lin (grepFile($fil,'^\s*#','v'))
  {var ($hst,$typ,$pwd,$usr) = split('\s+',trim($lin),4)
   next !?$hst
   if ?$pwd
    call setPassword('host',$hst,$usr,$pwd)
   call push(@set,incr($set))
   call setTempSetting(concat('XPLR_SANS_HOST_',$set),$hst)
   call setTempSetting(concat('XPLR_SANS_TYPE_',$set),$typ)
   call setTempSetting(concat('XPLR_SANS_USER_',$set),$usr)
  }

  # Save the parsing results
  if $set
  {call setTempSetting('XPLR_SANS_CFG',$fil)
   call setTempSetting('XPLR_SANS_SET',join('|',@set))
   call setTempSetting('xplr_sans_accept',true)
  }
  else
   call setTempSetting('xplr_sans_accept',$flg)
 }
}

# Parse the input file
if and(defined($fil = ${ENV.EXP_SANINPUT_CONFIG}),\
       testFile('frs',catFile($fil)))
 call parse_input(lastFile(),true)
else
 call parse_input(catFile(${XPLR_ETC},'saninput.txt'),false)

=head1 SEE ALSO

L<S150XPLR.def|modules::S150XPLR>,
L<XPLRlib.def|modules::XPLRlib>

=head1 COPYRIGHT NOTICE

Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.

=head1 TRADEMARK NOTICE

Oracle and Java are registered trademarks of Oracle and/or its
affiliates. Other names may be trademarks of their respective owners.

=cut
