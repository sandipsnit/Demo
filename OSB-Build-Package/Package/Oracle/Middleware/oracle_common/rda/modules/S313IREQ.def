# S313IREQ.def: Handles the Oracle Instance Collection Requests
# $Id: S313IREQ.def,v 1.23 2012/08/21 10:45:22 mschenke Exp $
# ARCS: $Header: /home/cvs/cvs/RDA_4/src/scripting/lib/modules/S313IREQ.def,v 1.23 2012/08/21 10:45:22 mschenke Exp $
#
# Change History
# 20120821  KRA  Extend installation type detection.

=head1 NAME

S313IREQ - Handles the Oracle Instance Collection Requests

=head1 DESCRIPTION

This module collects information for Oracle Instances and their associated
Oracle homes.

=cut

echo tput('bold'),'Processing IREQ module ...',tput('off')

# Initialization
var $DEV_AGE   = getSetting('DEV_AGE',7)
var $MAX       = getSetting('DISCO_LOG_MAX',20)
var $ODL_SIZE  = getSetting('IREQ_ODL_TAIL',65536)
var $TAIL      = getSetting('RDA_TAIL',1000)
var $WEBC_TAIL = getSetting('WEBCACHE_TAIL',5000)

var $ABR = setAbbr()
var $TOC = '%TOC%'
var $TOP = '[[#Top][Back to top]]'
var $VER = 'Version:\w+\s+[\d\.]+'

set $NOT_OWNER_STATEMENT
{**Note:**
"
"The RDA was executed with an operating system user which is different from
"the operating system user who installed the Oracle Fusion Middleware 11g.
"
"Therefore, no information are available in this section.
"
}

var ($cnt,%COMMON,%HOMES,%INSTANCES) = 0

# Define global variables
var %cmp
var %DUP
var %HTTPDCONF
var %HTTPDERRLOG
var %HTTPDREQLOG

# Load the common macros
run ASITlib()
run INSTinfo()
run library()
run WLSlib()

# Define a macro to check if a focus area is applicable for the current target
macro chk_area
{var ($nam,@dir) = @arg
 import $ABR
 keep $ABR

 # Check the directory presence
 if @dir
 {loop $dir (@dir)
   break $flg = testDir('d',$dir)
  if !$flg
   return false
 }

 # Check the interest for that area
 if @tid = getFocus($nam)
 {var $abr = setAbbr($ABR)
  call switchToc(@tid)
  call setAbbr($abr)
  return true
 }
 return false
}

# Define a macro to indicate an installation type error
macro dsp_error
{echo ' Error: The identified Oracle home does not contain appropriate \
               information'
 report error
 write '** Error: The identified Oracle home is not a supported installation \
        type.**%BR%This module supports the following installation types:'
 write '   * Oracle Business Intelligence Enterprise Edition 11g'
 write '   * Oracle Forms and Reports 11g'
 write '   * Oracle Identity Management 11g'
 write '   * Oracle Portal, Forms, Reports and Discoverer 11g'
 write '   * Oracle WebTier'
 write '%BR%'
 if @arg
 {write '|*Oracle Home*|',encode($arg[0]),' |'
  write '|*Install Name*|',$arg[1],' |'
  write '|*Install Version*|',$arg[2],' |'
 }
 toc '2:[[',getFile(),'][rda_report][Installation Type Error]]'
}

# Analyze the Oracle home collection requests
loop $key (grepSetting('_REQ_HOME$'))
{var $tid = substr($key,0,-9)
 var $hom = getSetting($key)
 next !testDir('d',$hom)

 if missing($HOMES{$hom})
  var $HOMES{$hom} = addTarget('OH_Req$$',{ORACLE_HOME=>$hom})
 call $HOMES{$hom}->set_focus($tid,getSetting(concat($tid,'_FOCUS')))
}

# Analyze the common home collection requests
loop $key (grepSetting('_REQ_COMMON$'))
{var $tid = substr($key,0,-11)
 var $hom = getSetting($key)

 if missing($COMMON{$hom})
  var $COMMON{$hom} = addTarget('CH_Req$$',{ORACLE_HOME=>$hom})
 call $COMMON{$hom}->set_focus($tid,getSetting(concat($tid,'_FOCUS')))
}

# Analyze the instance home collection requests
loop $key (grepSetting('_REQ_INSTANCE$'))
{var $tid = substr($key,0,-13)
 var $ins = getSetting($key)
 next !testDir('d',$ins)

 if missing($INSTANCES{$ins})
 {var $hom = get_home($ins)
  if and(defined($hom),testDir('d',$hom))
  {# Get the Oracle home target
   if missing($HOMES{$hom})
    var $HOMES{$hom} = addTarget('OH_Req$$',{ORACLE_HOME=>$hom})

   # Define the instance target (with Oracle home)
   var $INSTANCES{$ins} = addTarget('OI_Req$$',\
                                    {ORACLE_INSTANCE=>$ins,\
                                     HOME_TARGET    =>$HOMES{$hom}})
  }
  else
  {# Define the instance target (without Oracle home)
   var $INSTANCES{$ins} = addTarget('OI_Req$$',\
                                    {ORACLE_INSTANCE=>$ins,\
                                     MISSING_HOME   =>1})
  }
 }

 var $tgt = $INSTANCES{$ins}
 if !getSetting(concat($tid,'_NO_INSTANCE'))
  call $tgt->set_focus($tid,getSetting(concat($tid,'_FOCUS')))
 next !?$tgt = $tgt->get_home
 var $tid = replace($tid,'_OI','_OH')
 if !getSetting(concat($tid,'_NO_HOME'))
  call $tgt->set_focus($tid,getSetting(concat($tid,'_FOCUS')))
}

=head1 COMMON COMPONENTS HOME COLLECTIONS

Performs the following collection on all requested common components homes:

=cut

var $cnt = 0
loop $key (keys(%COMMON))
{# Skip when not requested
 call setCurrent($COMMON{$key})
 next !getFocus()
 call switchToc(last)
 call setAbbr(concat($ABR,'_c',incr($cnt)))

 var $ORACLE_HOME = getHome('.')

=head2 abbr - Abbreviations

Displays the RDA abbreviations defined for the Common Components home
collection.

=cut

 debug ' Inside IREQ module, collecting defined abbreviations'
 report abbr
 prefix
 {write '---+ Common Components Home Abbreviations'
  write '|*Abbreviation*|*Location*|'
 }
 var %hsh = getSymbols()
 loop $key (keys(%hsh))
  write '|',$key,' |',catDir(@{$hsh{$key}}),' |'
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][Abbreviations]]'

=head2 product_info - Product Information

Gathers the Common Components home product information.

=cut

 if chk_area('Generic')
 {if testDir('d',catDir($ORACLE_HOME,'inventory'))
  {debug ' Inside IREQ module, getting common components product information \
           (can take time)'
   report product_info
   prefix
   {write '---+!! Common Components Home Product Information'
    write $TOC
   }
   call inventory_details(lastDir(),true)
   if isCreated(true)
    toc '2:[[',getFile(),'][rda_report][Product Information]]'
  }

=head2 Cfgtoollogs Files

Gathers the Oracle Fusion Middleware Common Components home cfgtoollogs files.

=cut

  debug ' Inside IREQ module, gathering common components cfgtoollogs files'
  pretoc '2:Cfgtoollogs Files'
  call sort_files(3,0,\
   grepDir(catDir($ORACLE_HOME,'cfgtoollogs'),'.','np'),\
   grepDir(catDir($ORACLE_HOME,'cfgtoollogs','cfgfw'),'\.log$','np'),\
   grepDir(catDir($ORACLE_HOME,'cfgtoollogs','oui'),'\.(err|log|out)$','np'),\
   grepDir(catDir($ORACLE_HOME,'cfgtoollogs','opatch'),'\.(log|txt)$','np'))
  unpretoc
 }

=head2 Manifest Information

Gathers the Common Components home manifest information.

=cut

 if chk_area('Manifest')
 {debug ' Inside IREQ module, getting common components manifest information \
          (can take time)'
  pretoc '2:Manifest Information'
  call dsp_manifest(3,$ORACLE_HOME)
  unpretoc
 }
}
call setAbbr($ABR)

=head1 ORACLE HOME COLLECTIONS

Performs the following collections on all requested Oracle homes:

=cut

var $cnt = 0
loop $key (keys(%HOMES))
{# Skip when not requested
 call setCurrent($HOMES{$key})
 next !getFocus()
 call switchToc(last)
 call setAbbr($abr = concat($ABR,'_o',incr($cnt)))

 # Oracle home initialization
 var $ORACLE_HOME = getHome('.')

 var $APACHE_TOP       = catDir($ORACLE_HOME,'ohs')
 var $ASSISTANTS_HOME  = catDir($ORACLE_HOME,'assistants')
 var $BI_HOME          = catDir($ORACLE_HOME,'bifoundation')
 var $CFGTOOLLOGS_HOME = catDir($ORACLE_HOME,'cfgtoollogs')
 var $DEV_BIN          = catDir($ORACLE_HOME,'bin')
 var $DISCOVERER_HOME  = catDir($ORACLE_HOME,'discoverer')
 var $FORMS_HOME       = catDir($ORACLE_HOME,'forms')
 var $INSTALL_HOME     = catDir($ORACLE_HOME,'install')
 var $LDAP_HOME        = catDir($ORACLE_HOME,'ldap')
 var $OPMN_HOME        = catDir($ORACLE_HOME,'opmn')
 var $OVD_HOME         = catDir($ORACLE_HOME,'ovd')
 var $PORTAL_HOME      = catDir($ORACLE_HOME,'portal')
 var $REPORTS_HOME     = catDir($ORACLE_HOME,'reports')
 var $WEBCACHE_HOME    = catDir($ORACLE_HOME,'webcache')

=head2 error - Installation Type Error

Indicates that the identified Oracle home does not contain information related
to a supported installation type.

=cut

 debug ' Inside IREQ module, analyzing Oracle home ',basename($ORACLE_HOME)
 debug ' Inside IREQ module, validating the installation type'
 var $flg = false
 var $fil = catFile($ORACLE_HOME,'inventory','ContentsXML','comps.xml')
 if testFile('fr',$fil)
 {if xmlFind(xmlLoadFile($fil),'PRD_LIST/TL_LIST/COMP')
  {var ($xml) = (last)
   var $ver = xmlValue($xml,'VER')
   var $dsc = xmlData(xmlFind($xml,'EXT_NAME'))
   if !and(match($dsc,'^(Classic Application Server 11g|\
                         Oracle Business Intelligence Shiphome|\
                         Oracle Forms and Reports 11g|\
                         Oracle Identity Management 11g|\
                         Oracle Portal, Forms, Reports and Discoverer 11g|\
                         Oracle WebTier)',true),\
           match($ver,'^11\.'))
    var $flg = true
  }
 }
 if $flg
  call dsp_error($ORACLE_HOME,$dsc,$ver)
 elsif !testDir('d',$OPMN_HOME)
  call dsp_error()

=head2 abbr - Abbreviations

Displays the RDA abbreviations defined for the Oracle home collection.

=cut

 debug ' Inside IREQ module, collecting defined abbreviations'
 report abbr
 prefix
 {write '---+ Oracle Home Abbreviations'
  write '|*Abbreviation*|*Location*|'
 }
 var %hsh = getSymbols()
 loop $key (keys(%hsh))
  write '|',$key,' |',catDir(@{$hsh{$key}}),' |'
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][Abbreviations]]'

=head2 product_info - Product Information

Gathers the product information.

=cut

 if testDir('d',catDir($ORACLE_HOME,'inventory'))
 {debug ' Inside IREQ module, getting product information (can take time)'
  report product_info
  prefix
  {write '---+!! Product Information'
   write $TOC
  }
  call inventory_details(lastDir(),true)
  if isCreated(true)
   toc '2:[[',getFile(),'][rda_report][Product Information]]'
 }

=head2 Install and Configuration

Gathers the Oracle Fusion Middleware configuration and installation files.

=cut

 debug ' Inside IREQ module, gathering install and configuration information'
 pretoc '2:Installation and Configuration'
 call sort_files(3,$TAIL,\
   grepDir($ASSISTANTS_HOME,'\.log$','dir'),\
   grepDir($CFGTOOLLOGS_HOME,'\.(ini|log|properties|xml)','dir'),\
   grepDir($INSTALL_HOME,'\.(ini|log)','dir'))
 unpretoc

 if testDir('d',catDir($ORACLE_HOME,'diagnostics'))
 {debug ' Inside IREQ module, gathering diagnostics information'
  pretoc '2:Diagnostics'
  call sort_files(3,$TAIL,\
    grepDir(lastDir(),'\.((conf|ini|xml|properties|err)$|log)|\~','dir'))
  unpretoc
 }

=head2 Manifest Information

Gathers the Oracle home manifest information.

=cut

 if chk_area('Manifest')
 {debug ' Inside IREQ module, getting Oracle home manifest information \
          (can take time)'
  pretoc '2:Manifest Information'
  call dsp_manifest(3,$ORACLE_HOME)
  unpretoc
 }

 # Check the user
 var ($own,$uid) = ()
 loop $tid (getFocus())
  break ?$uid = getOwner(catFile(${OUT.C},\
                           concat(${CUR.GROUP},'_',$ABR,'_',$tid,'.toc')))
 if grepDir(catDir($OPMN_HOME,'bin'),'^opmnctl(\.(bat|exe))?$','fip')
  var $own = getOwner(last)
 if compare('eq',$uid,$own)
  var $NOT_OWNER = false
 else
 {var $NOT_OWNER = true
  echo tput('reverse'),'Warning:'
  echo '========'
  echo 'The RDA is started as userid: ',$uid
  echo 'The Oracle home ',$ORACLE_HOME, ' was installed using userid: ',\
       nvl($own,'[not found]')
  echo 'The RDA script will continue, but it will skip some collection steps.',\
       tput('off')
 }

=head2 Oracle Business Intelligence Enterprise Edition

Gathers the Oracle Business Intelligence Enterprise Edition version and its
executable.

=cut

 if chk_area('BI',$BI_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_bi_generic')
   run BIr11()

  # Collect the Business Intelligence information
  call setAbbr(concat($abr,'_BI'))
  pretoc '1++:Oracle Business Intelligence Enterprise Edition'
  call collect_bi_generic($BI_HOME)
  unpretoc
  call setAbbr($abr)
 }

=head2 Oracle Discoverer

Gathers the Oracle Discoverer executable and library versions.

=cut

 if chk_area('DSCV',$DISCOVERER_HOME)
 {call setAbbr(concat($abr,'_DSCV'))
  pretoc '1++:Oracle Discoverer'
  run DSCVinfo(true)
  unpretoc
  call setAbbr($abr)
 }

=head2 Oracle Forms/Reports

Gathers the Oracle Forms/Reports installation files and collects all general
Fusion Middleware information for Oracle Forms/Reports.

=cut

 if chk_area('DEV',$FORMS_HOME,$REPORTS_HOME)
 {var $PS_EF
  var %ENV

  var $DEV_VER   = undef
  var $IAS_VER   = undef
  var $IAS_ALONE = 'unknown'
  var $IAS_HOME  = undef
  var $APPS_INST = undef
  var $OAH_TOP   = undef

  # Load the library on first usage
  if !isImplemented('collect_dev_generic')
   run DEVr11()

  # Collect the Developer information
  call setAbbr(concat($abr,'_DEV'))
  pretoc '1++:Oracle Forms/Reports'
  run DEVinfo(\%ENV,\$PS_EF,\$DEV_VER,\$IAS_VER,\$IAS_ALONE,\$IAS_HOME,\
              \$APPS_INST,\$OAH_TOP)
  call collect_dev_generic()
  unpretoc
  call setAbbr($abr)

  # Restore the initial environment
  loop $key (keys(%ENV))
   call setEnv($key,$ENV{$key})
 }

=head2 Oracle HTTP Server

Gathers the Oracle HTTP server executable list and the F<apachectl> script.

=cut

 if chk_area('HTTP')
 {debug ' Inside IREQ module, listing Oracle HTTP Server executables'
  pretoc '1++:Oracle HTTP Server'
  report ohs_bin
  var $dir = catDir($APACHE_TOP,'bin')
  prefix
   write '---+ List of Files in ',encode($dir)
  call statDir('an',$dir)
  if isCreated(true)
  {write $TOP
   toc '2:[[',getFile(),'][rda_report][Executable List]]'
  }

  var $fil = catFile($dir,'apachectl')
  if testFile('fr',$fil)
  {debug ' Inside IREQ module, getting apachectl start script'
   report ohs_apachectl
   write '---+ Content Taken from File ',encode($fil)
   call writeFile($fil)
   write $TOP
   toc '2:[[',getFile(),'][rda_report][apachectl]]'
  }
  unpretoc
 }

=head2 Oracle Internet Directory

Displays the output of the F<oiddiag> command.

Displays the C<oidctl> status.

Displays the information about processes.

Lists details from the C<ods_process> table.

Lists details from the C<ds_attrstore> table.

Displays the contents of the F<$OH/ldap/odi/conf/odi.properties> file.

=cut

 if chk_area('OID',$LDAP_HOME)
 {call setAbbr(concat($abr,'_OID'))
  pretoc '1++:Oracle Internet Directory'
  run OIDinfo(true,false)
  unpretoc
  call setAbbr($abr)

=head2 LDAP

Gathers the LDAP executable list.

=cut

  if testDir('d',$dir = catDir($LDAP_HOME,'bin'))
  {debug ' Inside IREQ module, gathering LDAP information'
   report LDAP_bin
   prefix
    write '---+ List of Files in ',encode($dir)
   call statDir('an',$dir)
   if isCreated(true)
   {toc '1++:LDAP'
    toc '2:[[',getFile(),'][rda_report][Executable List]]'
   }
  }
 }

=head2 OPMN

Gathers the OPMN executable list.

=cut

 if chk_area('OPMN',$dir = catDir($OPMN_HOME,'bin'))
 {debug ' Inside IREQ module, getting OPMN information'
  report OPMN_bin
  prefix
   write '---+ List of Files in ',encode($dir)
  call statDir('an',$dir)
  if isCreated(true)
  {write $TOP
   toc '1++:OPMN'
   toc '2:[[',getFile(),'][rda_report][Executable List]]'
  }
 }

=head2 Portal Diagnostics

Collects the repository information from the Portal database. Run PDA in
advanced mode for a detailed report collection.

Gathers the list of Portal users from C<WWSEC_Person$>.

Gathers the HTTP status of URLs from the Portal and Infrastructure tier.

Gathers the OID connection information.

=cut

 if chk_area('PDA',$PORTAL_HOME)
 {# Define the common variables
  var $OC4J_USED
  var $VERSION

  # Collect the portal repository information
  call setAbbr(concat($abr,'_PDA'))
  pretoc '1++:Portal Diagnostics'
  run PDAinfo(\$OC4J_USED,\$VERSION)
  unpretoc
  call setAbbr($abr)
 }

=head2 Oracle Virtual Directory

Gathers the Oracle Virtual Directory executable list.

=cut

 if chk_area('OVD',$OVD_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_ovd_generic')
   run OVDr11()

  # Collect the Oracle Virtual Directory information
  call setAbbr(concat($abr,'_OVD'))
  pretoc '1++:Oracle Virtual Directory'
  call collect_ovd_generic($OVD_HOME)
  unpretoc
  call setAbbr($abr)
 }

=head2 Oracle Web Cache

Gathers the Oracle Web Cache file permissions and DTD files.

=cut

 if chk_area('WEBC',$WEBCACHE_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_webc_generic')
   run WEBCr11()

  # Collect the Web Cache information
  call setAbbr(concat($abr,'_WEBC'))
  pretoc '1++:Oracle Web Cache'
  call collect_webc_generic($WEBCACHE_HOME)
  unpretoc
  call setAbbr($abr)
 }

 # Restore module abbreviation
 call setAbbr($ABR)
}

=head1 INSTANCES COLLECTIONS

Performs the following collections on all specified instances:

=cut

# Collect the data for each instance
var $cnt = 0
loop $key (keys(%INSTANCES))
{# Skip when not requested
 call setCurrent($INSTANCES{$key})
 next !getFocus()
 call switchToc(last)
 call setAbbr($abr = concat($ABR,'_i',incr($cnt)))

 # Instance home initialisation
 var $ORACLE_HOME = getHome('.')

 var $APACHE_TOP      = catDir($ORACLE_HOME,'ohs')
 var $BI_HOME         = catDir($ORACLE_HOME,'bifoundation')
 var $DISCOVERER_HOME = catDir($ORACLE_HOME,'discoverer')
 var $FORMS_HOME      = catDir($ORACLE_HOME,'forms')
 var $LDAP_HOME       = catDir($ORACLE_HOME,'ldap')
 var $OVD_HOME        = catDir($ORACLE_HOME,'ovd')
 var $PORTAL_HOME     = catDir($ORACLE_HOME,'portal')
 var $REPORTS_HOME    = catDir($ORACLE_HOME,'reports')
 var $WEBCACHE_HOME   = catDir($ORACLE_HOME,'webcache')

 # Get the instance name and its associated components
 var $ins = basename($top = getInstance('.'))
 var ($dsc) = get_components(\%cmp,$top,$ins,'.')
 debug ' Inside IREQ module, analyzing instance ',$dsc

=head2 abbr - Abbreviations

Displays the RDA abbreviations defined for the instance home collection.

=cut

 report abbr
 prefix
 {write '---+ Oracle Instance Abbreviations'
  write '|*Abbreviation*|*Location*|'
 }
 var %hsh = getSymbols()
 loop $key (keys(%hsh))
  write '|',$key,' |',catDir(@{$hsh{$key}}),' |'
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][Abbreviations]]'

=head2 Oracle Business Intelligence Enterprise Edition

Gathers the Oracle Business Intelligence Enterprise Edition configuration and
log files. It includes a DMS dump along with its repositories.

=cut

 if chk_area('BI',$BI_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_bi_instance')
   run BIr11()

  # Get the Business Intelligence repositories
  var %rep
  call collect_bi_repo_list(\%rep)

  # Collect the Business Intelligence information
  pretoc '1+++:Oracle Business Intelligence Enterprise Edition'
  call collect_bi_instance($abr,$top,\%cmp,\%rep)
  unpretoc
 }

=head2 Oracle Discoverer

Gathers Oracle Discoverer configuration and log files.

Runs the F<checkdiscoverer> script.

=cut

 if chk_area('DSCV',$DISCOVERER_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_dscv_instance')
   run DSCVr11()

  # Collect the Discoverer information
  pretoc '1+++:Oracle Discoverer'
  call collect_dscv_instance($abr,$top,\%cmp)
  unpretoc
 }

=head2 Oracle Forms/Reports

Collects all startup scripts.

Collects the toolkit files (such as F<uiprint.txt>, F<uifont.ali>, and
F<Tk2Motif.rgb>).

Reports on versions used.

Gathers the Oracle Forms/Reports configuration and log files.

=cut

 if chk_area('DEV',$FORMS_HOME,$REPORTS_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_dev_instance')
   run DEVr11()

  # Collect the Developer information
  pretoc '1+++:Oracle Forms/Reports'
  call collect_dev_instance($abr,$top,\%cmp)
  call collect_forms_instance($abr,$top,\%cmp)
  call collect_reports_instance($abr,$top,\%cmp)
  unpretoc
 }

=head2 Oracle HTTP Server

Gathers the Oracle HTTP server configuration and log files. It includes a DMS
dump.

=cut

 if chk_area('HTTP')
 {# Load the library on first usage
  if !isImplemented('httpServer_getListenerConf')
   run IAS()

  # Collect the HTTP server information
  debug ' - Getting Oracle HTTP Server configuration and log files'
  pretoc '1+++:Oracle HTTP Server'
  loop $key (keys(%cmp))
  {var ($typ,$cmp) = split('\|',$key,2)
   next !match($typ,'^OHS$',true)
   var (%HTTPDCONF,%HTTPDERRLOG,%HTTPDREQLOG) = ()
   var ($fil) = (grepDir(catDir(\
     $top,'config',$typ,$cmp),'^httpd(s)?\.conf$','pf'))
   call setTempSetting('HTTPD_CONF_LOCATION',$fil)

   call setAbbr(concat($abr,'_c_',$cmp))
   pretoc "2:'",$cmp,"' OHS Component"

   # Collect the configuration files
   call httpServer_getListenerConf(true,$top,$typ,$cmp)
   pretoc '3:Configuration Files'
   loop $fil (keys(%HTTPDCONF))
   {var $nam = catSymbol($fil)
    report concat('lc_',$nam)
    prefix
     write '---+ Content Taken from File ',encode($nam)
    call writeFile($fil)
    if isCreated(true)
    {write $TOP
     toc '4:[[',getFile(),'][rda_report][',encode($nam),']]'
    }
   }
   unpretoc

   # Collect the log files
   call httpServer_getListenerLogs(true,$top,$typ,$cmp)
   pretoc '3:Log Files'
   loop $fil (keys(%HTTPDERRLOG),keys(%HTTPDREQLOG),\
              grepDir(catDir($top,'diagnostics','logs',$typ,$cmp),\
                      '^console.*?\.log$','ip'))
   {var $nam = catSymbol($fil)
    report concat('ll_',$nam)
    prefix
     write '---+ Last ',$TAIL,' Lines from File ',encode($nam)
    call writeTail($fil,$TAIL)
    if isCreated(true)
    {write $TOP
     toc '4:[[',getFile(),'][rda_report][',encode($nam),']]'
    }
   }
   call httpServer_getOdlLog(true,$top,$typ,$cmp)
   unpretoc

   # Collect the DMS dump
   if $cmp{$key}
   {report dms_metrics
    var ($opmnctl) = grepDir(catDir($top,'bin'),'^opmnctl(\.(bat|exe))?$','fip')
    var $cmd = concat(quote($opmnctl,'x'),' @instance:',$dsc,\
                      ' metric op=query PROCESS_UID=',$cmp{$key},\
                      ' dmsarg="format=raw&nountype=opmn_process" 2>&1')
    prefix
    {write '---+ Display of DMS Dump Metrics'
     write '---## Using: ',encode($cmd)
    }
    call writeCommand($cmd)
    if isCreated(true)
    {write $TOP
     toc '3:[[',getFile(),'][rda_report][DMS Dump]]'
    }
   }
   unpretoc
  }
  unpretoc
  call setAbbr($abr)
 }

=head2 Oracle Internet Directory

Displays the last lines of the monitor log.

Displays the last lines of the LDAP log.

Displays the last lines of the replication log.

Displays the contents of the files in the F<$INSTANCE_ROOT/OID/load> directory.

=cut

 if chk_area('OID',$LDAP_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_oid_instance')
   run OIDr11()

  # Collect the Oracle Internet Directory information
  pretoc '1+++:Oracle Internet Directory'
  call collect_oid_instance($abr,$top,\%cmp)
  unpretoc
 }

=head2 OPMN

Gathers the OPMN information using F<opmnctl>. It collects all C<*.conf>,
C<*.log>, and C<*.xml> files. It includes a DMS dump.

=cut

 # Collect the opmnctl information
 if chk_area('OPMN')
 {debug ' - Executing opmnctl'
  toc '1+++:OPMN'

  if $NOT_OWNER
  {report no_opmnctl
   write '---+ opmnctl'
   write $NOT_OWNER_STATEMENT
   toc '2:[[',getFile(),'][rda_report][opmnctl]]'
  }
  else
  {toc '2:opmnctl'
   var ($opmnctl) = grepDir(catDir($top,'bin'),'^opmnctl(\.(bat|exe))?$','fip')
   var $pgm = concat(quote($opmnctl,'x'),' @instance:',$dsc)

   report opmnctl_status
   write '---+ opmnctl status'
   var $cmd = concat($pgm,' status -l 2>&1')
   write '---## Using: ',encode($cmd)
   call writeCommand($cmd)
   write $TOP
   toc '3:[[',getFile(),'][rda_report][opmnctl status]]'

   report opmnctl_debug_pm
   write '---+ opmnctl debug comp=pn'
   var $cmd = concat($pgm,' debug comp=pm 2>&1')
   write '---## Using: ',encode($cmd)
   call writeCommand($cmd)
   write $TOP
   toc '3:[[',getFile(),'][rda_report][opmnctl debug comp=pn]]'

   report opmnctl_debug_ons
   write '---+ opmnctl debug comp=ons'
   var $cmd = concat($pgm,' debug comp=ons 2>&1')
   write '---## Using: ',encode($cmd)
   call writeCommand($cmd)
   write $TOP
   toc '3:[[',getFile(),'][rda_report][opmnctl debug comp=ons]]'
  }

  # Collect the configuration files
  debug ' - Getting OPMN config and log files'
  pretoc '2:Configuration Files'
  call sort_files(3,$TAIL,\
    grepDir(catDir($top,'config','OPMN'),'\.(conf$|properties$|xml)','dir'))
  unpretoc

  # Collect the log files
  pretoc '2:Log Files'
  call sort_files(3,$TAIL,\
    grepDir(catDir($top,'diagnostics','logs','OPMN'),'\.log$','dir'))
  unpretoc

  # Collect the DMS dump
  report opmn_metrics
  prefix
  {write '---+ Display of DMS Dump Metrics'
   write '---## Using: ',encode($cmd)
  }
  var $cmd = concat($pgm,' metric op=query PROCESS_UID=0 \
                           dmsarg="format=raw&nountype=opmn_process" 2>&1')
  call writeCommand($cmd)
  if isCreated(true)
  {write $TOP
   toc '2:[[',getFile(),'][rda_report][DMS Dump]]'
  }
 }

=head2 Portal Diagnostics

Provides a summary of the performance information logged by mod_plsql.

=cut

 if chk_area('PDA',$PORTAL_HOME)
 {# Load the library on first usage
  if !isImplemented('analyze_ohs_logs')
   run PDAr11()

  # Collect the Portal information
  pretoc '1+++:Portal Diagnostics'
  call analyze_ohs_logs($abr,$top,$OC4J_USED,$VERSION,\%cmp)
  unpretoc
 }

=head2 Oracle Virtual Directory

Collects the Oracle Virtual Directory-related configuration and log files.

=cut

 if chk_area('OVD',$OVD_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_ovd_instance')
   run OVDr11()

  # Collect the Oracle Virtual Directory information
  pretoc '1+++:Oracle Virtual Directory'
  call collect_ovd_instance($abr,$top,\%cmp)
  unpretoc
 }

=head2 Oracle Web Cache

Gathers the Oracle Web Cache configuration and log files. It includes a DMS
dump.

=cut

 if chk_area('WEBC',$WEBCACHE_HOME)
 {# Load the library on first usage
  if !isImplemented('collect_webc_instance')
   run WEBCr11()

  # Collect the Web Cache information
  pretoc '1+++:Oracle Web Cache'
  call collect_webc_instance($abr,$top,\%cmp)
  unpretoc
 }

 # Restore module abbreviation
 call setAbbr($ABR)
}

# Restore the default behavior
call switchToc()

=head2 HCVE

When requested, performs the preinstallation checks.

=cut

if and(getSetting('IREQ_HCVE_CHECKS'),\
       grepSetting('_REQ_(COMMON|HOME|INSTANCE)$','f'))
{debug ' Inside IREQ module, executing the preinstallation checks'
 if check(getOsName(),\
          'aix',            'A300FM1111_aix',\
          'hpux',           'A300FM1111_hp',\
          'linux',          'A300FM1111_lin',\
          'solaris',        'A300FM1111_sol',\
          cond(isCygwin(),  'A300FM1111_win',\
               isWindows(), 'A300FM1111_win'))
 {var $rul = last
  call setTempSetting('ORACLE_SID','-')
  test TSThcve($rul)
  call setTempSetting('ORACLE_SID')
 }
}

=head1 SEE ALSO

L<ASITlib.def|modules::ASITlib>,
L<DEVinfo.def|modules::DEVinfo>,
L<DEVlib.def|modules::DEVlib>,
L<DEVr11.def|modules::DEVr11>,
L<DSCVinfo.def|modules::DSCVinfo>,
L<DSCVr11.def|modules::DSCVr11>,
L<IAS.def|modules::IAS>,
L<OIDinfo.def|modules::OIDinfo>,
L<OIDr11.def|modules::OIDr11>,
L<OVDr11.def|modules::OVDr11>,
L<PDAinfo.def|modules::PDAinfo>,
L<PDAr11.def|modules::PDAr11>,
L<WEBCr11.def|modules::WEBCr11>,
L<WLSlib.def|modules::WLSlib>

=begin credits

=over 10

=item RDA 4.21: Eliane Papillon Le Noc, Hector Viveros.

=item RDA 4.24: Greg Cook, Andrew Salt.

=item RDA 4.26: Laurence De Sulzer Wart.

=item RDA 4.29: Adriana Dominguez.

=back

=end credits

=head1 COPYRIGHT NOTICE

Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.

=head1 TRADEMARK NOTICE

Oracle and Java are registered trademarks of Oracle and/or its
affiliates. Other names may be trademarks of their respective owners.

=cut
