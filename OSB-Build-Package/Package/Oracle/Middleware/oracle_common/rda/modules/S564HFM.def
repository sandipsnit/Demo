# S564HFM.def: Collects Oracle Hyperion Financial Management Information
# $Id: S564HFM.def,v 2.31 2012/08/29 16:36:52 mschenke Exp $
# ARCS: $Header: /home/cvs/cvs/RDA_4/src/scripting/lib/modules/S564HFM.def,v 2.31 2012/08/29 16:36:52 mschenke Exp $
#
# Change History
# 20120829  KRA  Add HFM events collection.

=head1 NAME

S564HFM - Collects Oracle Hyperion Financial Management Information

=head1 DESCRIPTION

This module collects information for Oracle Hyperion Financial Management. This
module is applicable for Microsoft Windows only.

The following reports can be generated and are regrouped under C<Hyperion
Financial Management>:

=cut

use Buffer
use Xml

echo tput('bold'),'Processing HFM module ...',tput('off')

# Initialization
var $EPM_HOME     = ${EPM_HOME:${ENV.EPM_ORACLE_HOME:${ENV.HYPERION_HOME:''}}}
var $HFM_REQUESTS = ${HFM_REQUESTS}
var $ORACLE_HOME  = getSetting('ORACLE_HOME','')
var $TAIL         = getSetting('RDA_TAIL',1000)
var $AGE          = getSetting('HFM_AGE',3)

var $TOC = '%TOC%'
var $TOP = '[[#Top][Back to top]]'

toc '1:Hyperion Financial Management'

# Validate the time settings
var $START_TIME = trim(getSetting('HFM_START_TIME',''),'-')
var $END_TIME = trim(getSetting('HFM_END_TIME',''),'-')
var $pat = '^([0-3]\d\-[A-Za-z]{3}\-[12]\d{3}_[0-2]\d:[0-5]\d)?$'
if !match($START_TIME,$pat)
{echo 'Start time format should be DD-Mon-YYYY_HH24:MI. Task audit and \
       HsvEventLog information information will be gathered for the last 14 \
       days.'
 var $START_TIME = ''
}
if !match($END_TIME,$pat)
{echo 'End time format should be DD-Mon-YYYY_HH24:MI. Task audit and \
       HsvEventLog information information will be gathered from ',\
       nvl($START_TIME,'last 14 days'),' to the current time'
 var $END_TIME = ''
}

# Load the common macros
run library()
run INSTinfo()

=head2 dbver - Generic Database Information

Collects generic information for Hyperion Financial Management from an Oracle
Database.

=cut

if getSetting('HFM_DB')
{run DBinfo()

 # Change the database context
 if getSetting('HFM_LOCAL')
 {var $sid = getSetting('ORACLE_SID')
  var $usr = getSetting('SQL_LOGIN')
 }
 elsif getSetting('HFM_SID')
 {var $sid = last
  var $usr = uc(getSetting('HFM_LOGIN','HFM'))

  # Determine the user password
  if compare('eq',$usr,'/')
   var ($usr,$pwd) = ('','')
  elsif hasSqlPassword($usr,$sid)
   var $pwd = undef
  else
   var $pwd = askPassword(concat('Enter ',$usr,'@',$sid,' user password:'))

  # Change the current user
  var $old = setSqlLogin($usr,$pwd,$sid)

  # If requested, change the database context
  if getSetting('HFM_SWITCH')
   var $env = setSqlSid($sid)
  else
   var $env = undef
  var $try = setSqlFailure(0)

 }
 else
 {# Disable the database access
  var $env = undef
  var $old = setSqlLogin('','')
  var $try = setSqlFailure(-1)
 }

 # Test the database connection and collect information
 debug ' Inside HFM module, getting generic information'
 report dbver
 write '---+!! Generic Database Information'
 toc '2:[[',getFile(),'][rda_report][Generic Database Information]]'

 if testSql()
 {echo ''
  echo tput('bold'),\
       'The database containing HFM repository is not accessible.',tput('off')
  if $msg = getSqlMessage()
   echo $msg
  echo ''

  write 'HFM repository not accessible (',$msg,')'
 }
 else
 {# Display Oracle version
  set $sql
  {SELECT '|' || v.banner || '|'
  " FROM v$version v;
  }
  prefix
  {write '---+ Oracle Database Versions from V$Version'
   write '|*Banner*|'
  }
  call writeSql($sql)

=head2 errorcount - Error Count

Collect the error count for  Hyperion Financial Management from an Oracle
Database.

=cut

  debug ' Inside HFM module, collecting error count'
  report errorcount
  set $sql
  {PROMPT ___Capture_err___
  "SELECT '|HFM_ErrorLog | ' ||
  "        COUNT(1) || '|'
  " FROM hfm_errorlog;
  "PROMPT ___End_Capture___
  }
  prefix
  {write '---+ Error Count'
   write '|*Table Name*| *Count*|'
  }
  call writeSql($sql)
  if isCreated(true)
   toc '2:[[',getFile(),'][rda_report][Error Count]]'

=head2 taskaudit - Task Audit Information

Collects task audit information for Hyperion Financial Management from an
Oracle Database.

=cut

  debug ' Inside HFM module, collecting task audit information'
  report taskaudit

  # Detect the version to transform module name
  if or(testFile('f',catFile(\
                       catDir($EPM_HOME,'common','config','9.5.0.0'),\
                       'epmsys_registry.bat')),\
        $HFM_REQUESTS)
  {var $sub = "DECODE(TO_NUMBER(SUBSTR(strmodulename,\
               INSTR(strmodulename,'#',-1) + 1,LENGTH(strmodulename))),\
               0,'ADMINISTRATION',\
               1,'CELL_HISTORY',\
               2,'CLOSE_APPLICATION',\
               3,'CONSOLIDATION',\
               4,'CREATE_APPLICATION',\
               5,'DATABASE_MANAGEMENT',\
               6,'DATA_AUDIT',\
               7,'DATA_ENTRY_FORMS',\
               8,'DELETE_APPLICATION',\
               9,'DOCUMENT_EXTRACT',\
               10,'DOCUMENTS',\
               11,'EDIT_INTERCOMPANY_TRANSACTION',\
               12,'EMPTY_WORKSPACE',\
               13,'ERROR',\
               14,'EXPLORE_DATA',\
               15,'EXTENDED_ANALYTICS',\
               16,'EXTRACT_DATA',\
               17,'EXTRACT_JOURNALS',\
               18,'EXTRACT_MEMBERLISTS',\
               19,'EXTRACT_METADATA',\
               20,'EXTRACT_RULES',\
               21,'EXTRACT_SECURITY',\
               22,'EXTRACT_TRANSACTIONS',\
               23,'FAVORITES',\
               24,'HAL',\
               25,'HFM',\
               26,'HOME',\
               27,'ICTRANS_MATCHING_REPORT_BY_ACCOUNT',\
               28,'ICTRANS_MATCHING_REPORT_BY_TRANSACTION_ID',\
               29,'IC_TRANSACTIONS',\
               30,'JOURNALS',\
               31,'LINK',\
               32,'LOAD_DATA',\
               33,'LOAD_JOURNALS',\
               34,'LOAD_MEMBERLISTS',\
               35,'LOAD_METADATA',\
               36,'LOAD_RULES',\
               37,'LOAD_SECURITY',\
               38,'LOAD_TRANSACTIONS',\
               39,'LOCK_AND_UNLOCK_ENTITIES',\
               40,'LOGOFF',\
               41,'LOGON',\
               42,'MANAGE_GROUPS',\
               43,'MANAGE_IC_REASON_CODES',\
               44,'MANAGE_PERIODS',\
               45,'MANAGE_SERVERS_AND_APPLICATIONS',\
               46,'MEMBER_SELECTOR',\
               47,'MONITOR_INTERCOMPANY_TRANSACTIONS',\
               48,'NEW_INTERCOMPANY_TRANSACTION',\
               49,'OFFICE_ADDIN',\
               50,'OWNERSHIP_MANAGEMENT',\
               51,'PREFERENCES',\
               52,'PROCESS_CONTROL_PANEL',\
               53,'PROCESS_INTERCOMPANY_TRANSACTIONS',\
               54,'PROCESS_MANAGEMENT',\
               55,'REGISTER_APPLICATION',\
               56,'REGISTER_SMARTVIEW_PROVIDER',\
               57,'RELATED_CONTENT',\
               58,'REPORTS',\
               59,'RUNNING_TASKS',\
               60,'SCAN_ICTRANSACTIONS',\
               61,'SELECT_APPLICATION',\
               62,'SELECT_CLUSTER',\
               63,'SYSTEM_MESSAGES',\
               64,'SYSTEM_MESSAGE_DETAILS',\
               65,'TASK_AUDIT',\
               66,'TASK_AUTOMATION',\
               67,'UNKNOWN',\
               68,'USERS_ON_SYSTEM',\
               69,'WEB_DATA_ENTRY_FORM_BUILDER',\
               70,'WORKSPACE',\
               71,'WORKSPACE_PREFERENCES',\
               72,'MANAGE_EPU',\
               73,'LCM',\
               74,'MANAGE_TASKFLOWS',\
               75,'VIEW_TASKFLOW_STATUS',\
               76,'LOAD_REGIONS',\
               77,'EXTRACT_REGIONS',\
               78,'IMPORT_FROM_EXCEL',\
               79,'NEW_FOLDER',\
               80,'LOAD_DOCUMENTS',\
               81,'SAVE_DOCUMENTS',\
               82,'AUTO_MATCH',\
               83,'UNMATCH_TRANSACTION',\
               84,'ICT_FILTER',\
               85,'SAVE_REPORT_LOCAL',\
               86,'ICT_REPORT',\
               87,'MANAGE_IC_PERIODS',\
               88,'PROCESS_JOURNALS',\
               89,'MANAGE_JOURNAL_TEMPLATES',\
               90,'JOURNAL_FILTERS',\
               91,'EDIT_JOURNAL_PAGE',\
               92,'EDIT_TEMPLATE_PAGE',\
               93,'JOURNALS_CREATE_NEW_JOURNAL',\
               94,'LOAD_LOCAL_REPORT',\
               95,'JOURNAL_REPORT',\
               96,'SUBMISSION_PHASE',\
               strmodulename)"
  }
  else
  {var $sub = "DECODE(TO_NUMBER(SUBSTR(strmodulename,\
               INSTR(strmodulename,'#',-1) + 1,LENGTH(strmodulename))),\
               0,'ADMINISTRATION',\
               1,'CELL_HISTORY',\
               2,'CLOSE_APPLICATION',\
               3,'CONSOLIDATION',\
               4,'CREATE_APPLICATION',\
               5,'DATABASE_MANAGEMENT',\
               6,'DATA_AUDIT',\
               7,'DATA_ENTRY_FORMS',\
               8,'DELETE_APPLICATION',\
               9,'DOCUMENT_EXTRACT',\
               10,'DOCUMENTS',\
               11,'EDIT_INTERCOMPANY_TRANSACTION',\
               12,'EMPTY_WORKSPACE',\
               13,'ERROR',\
               14,'EXPLORE_DATA',\
               15,'EXTENDED_ANALYTICS',\
               16,'EXTRACT_DATA',\
               17,'EXTRACT_JOURNALS',\
               18,'EXTRACT_MEMBERLISTS',\
               19,'EXTRACT_METADATA',\
               20,'EXTRACT_RULES',\
               21,'EXTRACT_SECURITY',\
               22,'EXTRACT_TRANSACTIONS',\
               23,'FAVORITES',\
               24,'HAL',\
               25,'HFM',\
               26,'HOME',\
               27,'ICTRANS_MATCHING_REPORT_BY_ACCOUNT',\
               28,'ICTRANS_MATCHING_REPORT_BY_TRANSACTION_ID',\
               29,'IC_TRANSACTIONS',\
               30,'JOURNALS',\
               31,'LINK',\
               32,'LOAD_DATA',\
               33,'LOAD_JOURNALS',\
               34,'LOAD_MEMBERLISTS',\
               35,'LOAD_METADATA',\
               36,'LOAD_RULES',\
               37,'LOAD_SECURITY',\
               38,'LOAD_TRANSACTIONS',\
               39,'LOCK_AND_UNLOCK_ENTITIES',\
               40,'LOGOFF',\
               41,'LOGON',\
               42,'MANAGE_GROUPS',\
               43,'MANAGE_IC_REASON_CODES',\
               44,'MANAGE_PERIODS',\
               45,'MANAGE_SERVERS_AND_APPLICATIONS',\
               46,'MEMBER_SELECTOR',\
               47,'MONITOR_INTERCOMPANY_TRANSACTIONS',\
               48,'NEW_INTERCOMPANY_TRANSACTION',\
               49,'OFFICE_ADDIN',\
               50,'OWNERSHIP_MANAGEMENT',\
               51,'PREFERENCES',\
               52,'PROCESS_CONTROL_PANEL',\
               53,'PROCESS_INTERCOMPANY_TRANSACTIONS',\
               54,'PROCESS_MANAGEMENT',\
               55,'REGISTER_APPLICATION',\
               56,'REGISTER_SMARTVIEW_PROVIDER',\
               57,'RELATED_CONTENT',\
               58,'REPORTS',\
               59,'RUNNING_TASKS',\
               60,'SCAN_ICTRANSACTIONS',\
               61,'SELECT_APPLICATION',\
               62,'SELECT_CLUSTER',\
               63,'SYSTEM_MESSAGES',\
               64,'SYSTEM_MESSAGE_DETAILS',\
               65,'TASK_AUDIT',\
               66,'TASK_AUTOMATION',\
               67,'UNKNOWN',\
               68,'USERS_ON_SYSTEM',\
               69,'WEB_DATA_ENTRY_FORM_BUILDER',\
               70,'WORKSPACE',\
               71,'WORKSPACE_PREFERENCES',\
               72,'MANAGE_EPU',\
               strmodulename)"
  }

  # Collct the audit information
  set $job
  {SELECT 'tab=' || appname
  " FROM hsx_datasources;
  }
  var ($cnt,$sql,@TTL,@TXT,@HDR) = (0)
  var $TTL = '---+!! Task Audit Information'
  loop $lin (grepSql($job,'^tab='))
  {var $tbl = concat(value($lin),'_task_audit')
   call push(@app,value($lin))
   call setSqlColumns('RDA','strmodulename',$sub)
   call setSqlColumns('RDA','starttime',"TO_CHAR(TO_DATE('01-JAN-1900',\
                      'DD-MON-YYYY') + starttime - 2,'DD-Mon-YYYY HH24:MI:SS')")
   call setSqlColumns('RDA','endtime',"TO_CHAR(TO_DATE('01-JAN-1900',\
                      'DD-MON-YYYY') + endtime - 2,'DD-Mon-YYYY HH24:MI:SS')")
   call setSqlHeader('RDA','strmodulename','*Module Name*')
   var ($hdr,$col) = getSqlColumns('RDA','',$tbl)
   if $col
   {incr $cnt
    var $TTL[$cnt] = concat('---+ Task Audit Information from ',$tbl)
    var $HDR[$cnt] = $hdr
    set $str
    {PROMPT ___Macro_separator(:1)___
    "SELECT :2
    " FROM :3
    " WHERE TO_DATE('01-JAN-1900','DD-MON-YYYY') + starttime - 2 >= :4
    "   AND TO_DATE('01-JAN-1900','DD-MON-YYYY') + starttime - 2 <= :5;
    }
    if $START_TIME
    {var $beg = concat("TO_DATE('",$START_TIME,"','DD-Mon-YYYY_HH24:MI')")
     if $END_TIME
     {var $end = concat("TO_DATE('",$END_TIME,"','DD-Mon-YYYY_HH24:MI')")
      var $txt = concat('   * Start time: ``',$START_TIME,\
                  "``\012   * End time: ``",$END_TIME,'``')
     }
     else
     {var $end = 'SYSDATE'
      var $txt = concat('   * Start time: ``',$START_TIME,\
                  "``\012   * End time: Current time")
     }
    }
    else
    {var $beg = 'SYSDATE - 14'
     var $end = 'SYSDATE'
     var $txt = '   * From last day'
    }
    var $sql = join("\012",$sql,bindSql($str,$cnt,$col,$tbl,$beg,$end))
    var $TXT[$cnt] = $txt
   }
   call clearSqlColumns('RDA')
  }
  call separator(1)
  call writeSql($sql)
  call separator(0,'Task Audit Information')

=head2 metadata - Metadata Statistics

Collects metadata statistics information for Hyperion Financial Management from
an Oracle Database.

=cut

  debug ' Inside HFM module, collecting metadata statistics'
  report metadata
  var ($cnt,$grp,$sql,@GRP,@HDR,@TTL,@TXT,%GRP) = (0,0)
  var $TTL = '---+!! Metadata Statistics'
  code write_header
  {var ($sep) = last
   return join("\012",delete($GRP{$GRP[$sep]}),$ttl[$sep])
  }
  loop $app (@app)
  {var $GRP{incr($grp)} = concat('---+ Metadata Statistics for ',$app)
   var $ttl[incr($cnt)] = '---++ Number of Rows in Tables'
   var $GRP[$cnt] = $grp
   var $TTL[$cnt] = &write_header(eval:$cnt)
   var $HDR[$cnt] = '|*Table Name*| *Count*|'
   set $str
   {PROMPT ___Macro_separator(:1)___
   }
   var $sql = join("\012",$sql,bindSql($str,$cnt))
   loop $typ ('_ACCOUNT_ITEM','_CURRENCIES','_CUSTOM1_ITEM','_CUSTOM2_ITEM',\
              '_CUSTOM3_ITEM','_CUSTOM4_ITEM','_ENTITY_ITEM','_ICP_ITEM',\
              '_SCENARIO_ITEM')
   {var $tbl = concat($app,$typ)
    if getSqlColumns('RDA','',$tbl)
    {set $str
     {SELECT '|' ||
     "       ':1' || ' | ' ||
     "       COUNT(1) || '|'
     " FROM :1;
     }
     var $sql = join("\012",$sql,bindSql($str,$tbl))
    }
    call clearSqlColumns('RDA')
   }

   # Get children counts
   loop $dim ('ACCOUNT','CUSTOM1','CUSTOM2','CUSTOM3','CUSTOM4','ENTITY',\
              'SCENARIO')
   {var $tbl = concat($app,'_',$dim)
    var $ttl[incr($cnt)] = concat(\
             '---++ Number of Children for a Given Parent for ',$tbl)
    var $GRP[$cnt] = $grp
    var $TTL[$cnt] = &write_header(eval:$cnt)
    var $HDR[$cnt] = '|*Application*|*Dimension*| *Parent ID*|*Parent Label*| \
                       *Children*|'
    var $lay = concat($tbl,'_layout')
    var $itm = concat($tbl,'_item')
    if getSqlColumns('RDA','',$lay)
    {set $str
     {PROMPT ___Macro_separator(:1)___
     "PROMPT ___Capture_dim___
     "SELECT '|' ||
     "       ':2' || ' |' ||
     "       ':3' || ' | ' ||
     "       parentid || '|' ||
     "       label || ' | ' ||
     "       kount || '|'
     " FROM (SELECT p.parentid parentid,
     "              COUNT(c.parentid) kount
     "        FROM :4 p, :4 c
     "        WHERE c.itemid(+) = p.parentid
     "        GROUP BY p.parentid) a,
     "       :5 b
     " WHERE a.parentid = b.itemid(+);
     "PROMPT ___End_Capture___
     }
     var $sql = join("\012",$sql,bindSql($str,$cnt,$app,$dim,$lay,$itm))
    }
    call clearSqlColumns('RDA')
   }
  }
  call writeSql($sql)
  call separator(0,'Metadata Statistics')

=head2 calcrules - CalcRules Information

Collects C<CalcRules> information for Hyperion Financial Management from an
Oracle Database.

=cut

  debug ' Inside HFM module, collecting CalcRules information'
  report calcrules
  var ($cnt,$sql,@HDR,@TTL,@TXT) = (0)
  var $TTL = '---+!! CalcRules Information'
  loop $app (@app)
  {var $tbl = concat($app,'_BINARYFILES')
   if getSqlColumns('RDA','',$tbl)
   {var $TTL[incr($cnt)] = concat('---+ CalcRules Information from ',$tbl)
    set $str
    {PROMPT ___Macro_separator(:1)___
    "SELECT REPLACE(UTL_RAW.CAST_TO_VARCHAR2(binaryfile),CHR(10),'%BR%')
    " FROM :2
    " WHERE label = 'CalcRules'
    " ORDER BY entryidx;
    }
    var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
   }
   call clearSqlColumns('RDA')
  }
  call writeSql($sql)
  call separator(0,'CalcRules Information')

=head2 memberlistrules - MemberListRules Information

Collects C<MemberListRules> information for Hyperion Financial Management from
an Oracle Database.

=cut

  debug ' Inside HFM module, collecting memberlistrules information'
  report memberlistrules
  var ($cnt,$sql,@HDR,@TTL,@TXT) = (0)
  var $TTL = '---+!! MemberListRules Information'
  loop $app (@app)
  {var $tbl = concat($app,'_BINARYFILES')
   if getSqlColumns('RDA','',$tbl)
   {var $TTL[incr($cnt)] = concat('---+ MemberListRules Information from ',$tbl)
    set $str
    {PROMPT ___Macro_separator(:1)___
    "SELECT REPLACE(UTL_RAW.CAST_TO_VARCHAR2(binaryfile),CHR(10),'%BR%')
    " FROM :2
    " WHERE label = 'MemberListRules'
    " ORDER BY entryidx;
    }
    var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
   }
   call clearSqlColumns('RDA')
  }
  call writeSql($sql)
  call separator(0,'MemberListRules Information')

=head2 currency - Currency Information

Collects C<currency> information for Hyperion Financial Management from
an Oracle Database.

=cut

  debug ' Inside HFM module, collecting currency information'
  report currency
  var ($cnt,$grp,$sql,@GRP,@HDR,@TTL,@TXT,%GRP) = (0,0)
  var $TTL = '---+!! Currency Information'
  loop $app (@app)
  {var $GRP{incr($grp)} = concat('---+ Currency Information for ',$app)
   loop $tab ('_CURRENCIES','_CURRENCIES_DESC','_CURRENCIES_HEADER')
   {var $tbl = concat($app,$tab)
    var ($hdr,$col) = getSqlColumns('RDA','',$tbl)
    if $col
    {var $ttl[incr($cnt)] = concat('---++ Information from ',$tbl)
     var $GRP[$cnt] = $grp
     var $TTL[$cnt] = &write_header(eval:$cnt)
     var $HDR[$cnt] = $hdr
     set $str
     {PROMPT ___Macro_separator(:1)___
     "SELECT :2
     " FROM :3;
     }
     var $sql = join("\012",$sql,bindSql($str,$cnt,$col,$tbl))
    }
    call clearSqlColumns('RDA')
   }
  }
  call writeSql($sql)
  call separator(0,'Currency Information')

=head2 dataanalysis - Data Analysis

When requested, performs a data analysis for a specific application.

=cut

  if getSetting('HFM_ANALYZE')
  {var $APPNAME    = getSetting('HFM_APPNAME')
   var $START_YEAR = getSetting('HFM_START_YEAR')
   var $END_YEAR   = getSetting('HFM_END_YEAR')

   if !grep(@app,concat('^',quote($APPNAME),'$'),'if')
   {echo 'Application name is not found in the list of applications.'
    echo 'The data analysis is skipped'
   }
   elsif or(not(match($START_YEAR,'^[1-2]\d{3}$')),\
            not(match($END_YEAR,  '^[1-2]\d{3}$')))
   {echo 'Year is not in a four-digit format.'
    echo 'The data analysis is skipped'
   }
   elsif expr('<',$END_YEAR,$START_YEAR)
   {echo 'End year should be greater than start year.'
    echo 'The data analysis is skipped'
   }
   else
   {# Perform the data analysis
    report dataanalysis
    var ($sql,@HDR,@TTL,@TXT) = ()
    var $TTL = concat('---+!! Data Analysis for ',$APPNAME)
    var $TTL[1] = '---++ Number of rows in tables'
    var $HDR[1] = '|*Table Name*| *Count*|'
    set $sql
    {PROMPT ___Capture_aud___
    }
    loop $typ ('_DATA_AUDIT','_TASK_AUDIT','_PFLOW','_ICT_PERIODS',\
               '_ICT_REASONCODES','_ICT_TRANSACTIONS','_ICT_VERSION')
    {var $tbl = concat($APPNAME,$typ)
     if getSqlColumns('RDA','',$tbl)
     {set $str
      {SELECT '| ' ||
      "       ':1' || '| ' ||
      "       COUNT(1) || '|'
      " FROM :1;
      }
      var $sql = join("\012",$sql,bindSql($str,$tbl))
     }
     call clearSqlColumns('RDA')
    }
    append $sql
    {PROMPT ___End_Capture___
    }

    # Analyze table content per item and next per year
    var $tbl = concat($APPNAME,'_SCENARIO_ITEM')
    set $job
    {SELECT 'itm=' || itemid
    " FROM :1;
    }
    var @itm
    loop $lin (grepSql(bindSql($job,$tbl),'^itm='))
    {call push(@itm,$itm = value($lin))
     for $yea ($START_YEAR,$END_YEAR)
     {loop $typ ('_RTD_','_RTS_','_PFLOW_','_CSE_','_CSN_','_DCT_','_ETX_',\
                 '_LID_','_TXT_','_TXTITEM_')
      {var $tbl = concat($APPNAME,$typ,$itm,'_',$yea)
       if getSqlColumns('RDA','',$tbl)
       {set $str
        {SELECT '| ' ||
        "       ':1' || '| ' ||
        "       COUNT(1) || '|'
        " FROM :1;
        }
        var $sql = join("\012",$sql,bindSql($str,$tbl))
       }
       call clearSqlColumns('RDA')
      }
     }
    }

    # Analyze data structure per item and next per year
    var $cnt = 2
    loop $itm (@itm)
    {for $yea ($START_YEAR,$END_YEAR)
     {# Analyze DCE table
      incr $cnt
      var $tbl = concat($APPNAME,'_dce_',$itm,'_',$yea)
      var $TTL[$cnt] = concat('---++ Data from ',$tbl)
      var $HDR[$cnt] = '|*Table Name*|*Entity*|*Value*| *Count*|'
      if getSqlColumns('RDA','',$tbl)
      {set $str
       {PROMPT ___Capture_dce___
       "PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |' ||
       "       lentity || ' |' ||
       "       lvalue || ' | ' ||
       "       COUNT(1) || '|'
       " FROM :2
       " GROUP BY lentity, lvalue;
       "PROMPT ___End_Capture___
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
       incr $cnt
       var $TTL[$cnt] = '---+++ Number of Groups'
       var $HDR[$cnt] = '|*Table Name*|*Group By*| *Number of Group Records*|'
       set $str
       {PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |Entity, Value | ' ||
       "       COUNT(1) || '|'
       " FROM (SELECT lentity, lvalue
       "        FROM :2
       "        GROUP BY lentity, lvalue)
       " HAVING COUNT(1) > 0;
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
      }
      call clearSqlColumns('RDA')

      # Analyze DCN table
      incr $cnt
      var $tbl = concat($APPNAME,'_dcn_',$itm,'_',$yea)
      var $TTL[$cnt] = concat('---++ Data from ',$tbl)
      var $HDR[$cnt] = '|*Table Name*|*Entity*|*Parent*|*Value*| *Count*|'
      if getSqlColumns('RDA','',$tbl)
      {set $str
       {PROMPT ___Capture_dcn___
       "PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |' ||
       "       lentity || ' |' ||
       "       lparent || ' |' ||
       "       lvalue || ' | ' ||
       "       COUNT(1) || '|'
       " FROM :2
       " GROUP BY lentity, lparent, lvalue;
       "PROMPT ___End_Capture___
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
       incr $cnt
       var $TTL[$cnt] = '---+++ Number of Groups'
       var $HDR[$cnt] = '|*Table Name*|*Group By*| *Number of Group Records*|'
       set $str
       {PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |Entity,Parent,Value | ' ||
       "       COUNT(1) || '|'
       " FROM (SELECT lentity, lparent, lvalue
       "        FROM :2
       "        GROUP BY lentity, lparent, lvalue)
       " HAVING COUNT(1) > 0;
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
      }
      call clearSqlColumns('RDA')

      # Analyze CSE table
      incr $cnt
      var $tbl = concat($APPNAME,'_cse_',$itm,'_',$yea)
      var $TTL[$cnt] = concat('---++ Data from ',$tbl)
      var $HDR[$cnt] = '|*Table Name*|*Entity*| *Count*|'
      if getSqlColumns('RDA','',$tbl)
      {set $str
       {PROMPT ___Capture_cse___
       "PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |' ||
       "       lentity || ' |' ||
       "       COUNT(1) || '|'
       " FROM :2
       " GROUP BY lentity;
       "PROMPT ___End_Capture___
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
       incr $cnt
       var $TTL[$cnt] = '---+++ Number of Groups'
       var $HDR[$cnt] = '|*Table Name*|*Group By*| *Number of Group Records*|'
       set $str
       {PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |Entity | ' ||
       "       COUNT(1) || '|'
       " FROM (SELECT lentity
       "        FROM :2
       "        GROUP BY lentity)
       " HAVING COUNT(1) > 0;
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
      }
      call clearSqlColumns('RDA')
      incr $cnt

      # Analyze CSN table
      incr $cnt
      var $tbl = concat($APPNAME,'_csn_',$itm,'_',$yea)
      var $TTL[$cnt] = concat('---++ Data from ',$tbl)
      var $HDR[$cnt] = '|*Table Name*|*Entity*|*Parent*| *Count*|'
      if getSqlColumns('RDA','',$tbl)
      {set $str
       {PROMPT ___Capture_csn___
       "PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |' ||
       "       lentity || ' |' ||
       "       lparent || ' |' ||
       "       COUNT(1) || '|'
       " FROM :2
       " GROUP BY lentity, lparent;
       "PROMPT ___End_Capture___
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
       incr $cnt
       var $TTL[$cnt] = '---+++ Number of Groups'
       var $HDR[$cnt] = '|*Table Name*|*Group By*| *Number of Group Records*|'
       set $str
       {PROMPT ___Macro_separator(:1)___
       "SELECT '|' ||
       "       ':2' || ' |Entity, Parent | ' ||
       "       COUNT(1) || '|'
       " FROM (SELECT lentity, lparent
       "        FROM :2
       "        GROUP BY lentity, lparent)
       " HAVING COUNT(1) > 0;
       }
       var $sql = join("\012",$sql,bindSql($str,$cnt,$tbl))
      }
      call clearSqlColumns('RDA')
     }
    }
    call separator(1)
    call writeSql($sql)
    call separator(0,'Data Analysis')
    }
   }

=head2 validate - Validation

Collects validation information for the following conditions:

=over 3

=item o C<HFM_ErrorLog> table has more than 200000 records.

=item o C<ENTITY> dimension has more than 500 child records.

=item o C<ACCOUNT> dimension has more than 1000 child records.

=item o C<DATA_AUDIT> and C<TASK_AUDIT> tables have more than 200000 records.

=item o C<DCE> tables have more than 100000 group records.

=item o C<DCN> tables have more than 100000 group records.

=item o C<CSE> tables have more than 100000 group records.

=item o C<CSN> tables have more than 100000 group records.

=back

=cut

  report validate
  title '---+!! Validation Information'
  title $TOC

  if grepSqlBuffer('err','HFM_ErrorLog')
  {prefix
   {write '---++ Error Count Validation'
    write '   * Reports when the HFM_ErrorLog table has more than 200000 \
                records'
    write '|*Table Name*| *Count*|'
   }
   var ($lin) = (last)
   var $cnt = field('\|',2,$lin)
   if expr('>=',$cnt,200000)
    write $lin
   if hasOutput(true)
    write $TOP
  }
  call clearSqlBuffer('err')

  prefix
  {write '---++ Dimension Count Validation'
   write '   * Reports the application and dimension details when'
   write '      * ENTITY dimension has more than 500 child records'
   write '      * ACCOUNT dimension has more than 1000 child records'
   write '|*Application*|*Dimension*| *Parent ID*|*Parent Label*| *Children*|'
  }
  loop $lin (grepSqlBuffer('dim','ACCOUNT|ENTITY'))
  {var $dim = trim(field('\|',2,$lin))
   if compare('eq',$dim,'ACCOUNT')
    var $val = 1000
   elsif compare('eq',$dim,'ENTITY')
    var $val = 500
   else
    next
   var $cnt = field('\|',5,$lin)
   if expr('>=',$cnt,$val)
    write $lin
  }
  if hasOutput(true)
   write $TOP
  call clearSqlBuffer('dim')

  prefix
  {write '---++ Audit Table Count Validation'
   write '   * Reports when the DATA_AUDIT and TASK_AUDIT tables have more \
               than 200000 records'
   write '|*Table Name*| *Count*|'
  }
  loop $lin (grepSqlBuffer('aud','_(DATA|TASK)_AUDIT'))
  {var $tbl = field('\|',1,$lin)
   if match($tbl,'_(DATA|TASK)_AUDIT$')
   {var $cnt = field('\|',2,$lin)
    if expr('>=',$cnt,200000)
     write $lin
   }
  }

  prefix
  {write '---++ DCE Tables'
   write '   * Reports when the DCE tables have more than 100000 group records'
   write '|*Table Name*|*Entity*|*Value*| *Count*|'
  }
  loop $lin (grepSqlBuffer('dce','\|'))
  {var $cnt = field('\|',4,$lin)
   if expr('>=',$cnt,100000)
    write $lin
  }
  if hasOutput(true)
   write $TOP
  call clearSqlBuffer('dce')

  prefix
  {write '---++ DCN Tables'
   write '   * Reports when the DCN tables have more than 100000 group records'
   write '|*Table Name*|*Entity*|*Parent*|*Value*| *Count*|'
  }
  loop $lin (grepSqlBuffer('dcn','\|'))
  {var $cnt = field('\|',5,$lin)
   if expr('>=',$cnt,100000)
    write $lin
  }
  if hasOutput(true)
   write $TOP
  call clearSqlBuffer('dcn')

  prefix
  {write '---++ CSE Tables'
   write '   * Reports when the CSE tables have more than 100000 group records'
   write '|*Table Name*|*Entity*| *Count*|'
  }
  loop $lin (grepSqlBuffer('cse','\|'))
  {var $cnt = field('\|',3,$lin)
   if expr('>=',$cnt,100000)
    write $lin
  }
  if hasOutput(true)
   write $TOP
  call clearSqlBuffer('cse')

  prefix
  {write '---++ CSN Tables'
   write '   * Reports when the CSN tables have more than 100000 group records'
   write '|*Table Name*|*Entity*|*Parent*| *Count*|'
  }
  loop $lin (grepSqlBuffer('csn','\|'))
  {var $cnt = field('\|',4,$lin)
   if expr('>=',$cnt,100000)
    write $lin
  }
  if hasOutput(true)
   write $TOP
  call clearSqlBuffer('csn')

  if isCreated(true)
   toc '2:[[',getFile(),'][rda_report][Validation]]'
 }

 # Restore the previous database context
 if defined($env)
  call setSqlSid($env)
 call setSqlLogin($old)
 call setSqlFailure($try)
}

=head2 registry - Registry Information

Collects Windows registry information.

=cut

debug ' Inside HFM module, gathering registry information'
report registry
title '---+!! Registry Information'
title $TOC
prefix
 write '---+ Remote Procedure Call (RPC) Registry Information'
call writeRegistry('HKLM\SOFTWARE\Policies\Microsoft\Windows NT\Rpc')
if hasOutput(true)
 write $TOP
prefix
 write '---+ TCP/IP Registry Information'
call writeRegistry('HKLM\SYSTEM\currentcontrolset\services\tcpip\Parameters')
if hasOutput(true)
 write $TOP
prefix
 write '---+ Data Access Registry Information'
call writeRegistry('HKLM\SOFTWARE\Microsoft\DataAccess')
if hasOutput(true)
 write $TOP
if isCreated()
 toc '2:[[',getFile(),'][rda_report][Registry Information]]'

=head2 eventx - HFM Events

Extracts Hyperion Financial Management events from the application event log
using the F<wevtutil> command. (Only available for Windows Vista,
Windows Server 2008, and Windows 7)

=cut

debug ' Inside HFM module, gathering event log information'
var $osv = getRegValue('HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion',\
                       'CurrentVersion')
if compare('valid',$osv,'6')
{if findCommand('wevtutil')
 {var $evt = last
  var $msc = expr('*',$AGE,86400000)
  var $tmp = getTemp('dat')
  call command(concat($evt,' qe Application ',\
        '"/q:*[System[TimeCreated[timediff(@SystemTime) <= ',$msc,\
        ']]]" /f:xml > ',quote($tmp,'x')))
  code write_data
  {loop $lin (parseBuffer())
    write replace(replace($lin,'&lt;','<',true),'&gt;','>',true)
  }
  report eventx
   write '---+!! Hyperion Financial Management Events'
  prefix
   call beginBlock(true)
  if createBuffer('EVT','R',$tmp)
  {call parseReset()
   call parseBegin('TOP','^<Event.*<System>\
      <Provider Name=.*?(HFMWebServiceManager|\
                         Hyperion Financial Management|\
                         Hyperion S9 Financial Management Service|\
                         HyS9FinancialManagementWebSvcs).*/>','Event')
   call parseEnd('Event','.*</Event>$')
   call parseInfo('Event','buf',-1)
   call parseInfo('Event','end',&write_data)
   call parseInfo('Event','llp',false)
   call parse('EVT')
   call deleteBuffer('EVT')
  }
  if hasOutput(true)
   call endBlock(['C','wevtutil qe Application | grep -i \
     HFMWebServiceManager|\
     Hyperion Financial Management|\
     Hyperion S9 Financial Management Service|\
     HyS9FinancialManagementWebSvcs'])
  else
   write '**No Hyperion Financial Management events found.**%BR%'
  toc '2:[[',getFile(),'][rda_report][HFM Events]]'
  call unlinkTemp('dat')
 }
}

=head2 events - HFM Events

Extracts Hyperion Financial Management events from the application event log.
(Only available for Windows NT, Windows 2000, Windows XP, and Windows 2003)

=cut

else
{# Get the event file
 var $fil = replaceEnv(\
   getRegValue('HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application',\
               'File'))

 # If the file is not readable try to copy to a temporary file
 var $flg = false
 if testFile('r',$fil)
  var $evt = $fil
 else
 {if testFile('f',$cmd = getGroupFile('D_CWD','cmd.exe'))
  {var $cmd = quote($cmd,'x')
   if grepCommand(concat($cmd,' /c if exist mode.com echo 32to64'),'^32to64')
   {var $flg = true
    var $evt = getTemp('evt','.evt')
    call system(concat($cmd,' /c copy ',\
                       quote($fil,'x'),' ',\
                       quote($evt,'x'),' >NUL 2>NUL'))
   }
  }
 }

 # Extract the Hyperion Financial Management events
 if testFile('r',$evt)
 {report events
  write '---+ Application Events'
  if !writeEvents($evt,'(HFMWebServiceManager|\
                         Hyperion Financial Management|\
                         Hyperion S9 Financial Management Service|\
                         HyS9FinancialManagementWebSvcs)',$AGE)
   write '**No Hyperion Financial Management events found.**%BR%'
  toc '2:[[',getFile(),'][rda_report][HFM Events]]'
 }
 if $flg
  call unlinkTemp('evt')
}

=head2 iislog - IIS Log Files

Gathers recent Internet Information Services (IIS) log files on Windows. This
is applicable only for IIS version 6 or 7 only.

=cut

debug ' Inside HFM module, gathering recent IIS log files'

# Get SystemRoot
if getEnv('SystemRoot')
 var $dir = last
else
 var ($dir) = command('echo %SystemRoot%')

# Get IIS version
var $ver = cond(hasRegOption(),\
  nvl(getReg64Value('HKLM\SOFTWARE\Microsoft\InetMgr\Parameters',\
                    'MajorVersion'),\
      getReg32Value('HKLM\SOFTWARE\Microsoft\InetMgr\Parameters',\
                    'MajorVersion')),\
  nvl(getRegValue('HKLM\SOFTWARE\Microsoft\InetMgr\Parameters',\
                  'MajorVersion'),\
      getRegValue('HKLM\SOFTWARE\Wow6432Node\Microsoft\InetMgr\Parameters',\
                  'MajorVersion')))
if ?$ver
 var $ver = hex2dec(last)

# Determine the IIS log directory
var $log
if expr('==',$ver,6)
{if or(testFile('r',catFile($dir,'system32','inetsrv','MetaBase.xml')),\
       testFile('r',catFile($dir,'Sysnative','inetsrv','MetaBase.xml')))
 {var $xml = xmlLoadFile(lastFile(),xmlDisable(xmlParser(),'DR'))
  if $xml->find('.../IIsWebServer')->get_value('LogFileDirectory')
   var $log = catDir(last,'W3SVC1')
  elsif $xml->find('.../IIsWebService')->get_value('LogFileDirectory')
   var $log = catDir(last,'W3SVC1')
 }
 elsif testFile('f',$cmd = getGroupFile('D_CWD','cmd.exe'))
 {var $fil = catFile($dir,'system32','inetsrv','MetaBase.xml')
  var $xml = xmlLoadCommand(concat(quote($cmd,'x'),' /c type "',$fil,'"'),\
             xmlDisable(xmlParser(),'DR'))
  if $xml->find('.../IIsWebServer')->get_value('LogFileDirectory')
   var $log = catDir(last,'W3SVC1')
  elsif $xml->find('.../IIsWebService')->get_value('LogFileDirectory')
   var $log = catDir(last,'W3SVC1')
 }
 if !$log
 {if or(testDir('d',catDir($dir,'system32','LogFiles','W3SVC1')),\
        testDir('d',catDir($dir,'Sysnative','LogFiles','W3SVC1')))
  var $log = lastDir()
 }
}
elsif expr('==',$ver,7)
{if or(testFile('r',catFile($dir,'system32','inetsrv',\
                            'Applicationhost.config')),\
       testFile('r',catFile($dir,'Sysnative','inetsrv',\
                            'Applicationhost.config')),\
       testFile('r',catFile($dir,'system32','inetsrv','config',\
                            'Applicationhost.config')),\
       testFile('r',catFile($dir,'Sysnative','inetsrv','config',\
                            'Applicationhost.config')))
 {var $xml = xmlLoadFile(lastFile(),xmlDisable(xmlParser(),'DR'))
  if $xml->find('.../logFile')->get_value('directory')
   var $log = catDir(replaceEnv(last))
  elsif $xml->find('.../log/centralW3CLogFile')->get_value('directory')
   var $log = catDir(replaceEnv(last))
  if testDir('d',catDir($log,'W3SVC1'))
   var $log = lastDir()
 }
 elsif testFile('f',$cmd = getGroupFile('D_CWD','cmd.exe'))
 {loop $fil (catFile($dir,'system32','inetsrv','Applicationhost.config'),\
    catFile($dir,'system32','inetsrv','config','Applicationhost.config'))
  {var $xml = xmlLoadCommand(concat(quote($cmd,'x'),' /c type "',$fil,'"'),\
              xmlDisable(xmlParser(),'DR'))
   next xmlStatCommand()
   if $xml->find('.../log/centralW3CLogFile')->get_value('directory')
    var $log = catDir(replaceEnv(last))
   elsif $xml->find('.../logFile')->get_value('directory')
    var $log = catDir(replaceEnv(last))
   if testDir('d',catDir($log,'W3SVC1'))
    var $log = lastDir()
   break
  }
 }
 if !$log
 {if or(testDir('d',catDir($dir,'system32','inetpub','logs','LogFiles')),\
        testDir('d',catDir($dir,'Sysnative','inetpub','logs','LogFiles')))
  var $log = lastDir()
 }
}

# Collect recent log files
if $log
{report iislog
 prefix
 {write '---+!! IIS Log Files'
  write '---## From: ',$log
  write '   * Limited to last ',$AGE,' days'
  write '   * Links point to files that have been collected in their original \
              format. Opening them directly in your browser can present \
              risks. To prevent them, access the file outside the browser or \
              use the link to save them and use an adequate viewer.'
  write '|*File Name*| *Size*|*Last Modified Date*|'
 }
 loop $fil (grepDir($log,'\.log$','ipt'))
 {break isOlder($fil,$AGE)
  if $buf = new('Buffer','r',$fil)
  {var $lnk = encode($fil)
   var $siz = getSize($fil)
   if $siz
   {output d,concat('L_',basename($fil))
    if ${CUR.LAST}->write_tail($buf,$TAIL,['F',$fil,'T','T'])
     var $lnk = concat('[[',${CUR.LAST}->get_file,'][_blank][',$lnk,']]')
    end ${CUR.LAST}
   }
   write '|',$lnk,' | ',$siz,'|',\
             getLastModify($fil,'%d-%b-%Y&nbsp;%H:%M:%S'),' |'
  }
 }
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][IIS Log Files]]'
}

=head2 ruleslog - Rules Log Files

Collects the rules log files based on the key F<SystemPath> from
F<HKLM\SOFTWARE\Hyperion Solutions\Hyperion Financial Management\Server>
registry.

=cut

pretoc '2: Rules Log Files'
var $dir = cond(hasRegOption(),\
  nvl(getReg64Value('HKLM\SOFTWARE\Hyperion Solutions\\
                     Hyperion Financial Management\Server','SystemPath'),\
      getReg32Value('HKLM\SOFTWARE\Hyperion Solutions\\
                     Hyperion Financial Management\Server','SystemPath')),\
  nvl(getRegValue('HKLM\SOFTWARE\Hyperion Solutions\\
                   Hyperion Financial Management\Server','SystemPath'),\
      getRegValue('HKLM\SOFTWARE\Wow6432Node\Hyperion Solutions\\
                   Hyperion Financial Management\Server','SystemPath')))
if testDir('d',$dir)
{loop $app (@app)
 {report concat('ruleslog_',$app)
  var $log = catDir($dir,concat($app,'_RulesLogFiles'))
  prefix
  {write '---+!! Rules Log Files'
   write '---## From: ',$log
   write '   * Last ',$TAIL,' lines from the log files captured'
   write '   * Links point to files that have been collected in their original \
               format. Opening them directly in your browser can present \
               risks. To prevent them, access the file outside the browser or \
               use the link to save them and use an adequate viewer.'
   write '|*File Name*| *Size*|*Last Modified Date*|'
  }
  loop $fil (grepDir($log,'\.log$','irt'))
  {if $buf = new('Buffer','r',$fil)
   {var $lnk = encode($fil)
    var $siz = getSize($fil)
    if $siz
    {output d,concat('L_',basename($fil))
     if ${CUR.LAST}->write_tail($buf,$TAIL,['F',$fil,'T','T'])
      var $lnk = concat('[[',${CUR.LAST}->get_file,'][_blank][',$lnk,']]')
     end ${CUR.LAST}
    }
    write '|',$lnk,' | ',$siz,'|',\
              getLastModify($fil,'%d-%b-%Y&nbsp;%H:%M:%S'),' |'
   }
  }
  if isCreated(true)
   toc '3:[[',getFile(),'][rda_report][For ',$app,']]'
 }
}
unpretoc

=head2 Executable, Library, and Java Archive Versions

Collects the executable, library, and Java archive versions from
F<$EPM_HOME/FinancialManagement> and
F<$EPM_HOME/products/FinancialManagement> directory structures. When
F<unzip> is available, it extracts the manifest from Java archives.

=cut

debug ' Inside HFM module, gathering file versions'
pretoc '2:Executable, Library, and Java Archive Versions'

macro dsp_versions
{var ($rpt,$lvl,$dir,$opt,$dpt) = @arg
 import $EPM_HOME,$TOC,$TOP,$UNZIP
 keep $EPM_HOME,$TOC,$TOP,$UNZIP

 call $[OUT]->add_report('C',$rpt,0)
 prefix
 {write '---+!! Version Information from ',encode($dir),' Directory'
  write $TOC
 }
 loop $fil (grepDir(catDir($EPM_HOME,$dir),\
                    '\.(asp|ass|cs|css|dll|exe|jar|js|ocx|xml|xslt)$',\
                    $opt,$dpt))
 {write '---+ Version Information from ',encode(basename($fil))
  call statFile('p',$fil)
  write '%BR%'
  var $inf = getVersionInfo($fil)
  loop $key (keys($inf))
   write '|*',$key,' *|',replace($inf->{$key},'\012','%BR%',true),' |'
  write $TOP
  if and(match($fil,'\.jar$',true),$UNZIP)
  {prefix
    write '---++ Manifest Information'
   var $cmd = concat($UNZIP,' -p ',$fil,' META-INF/MANIFEST.MF')
   call writeCommand($cmd)
   if hasOutput(true)
    write $TOP
  }
 }
 if isCreated(true)
  toc $lvl,':[[',getFile(),'][rda_report][In ',encode($dir),']]'
}

var $UNZIP = findCommand('unzip')

pretoc '3:$EPM_HOME/HyperFinancialManagement'
var $cnt = 0
call dsp_versions('ver_fin',4,'FinancialManagement','dip')
loop $sub (grepDir(catDir($EPM_HOME,'FinancialManagement'),'^\.+$','nv'))
{if testDir('d',catDir($EPM_HOME,'FinancialManagement',$sub))
  call dsp_versions(concat('ver_fin',incr($cnt)),4,\
                    catDir('FinancialManagement',$sub),'dir')
}
unpretoc

pretoc '3:$EPM_HOME/products/FinancialManagement'
var $cnt = 0
call dsp_versions('ver_prd',4,catDir('products','FinancialManagement'),'dip')
loop $sub (grepDir(catDir($EPM_HOME,'products','FinancialManagement'),\
                   '^\.+$','nv'))
{if testDir('d',catDir($EPM_HOME,'products','FinancialManagement',$sub))
  call dsp_versions(concat('ver_prd_fin',incr($cnt)),4,\
                    catDir('products','FinancialManagement',$sub),'dir',\
                    check(lc($sub),'web',10,8))
}
unpretoc 2

=head2 oraoledb - Oracle Provider for OLE DB

Gets Oracle Provider for OLE DB version.

=cut

debug ' Inside HFM module, getting Oracle OLE DB version'
var ($fil) = (grepDir(catDir($ORACLE_HOME,'bin'),\
                      '^oraoledb(10|11)?\.dll$','ip'))
if testFile('f',$fil)
{report oraoledb
 write '---+!! Oracle Provider for OLE DB Version'
 write '---## From ',encode($fil)
 call statFile('b',$fil)
 write '%BR%'
 var $inf = getVersionInfo($fil)
 loop $key (keys($inf))
  write '|*',replace($key,'\012','',true),' *|',\
             replace($inf->{$key},'\012','',true),' |'
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][Oracle Provider for OLE DB]]'
}

=head2 cssxml - CSS.xml File

Collects the CSS.xml file in use. It first tries to get the information from
the registry entry C<ConnectionInfo>. Otherwise, it looks successively in the
F<%WINDIR%\Temp> and F<%HOMEPATH%\Localsettings\Temp> directory. This is
applicable only for versions 9.3.1 to 11.1.1.3.

=cut

var $url = cond(hasRegOption(),\
  nvl(getReg64Value('HKLM\SOFTWARE\Hyperion Solutions\\
                     Hyperion Financial Management\Server\Authentication',\
                    'ConnectionInfo'),\
      getReg32Value('HKLM\SOFTWARE\Hyperion Solutions\\
                     Hyperion Financial Management\Server\Authentication',\
                    'ConnectionInfo')),\
  nvl(getRegValue('HKLM\SOFTWARE\Hyperion Solutions\\
                   Hyperion Financial Management\Server\Authentication',\
                  'ConnectionInfo'),\
      getRegValue('HKLM\SOFTWARE\Wow6432Node\Hyperion Solutions\\
                   Hyperion Financial Management\Server\Authentication',\
                  'ConnectionInfo')))
var $req = createRequest('GET',$url)
var $rsp = submitRequest($req)
report cssxml
if isSuccess($rsp)
{prefix
 {write '---+!! CSS.xml File in Use'
  write '---## Using: ',encode($url)
  write '<verbatim>'
 }
 call writeResponse($rsp)
 if hasOutput(true)
  write '</verbatim>'
}
elsif or(testFile('r',catFile(getEnv('WINDIR',''),'Temp','CSS.xml')),\
         testFile('r',catFile(getEnv('HOMEPATH',''),'Localsettings','Temp',\
                             'CSS.xml')))
{var $fil = lastFile()
 prefix
 {write '---+!! CSS.xml File in Use'
  write '---## From ',encode($fil)
  write '  * This is a cache version and may not be the version currently in \
             use.'
 }
 call writeFile($fil)
}
if isCreated(true)
 toc '2:[[',getFile(),'][rda_report][CSS.xml File]]'

=head2 version - Version Information

Collects the latest version information from the
F<$EPM_HOME/logs/hfm/HsvEventLog.log> file (on versions earlier than 11.1.2).

=cut

if !?$HFM_REQUESTS
{debug ' Inside HFM module, getting version information'
 report version
 prefix
 {write '---+ Applications Version'
  write '---## Information Taken from ',encode(lastFile())
  write '   * Only latest version reported'
  write '|*File Name*|*Version*|'
 }
 var %ver = ()
 if testFile('f',catFile($EPM_HOME,'logs','hfm','HsvEventLog.log'))
 {var $hsv = lastFile()
  loop $lin (grepFile($hsv,\
                      '^<EStr'))
  {if match($lin,'.*<File>(.*)</File>.*<Ver>(.*)</Ver>.*')
   {var ($key,$val) = last
    var $ver{$key} = $val
   }
  }
 }
 loop $key (keys(%ver))
  write '|',$key,' |',replace($ver{$key},'\.','&#46;',true),' |'
 if isCreated(true)
  toc '2:[[',getFile(),'][rda_report][Version Information]]'

=head2 hsvevent - HsvEventLog File

Collects the F<$EPM_HOME/logs/hfm/HsvEventLog.log> file
(on versions earlier than 11.1.2).

=cut

 debug ' Inside HFM module, gathering HsvEventLog file'
 if createBuffer('HSV','R',$hsv)
 {# Determine the time interval
  if $START_TIME
  {var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\:]',$START_TIME)
   var $beg = mktime($sec,$min,$hou,$day,$mon,$yea)
   if $END_TIME
    var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\:]',$END_TIME)
   else
    var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\: ]',getLocalTime())
   var $end = mktime($sec,$min,$hou,$day,$mon,$yea)
   var $max = difftime($end,$beg)
  }
  else
  {var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\: ]',getLocalTime())
   var $end = mktime($sec,$min,$hou,$day,$mon,$yea)
   var $max = 1209600
  }

  # Extract relevant fragment
  report hsvevent
  prefix
  {write '---+ HsvEventLog File'
   write '---## Information Extracted from ',encode($hsv)
   call beginBlock(true)
  }
  var $flg = false
  while ?getLine('HSV')
  {var $lin = chomp(last)
   if match($lin,'^<EStr.*<DTime>(.*)</DTime>.*')
   {var ($cur) = last
    if match($cur,'^\d+\.\d+\.\d+\s+\d+:')
     var ($day,$mon,$yea,$hou,$min,$sec,$hlf) = split('[\.\: ]',$cur)
    else
     var ($mon,$day,$yea,$hou,$min,$sec,$hlf) = split('[\/\_\: ]',$cur)
    decr $mon
    if compare('eq',$hou,'12')
     decr $hou,12
    if compare('eq',$hlf,'PM')
     incr $hou,12
    var $dur = difftime($end,mktime($sec,$min,$hou,$day,$mon,$yea))
    break expr('<',$dur,0)
    if expr('<=',$dur,$max)
    {var $flg = true
     write $lin
    }
   }
   elsif $flg
    write $lin
  }
  if isCreated(true)
  {call endBlock(['F',$hsv,'P','T'])
   toc '2:[[',getFile(),'][rda_report][HsvEventLog File]]'
  }
  call deleteBuffer('HSV')
 }

=head2 inopjava - interopJava.log File

Collects the F<$EPM_HOME/logs/hfm/interopJava.log> file
(on versions earlier than 11.1.2).

=cut

 debug ' Inside HFM module, gathering interopJava.log file'
 report inopjava
 if testFile('f',catFile(catDir($EPM_HOME,'logs','hfm'),'interopJava.log'))
 {call tail_file(lastDir(),'interopJava.log',$TAIL)
  if isCreated()
   toc '2:[[',getFile(),'][rda_report][interopJava.log File]]'
 }

=head2 sssecclt - SharedServices_Security_Client.log File

Collects the F<$EPM_HOME/logs/hfm/SharedServices_Security_Client.log> file
(on versions earlier than 11.1.2).

=cut

 debug ' Inside HFM module, gathering SharedServices_Security_Client.log file'
 report sssecclt
 if testFile('f',catFile(catDir($EPM_HOME,'logs','hfm'),\
                         'SharedServices_Security_Client.log'))
 {call tail_file(lastDir(),'SharedServices_Security_Client.log',$TAIL)
  if isCreated()
   toc '2:[[',getFile(),'][rda_report][SharedServices_Security_Client.log File]]'
 }

=head2 Oracle WebLogic Server Information

Includes the Oracle WebLogic reports generated by the WREQ module for the
associated Oracle WebLogic Server domain (on versions earlier than 11.1.2
having a product registry).

=cut

 if ?${HFM_DOM_REQ_DOMAIN}
 {var $dom = basename(last)
  toc '%PUSH("%SPLIT%")%'
  toc '%PUSH("1+:Oracle WebLogic Server Overview")%'
  toc '%INCLUDE("',${CUR.GROUP},'_WREQ_HFM_TOP.toc")%'
  toc '%POP2%'
  toc '%PUSH("%SPLIT%")%'
  toc '%PUSH("1+:',"'",$dom,"'",' Domain")%'
  toc '%INCLUDE("',${CUR.GROUP},'_WREQ_HFM_DOM.toc")%'
  toc '%POP2%'
 }
}

=head1 DEPLOYMENT REPORTS

Available on version 11.1.2 and later.

=cut

else
{loop $uid (split('\|',$HFM_REQUESTS))
 {next !$uid
  var $ins = getSetting(concat('HFM_HOME',$uid))
  call setAbbr(concat('HFM_i',$uid))
  toc '%SPLIT%'
  toc "1+:'",getSetting(concat('HFM_INSTANCE',$uid)),"' Deployment"

=head2 Version Information

Collects the latest version information from the
F<$INSTANCE_HOME/diagnostics/logs/hfm/HsvEventLog.log> file.

=cut

  debug ' Inside HFM module, getting version information'
  report version
  prefix
  {write '---+ Applications Version'
   write '---## Information Taken from ',encode(lastFile())
   write '   * Only latest version reported'
   write '|*File Name*|*Version*|'
  }
  var %ver = ()
  var $hsv = undef
  if testFile('f',catFile($ins,'diagnostics','logs','hfm','HsvEventLog.log'))
  {var $hsv = lastFile()
   loop $lin (grepFile($hsv,\
                       '^<EStr'))
   {if match($lin,'.*<File>(.*)</File>.*<Ver>(.*)</Ver>.*')
    {var ($key,$val) = last
     var $ver{$key} = $val
    }
   }
  }
  loop $key (keys(%ver))
   write '|',$key,' |',replace($ver{$key},'\.','&#46;',true),' |'
  if isCreated(true)
   toc '2:[[',getFile(),'][rda_report][Version Information]]'

=head2 HsvEventLog File

Collects the F<$INSTANCE_HOME/diagnostics/logs/hfm/HsvEventLog.log> file.

=cut

  debug ' Inside HFM module, gathering HsvEventLog file'
  if createBuffer('HSV','R',$hsv)
  {# Determine the time interval
   if $START_TIME
   {var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\:]',$START_TIME)
    var $beg = mktime($sec,$min,$hou,$day,$mon,$yea)
    if $END_TIME
     var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\:]',$END_TIME)
    else
     var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\: ]',getLocalTime())
    var $end = mktime($sec,$min,$hou,$day,$mon,$yea)
    var $max = difftime($end,$beg)
   }
   else
   {var ($day,$mon,$yea,$hou,$min,$sec) = split('[\-\_\: ]',getLocalTime())
    var $end = mktime($sec,$min,$hou,$day,$mon,$yea)
    var $max = 1209600
   }

   # Extract relevant fragment
   report hsvevent
   prefix
   {write '---+ HsvEventLog File'
    write '---## Information Extracted from ',encode($hsv)
    call beginBlock(true)
   }
   var $flg = false
   while ?getLine('HSV')
   {var $lin = chomp(last)
    if match($lin,'^<EStr.*<DTime>(.*)</DTime>.*')
    {var ($cur) = last
     var ($mon,$day,$yea,$hou,$min,$sec,$hlf) =  split('[\/\_\: ]',$cur)
     decr $mon
     if compare('eq',$hou,'12')
      decr $hou,12
     if compare('eq',$hlf,'PM')
      incr $hou,12
     var $dur = difftime($end,mktime($sec,$min,$hou,$day,$mon,$yea))
     break expr('<',$dur,0)
     if expr('<=',$dur,$max)
     {var $flg = true
      write $lin
     }
    }
    elsif $flg
     write $lin
   }
   if isCreated(true)
   {call endBlock(['F',$hsv,'P','T'])
    toc '2:[[',getFile(),'][rda_report][HsvEventLog File]]'
   }
   call deleteBuffer('HSV')
  }

=head2 interopJava.log File

Collects the F<$INSTANCE_HOME/diagnostics/logs/hfm/interopJava.log> file.

=cut

  debug ' Inside HFM module, gathering interopJava.log file'
  if testFile('f',catFile(catDir($ins,'diagnostics','logs','hfm'),\
                          'interopJava.log'))
  {report inopjava
   call tail_file(lastDir(),'interopJava.log',$TAIL)
   if isCreated()
    toc '2:[[',getFile(),'][rda_report][interopJava.log File]]'
  }

=head2 SharedServices_Security_Client.log File

Collects the
F<$INSTANCE_HOME/diagnostics/logs/hfm/SharedServices_Security_Client.log> file.

=cut

  debug ' Inside HFM module, gathering SharedServices_Security_Client.log file'
  if testFile('f',catFile(catDir($ins,'diagnostics','logs','hfm'),\
                          'SharedServices_Security_Client.log'))
  {report sssecclt
   call tail_file(lastDir(),'SharedServices_Security_Client.log',$TAIL)
   if isCreated()
    toc '2:[[',getFile(),\
        '][rda_report][SharedServices_Security_Client.log File]]'
  }

=head2 diaglogs - Diagnostic Log Files

Collects the diagnostic log files from F<$INSTANCE_HOME/diagnostics/logs>
directory.

=cut

  report diaglogs
  var $log = catDir($ins,'diagnostics','logs')
  prefix
  {write '---+!! Diagnostic Log Files'
   write '---## From: ',$log
   write '   * Last ',$TAIL,' lines from the log files captured'
   write '   * Links point to files that have been collected in their original \
               format. Opening them directly in your browser can present \
               risks. To prevent them, access the file outside the browser or \
               use the link to save them and use an adequate viewer.'
   write '|*File Name*| *Size*|*Last Modified Date*|'
  }
  loop $fil (grepDir($log,'\.log(\.\d+)?$','irt'))
  {if $buf = new('Buffer','r',$fil)
   {var $lnk = encode($fil)
    var $siz = getSize($fil)
    if $siz
    {output d,concat('L_',basename($fil))
     if ${CUR.LAST}->write_tail($buf,$TAIL,['F',$fil,'T','T'])
      var $lnk = concat('[[',${CUR.LAST}->get_file,'][_blank][',$lnk,']]')
     end ${CUR.LAST}
    }
    write '|',$lnk,' | ',$siz,'|',\
              getLastModify($fil,'%d-%b-%Y&nbsp;%H:%M:%S'),' |'
   }
  }
  if isCreated(true)
   toc '2:[[',getFile(),'][rda_report][Diagnostic Log Files]]'

=head2 Oracle WebLogic Server Information

Includes the Oracle WebLogic reports generated by the WREQ module for the
associated Oracle WebLogic Server domain.

=cut

  if ?getSetting(concat('HFM_DOM',$uid,'_REQ_DOMAIN'))
  {var $dom = basename(last)
   toc '%PUSH("%SPLIT%")%'
   toc '%PUSH("1++:Oracle WebLogic Server Overview")%'
   toc '%INCLUDE("',${CUR.GROUP},'_WREQ_HFM_TOP',$uid,'.toc",1)%'
   toc '%POP2%'
   toc '%PUSH("%SPLIT%")%'
   toc '%PUSH("1++:',"'",$dom,"'",' Domain")%'
   toc '%INCLUDE("',${CUR.GROUP},'_WREQ_HFM_DOM',$uid,'.toc",1)%'
   toc '%POP2%'
  }
  unpretoc 2
 }
}

=begin credits

=over 10

=item RDA 4.16: Giacomo Lacava, Karthik Duraisamy, Sudev Alampalli,
Steve Johnson, Terry Harber.

=item RDA 4.18: Terry Harber.

=item RDA 4.20: Tony Mitri, Satheesh Naraginti.

=item RDA 4.21: Tony Mitri.

=item RDA 4.23: Tony Mitri, Terry Harber.

=item RDA 4.24: Terry Harber.

=item RDA 4.29: Maurice Bauhahn, Grzegorz Reizer.

=back

=end credits

=head1 COPYRIGHT NOTICE

Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.

=head1 TRADEMARK NOTICE

Oracle and Java are registered trademarks of Oracle and/or its
affiliates. Other names may be trademarks of their respective owners.

=cut
