<!-- Copyright (c) 2008, Oracle and/or its affiliates.All rights reserved. -->
<!-- This file contains the dtd for describing a target type 

     Version 1.0

   MODIFIED    (MM/DD/YY)  
      nigandhi  11/19/08 - Adding REMOTE and ON_TARGET as QueryDescriptor
                           attributes
      njagathe  04/25/08 - Backport njagathe_bug-6995958 from main
      amathur   08/14/06 - bug id 4591002
      amathur   08/19/06 - Backport amathur_bug-4591002 from main
      njagathe  08/09/06 - Backport njagathe_bug-5451821 from main
      njagathe  07/26/06 - Allow COMPUTE_EXPR columns to appear earlier 
      njagathe  07/28/06 - Backport njagathe_bug-4869048 from main 
      kduvvuri  11/30/05 - Backport kduvvuri_bug-4631553 from main 
      rpatti    07/21/05 - add comments for unit nlsid 
      nigandhi  06/09/05 - Bug4414888 - QueryDescriptor, ExecutionDescriptor, 
                           PushDescriptor made optional for REPOSITORY_TABLE 
                           metrics 
      nigandhi  04/15/05 - Bug 4258720 - Adding attr to ColumnDescriptor 
      rkpandey  05/25/05 - Added comments for tagsize.properties 
      nigandhi  05/04/05 - ER 4297327: Adding TypeProperties 
      sksaha    03/24/05 - Add DiscoveryHelper and DiscoveryHint tags to 
                           metadata 
      nigandhi  03/18/05 - Bug3940478 - non_thresholded_alerts and 
                           keyonly_thresholds 
      nigandhi  03/15/05 - bug 4092958 - REQUIRED_AGENT_VERSION 
      nigandhi  02/23/05 - Description for Recvlet_ID - bug 3870773 
      nigandhi  02/21/05 - Fix Comments 
      djoly     02/17/05 - Fix comment 
      ramalhot  02/13/05 - renamed Assoc type MEMBER to CONTAINS 
      aaitghez  02/07/05 - make ValidIf and ValidMidTierVersion order non 
                           issue 
      xxu       01/12/05 - nigandhi: Fixing Comment 
      njagathe  12/27/04 - Update for ValidMidTierVersions support 
      njagathe  10/06/04 - Add flag to force caching of metric data 
      qding     10/05/04 - add descriptions on how to use CLOB/BLOB and 
                           IS_FILENAME 
      njagathe  10/01/04 - Adding IS_TRANSPOSED attribute 
      njagathe  09/27/04 - Change Association attributes 
      njagathe  09/25/04 - Adding has_push,has_pull,remote attributes 
      qding     09/16/04 - BLOB support 
      qding     08/19/04 - CLOB support 
      kduvvuri  08/03/04 - add ASSOC_TARGET to AltSkipCondition. 
      njagathe  07/27/04 - Adding support for allowed column values for a 
                           particular CredentialSetColumn 
      rzkrishn  06/28/04 - removing dashes within comments
      njagathe  06/25/04 - Allowing InstanceProperty defns for Dynamic 
                           properties 
      gachen    06/18/04 - 
      aaitghez  06/14/04 - Add CategoryValue , MetricClass and MetricCategory 
      gachen    06/14/04 - extend metric usage type 
      itarashc  08/21/03 - fix case 
      njagathe  08/14/03 - Updates to credential structures 
      njagathe  07/31/03 - Adding timeseries column support
      xxu       07/23/03 - add MATCH
      njagathe  07/10/03 - Context for CredentialSet
      njagathe  07/10/03 - Adding Display elements
      njagathe  07/02/03 - Adding Credential metadata
      xxu       06/18/03 - add charset convert flag
      xxu       06/16/03 - TRUE_IF_COLLECT in USE_CACHE
      gachen    05/30/03 - set IS_KEY optional
      njagathe  05/30/03 - Adding STATELESS_ALERTS attribute to Metric
      rzkrishn  05/23/03 - review comment for MonitoringMode
      njagathe  05/23/03 - Adding intermediate target state support
      njagathe  05/08/03 - Allow for multiple target type display objects
      jaysmith  04/20/03 - add PushDescriptor
      njagathe  03/28/03 - Remove TRANSACTIONAL attribute, replace with CONFIG
      njagathe  04/17/03 - Adding KEYS_ONLY attribute to Metric
      gachen    03/11/03 - add tag for longrunning
      gachen    03/03/03 - check original/hide_entry
      gachen    02/28/03 - set reenter for instance property
      njagathe  02/19/03 - Adding READ_ONLY attribute to InstanceProperty
      itarashc  01/17/03 - fix bugs
      njagathe  02/24/03 - Adding AUTOCOLS attribute to TableDescriptor
      gachen    02/18/03 - remove CUST
      njagathe  02/19/03 - Adding READONLY attribute to InstanceProperty
      xxu       02/10/03 - add AssocTarget
      rzkrishn  02/06/03 - review changes
      xxu       01/22/03 - add optional resource bundle package
      rzkrishn  01/30/03 - adding Cluster Descriptor
      gachen    11/06/02 - add comment
      itarashc  01/17/03 - fix bugs
      njagathe  11/13/02 - Increasing the allowed number  of key columns
      njagathe  10/17/02 - Remove TYPE from output of DynamicProperties
      gachen    10/16/02 - document response metric
      xxu       09/04/02 - review comments
      xxu       09/03/02 - support target versioning
      vnukal    08/29/02 - adding usage_type HIDDEN
      xxu       08/28/02 - different outer join
      xxu       08/15/02 - default value for empty variable in expr
      njagathe  08/05/02 - Adding execution descriptor to DynamicProperties
      cfowler   07/25/02 - fix syntax errors in DTD
      xxu       07/12/02 - add outer join
      xxu       06/11/02 - remove TRANSIENT for AggregateColumn
      xxu       06/04/02 - update
      gachen    05/23/02 - aggregation metric
      njagathe  05/28/02 - Adding IS_TEST_METRIC attribute to Metric element
      lyang     05/09/02 - lyang_move_emsdk_common
      njagathe  04/16/02 - Change USAGE_TYPE values list
      njagathe  04/11/02 - Adding KEYS_FROM_MULT_COLLS
      njagathe  03/19/02 - Adding HOST and CACHE scope
      njagathe  01/16/02 - Allow two types for dynamic properties
      njagathe  01/04/02 - Adding colltime present but not primary key option
      njagathe  01/04/02 - Add finetuning of auto generated columns for raw metrics
      njagathe  12/26/01 - Adding DynamicProperties
      gachen    08/24/01 - add custom attr to metric
      njagathe  08/25/01 - Adding DISPLAY_TYPE
      dcawley   08/21/01 - Add repository side metrics
      njagathe  07/26/01 - Adding REPOSITORY metric type
      aaitghez  07/16/01 - comments update for instance properties
      njagathe  07/09/01 - Remove VERSION attributes
      aaitghez  07/05/01 - modify InstanceProperty element def.
      aaitghez  06/29/01 - Adding InstancePropertis to TargetMetadata element.
      aaitghez  06/28/01 - adding instance propertyies.
      gachen    07/02/01 - update DTD
      gachen    06/25/01 - update comment
      njagathe  06/08/01 - Removing obsolete TIMEOUT attribute from Metric
      njagathe  05/30/01 - Adding OPTIONAL attribute to Property
      gachen    05/23/01 - quote FALSE
      gachen    05/16/01 - date support
      mbhoopat  05/16/01 - Support for rate metrics
      gachen    05/10/01 - add ENV
      njagathe  04/19/01 - Remove FETCHLET_CLASS and make FETCHLET_ID implement
      njagathe  04/12/01 - Support for RAW Columns
      gachen    04/11/01 - change METRIC_NAME to NAME
      gachen    04/10/01 - change TARGET_TYPE to TYPE
      gachen    04/09/01 - change metric_id to metric_name
      gachen    03/29/01 - dense UI
      gachen    03/21/01 - support raw
      mbhoopat  03/20/01 - Metric cache support
      njagathe  02/20/01 - Update for latest changes
      gachen    02/07/01 - make DTD valid
      njagathe  02/05/01 - Adding ADDRESS, CREDENTIALS AND SYSTEMGLOBAL scopes
      njagathe  12/18/00 - Add unit etc
      njagathe  12/06/00 - Initial versions

-->
<!--
  The maximum length allowed for the various attributes mentioned in the file
  must be mentioend in tagsize.properties.
  This will be used to truncate the length of the attributes in the metadata
  file while loading the metadata information into the repository.

-->

<!-- 
     The TargetMetadata describe the metadata for a target type.
     
     META_VER:  describes the version of metadata.
     TYPE:      target type
     REQUIRED_AGENT_VERSION: This attribute indicates the minimum required 
                agent version for the metadata.  TargetMetadata marked with 
                this attribute will be valid on Agent versions greater than 
                or equal to the specified version.
     CATEGORY_PROPERTIES: Semicolon seperated list of properties
                          which will be used as properties for ValidIf.
                          Currently, each target type can have up to 5
                          properties used as category property.

     Example: TargetMetadata with REQUIRED_AGENT_VERSION="10.2.0.0.0" will 
              be valid on agents version 10.2 and higher but will be invalid
              on agent version 10.1
-->
<!ELEMENT TargetMetadata (Display*, TypeProperties?, AssocTarget*, DiscoveryHelper?,  MonitoringMode*, AltSkipCondition?, MetricClass*, Metric*, CredentialInfo?, InstanceProperties?)>
<!ATTLIST TargetMetadata
        META_VER CDATA #REQUIRED
        TYPE CDATA #REQUIRED
        REQUIRED_AGENT_VERSION CDATA #IMPLIED
        HELPID CDATA #IMPLIED
        HELP CDATA #IMPLIED
        CATEGORY_PROPERTIES CDATA #IMPLIED
        RESOURCE_BUNDLE_PACKAGE CDATA #IMPLIED
>

<!--
    This Element is introduced in version 10.2.
    The TypeProperties holds TypeProperty elements for the target type.
-->
<!ELEMENT TypeProperties (TypeProperty*)>

<!--
    This element is introduced in version 10.2
    TypeProperty element contains the property name-value
      pair for a target type.
         
    PROPERTY_NAME:   Name of the target type property.
    PROPERTY_VALUE:  Value of the target type property.
-->
<!ELEMENT TypeProperty EMPTY>
<!ATTLIST TypeProperty
        PROPERTY_NAME CDATA #REQUIRED
        PROPERTY_VALUE CDATA #IMPLIED
>


<!--
     The AssocTarget describe the associated targets of this target type.
     Targets may be associated for a number of reasons some of them being:
     rendering topology maps, root cause analysis, determining availablity
     of targets and many more.

    The list of attributes for this element have changed in 10.2

    Prior to 10.2
     ASSOC_TARGET (required) :  the name of the association
     TYPE (required)         :  the target type of the associated target.

   Starting from 10.2
     ASSOCIATION_NAME(required) : Previously ASSOC_TARGET
     ASSOC_TARGET_TYPE (required) : Previously TYPE
     NAME_NLSID (optional) : NLSID for association name
     DESCRIPTION (optional) : Description
     DESCRIPTION_NLSID (optional) : NLSID for description string
     SOURCE_TARGET_TYPE (optional) : If association starts from a different
         target than this target itself, the target type of the source target
     CARDINALITY (optional) : One of 
         OPTIONAL_SINGLE_CARDINAL - zero or one targets as associated
         REQUIRED_SINGLE_CARDINAL - exactly one associated target
         OPTIONAL_MULTI_CARDINAL  - zero or several associated targets
         REQUIRED_MULTI_CARDINAL) - one or more associated targets
     ASSOC_TYPE (optional) : One of
         RELATES_TO : Default value - implies "some" generic relationship
         DEPENDS_ON : Dependency on associated target
         CONNECTS_TO : Source target connects to assoc target
         SERVICE_ACCESS_POINT
         RUNS_ON : Source target runs on (installed on ) assoc target
         CONTAINS : Source target contains  assoc target
         HOSTED_BY : Similar to runs on
         MONITORED_BY : Source target is monitored by assoc target (agent)
         OPTIONALLY_CONNECTS_TO
         SECURED_BY : source target is secured by the assoc target, such as
                      oc4j is secured by mas farm. Introduced for repoless mode
                      starting 11G

     COMPUTE_RULE ( optional ): Can be used to compute Asscoc Target instance
                    if not already specified in the targets.xml.
         PARENT - find the first Parent.
         MEMBER - find the first child.
         NONE  - default behavior. Don't automatically generate any 
                 Associated Target Instances.

    Even though the DTD below does not indicate it, every AssocTarget
    element must have one each of  
     a) ASSOC_TARGET or ASSOCIATION_NAME
     b) TYPE or ASSOC_TARGET_TYPE
-->
<!ELEMENT AssocTarget (AssocPropDef*)>
<!ATTLIST AssocTarget
          ASSOC_TARGET CDATA #IMPLIED
          TYPE CDATA #IMPLIED

          ASSOCIATION_NAME       CDATA     #IMPLIED
          NAME_NLSID             CDATA     #IMPLIED
          DESCRIPTION            CDATA     #IMPLIED
          DESCRIPTION_NLSID      CDATA     #IMPLIED
          SOURCE_TARGET_TYPE     CDATA     #IMPLIED
          ASSOC_TARGET_TYPE      CDATA     #IMPLIED
          CARDINALITY            (OPTIONAL_SINGLE_CARDINAL |
                                  REQUIRED_SINGLE_CARDINAL |
                                  OPTIONAL_MULTI_CARDINAL  |
                                  REQUIRED_MULTI_CARDINAL)  #IMPLIED
          ASSOC_TYPE              (RELATES_TO|DEPENDS_ON | CONNECTS_TO | 
                                   SERVICE_ACCESS_POINT|RUNS_ON|
                                   CONTAINS|HOSTED_BY|MONITORED_BY|
                                   OPTIONALLY_CONNECTS_TO|
                                   SECURED_BY) #IMPLIED
          COMPUTE_RULE          (PARENT|MEMBER|NONE) "NONE"
>

<!--
     The AssocPropDef describe the properies for an association

     NAME      : the name of the property
     REQUIRED  : boolean value to indicate whether the property is required
-->

<!ELEMENT AssocPropDef EMPTY>
<!ATTLIST AssocPropDef
      NAME     CDATA  #REQUIRED
      REQUIRED (TRUE | FALSE) #REQUIRED
>


<!--
 A MetricClass is a higher level grouping of metric categories.
 The MetricClass tag is a name holder to optionally describe
 the set of available metric classes in a metadata file.
 NAME: Is the name of the class (e.g. Functional)
 NLSID: Is the translation ID.  The naming convention is 
        metric_class_<classname>
-->
<!ELEMENT MetricClass (MetricCategory*)>
<!ATTLIST MetricClass
                    NAME CDATA #REQUIRED
                    NLSID CDATA #IMPLIED
>

<!--
  A MetricCategory is a way to categories metrics and condtions
  The MetricCategory tag serves as a name holder to optionally
  describe the set of available categories.
                          
  NAME: The name of the category (e.g. Security)
  NLSID: Ths NLSID of the category.  The naming convention here is
         metric_cat_<category_name>   
-->
<!ELEMENT MetricCategory EMPTY>
<!ATTLIST MetricCategory
                    NAME CDATA #REQUIRED
                    NLSID CDATA #IMPLIED
>

<!--  A metric is the performance data that can be collected.

      NAME: metric name, it uniquely identifies it within
            the scope of its target type.
      TYPE: data type. 
            Supported metric types are
              a) Basic : NUMBER, STRING 
              b) Tabular : TABLE, RAW 
              c) EXTERNAL (data not parsed/fronted by EMD)
              d) REPOSITORY_TABLE, REPOSITORY_NUMBER, REPOSITORY_STRING, 
                 REPOSITORY_EVENT
                 (computed elsewhere)
      REPOS_PLSQL: If type is REPOSITORY_TABLE, REPOSITORY_NUMBER or 
                   REPOSITORY_STRING , the name of the PL/SQL proc to
                   execute at the repository to evaluate the metric

      A metric can have TABLE type. The value will be returned
      as a set of rows each containing a set of values (columns).
      (A list will be a special case of the Table)

      A Table Metric must have a TableDescriptor defined. It describes
      columns of the table. Each column must specify the name and
      the data type for the column. The column can also be tagged
      as a key column. These column values qualify the value returned
      in the non-key columns.

      For example : In a metric for top 10 processes, the process
      name will be the key column while the residence memory size,
      cpu, time used will be the value columns.

      The query descriptor associated will contain the metadata
      that can be used to collect the value of the metric.
      (For exmple SQL Query)

      ExecutionDescriptor is used to compute aggregation metric.

      The QueryDescriptor, ExecutionDescriptor, PushDescriptor elements
      are optional for REPOSITORY_TABLE, REPOSITORY_STRING, 
      REPOSITORY_NUMBER and REPOSITORY_EVENT type metrics.

      USAGE_TYPE: This defines the purpose of the metric. The options are
       a) VIEW_COLLECT 
        This is the default usage - metrics that are both viewable and 
        collected.
       b) REALTIME_ONLY 
        These are metrics that cannot be collected. The rules on key 
        uniqueness are not applied to these metrics. 
       c) HIDDEN
        Metrics are tagged hidden when they collected nor visible from the 
        console. The data is not uploaded to the repository either.  These 
        are "temporary" metrics which are used to compute other metrics. key 
        uniqueness is still checked.
       d) HIDDEN_COLLECT
        metric can be collected. It will not be viewable.  Also data is not 
        uploaded.  It is similar to HIDDEN, but can have collection on it. 
       e) COLLECT_UPLOAD
        metric can be collected and uploaded,  metadata is uploaded to MGMT_METRICS
        but it is not viewable in All metric page. 

      To summary
       USAGE_TYPE  KEY_UNIQUE_CHECK   COLLECTABLE   MGMT_METRICS_RAW  MGMT_METRICS   VIEWABLE
      ******************************************************************************************
       VIEW_COLLECT    Y                     Y           Y                Y              Y
       REALTIME_ONLY   N                     N           N                Y              N
       HIDDEN          Y                     N           N                Y              N
       HIDDEN_COLLECT  Y                     Y           N                Y              N
       COLLECT_UPLOAD  Y                     Y           Y                Y              N

      Mapping of old USAGE_TYPE values
       DISPLAY_ONLY : REALTIME_ONLY
       MULTI_KEY : VIEW_COLLECT
       COLLECT_ONLY : VIEW_COLLECT 
       The metric browser automatically decides which metrics to not display.

      IS_TEST_METRIC : The agent can check some metrics to determine if a 
      target has been correctly specified with valid instance properties. This
      attribute marks this metric as one of the test metrics.

      IS_METRIC_LONG_RUNNING( since 4.0.1):  IF true, the metric is long 
      running. This give the metric engine a hint that this query will take 
      relatively longer to finish. A special property 
      EM_IS_METRIC_LONG_RUNNING will be passed to fetchlet automatically.

      KEYS_ONLY (since 4.0.1): Used to tag special metrics that have only key
      columns. Note that in general, such metrics are not useful in collections
      (since no data is uploaded), but there may be special cases where the
      metric is used to just retrieve a set of keys.      

      CONFIG ( since 4.1 ) : This is a special designation for CONFIG metrics
      that are uploaded differently by the EM framework.

      REMOTE (since 10.2): Used to tag metrics that can be evaluated from a 
      remote location. These metrics could be evaluated from "beacon" nodes

      IS_TRANSPOSED (since 10.2): Used to tag metrics that generate data as
      name value pairs and the UI treats the names as "column headers". These
      are useful when the number of rows (or data categories) is not known
      at design time.

      FORCE_CACHE (since 10.2): For collected metrics, this is a strong hint to
      to the agent to cache the results of a metric collection. In the absence
      of this hint, the agent may only start caching the result of a metric
      after it realizes that someone will try to use the cached value. 

      NUM_CACHE_VALUES (since 11) : Starting with 11, the agent will support 
      the ability to cache multiple collection results in memory for access 
      by the EMDClient getMetricHistory API. The value of this attribute 
      defaults to 1, but the user can set it to a higher value such as 15 or 60

      Oracle EM recommends that every target type have a special metric 
      named "Response". This metric should have a column called "Status".
      The type creator should also set up a collection of this metric and set
      up a condition (see TargetCollection.dtd) on the Status column.

      The availability system (target updown status over time) uses alerts on
      this metric column to provide updown statistics over time.
-->
<!ELEMENT Metric ((ValidIf | ValidMidTierVersions)*, Display?, CategoryValue* ,TableDescriptor?, ((QueryDescriptor | ExecutionDescriptor) | PushDescriptor)* )>
<!ATTLIST Metric
        NAME CDATA #REQUIRED
        TYPE (NUMBER | STRING | TABLE | RAW | EXTERNAL | REPOSITORY_TABLE | REPOSITORY_NUMBER | REPOSITORY_STRING | REPOSITORY_EVENT) "NUMBER"
        REPOS_PLSQL CDATA #IMPLIED
        USAGE_TYPE (VIEW_COLLECT | REALTIME_ONLY | HIDDEN | HIDDEN_COLLECT | COLLECT_UPLOAD ) "VIEW_COLLECT"
        KEYS_FROM_MULT_COLLS (TRUE | FALSE) "FALSE"
        IS_TEST_METRIC       (TRUE | FALSE) "FALSE"
        KEYS_ONLY            (TRUE | FALSE) "FALSE"
        REMOTE               (TRUE | FALSE) "FALSE"
        IS_TRANSPOSED        (TRUE | FALSE) "FALSE"
        HELP                 CDATA #IMPLIED
        IS_METRIC_LONG_RUNNING  (TRUE|FALSE) "FALSE"
        CONFIG               (TRUE|FALSE) "FALSE"
        FORCE_CACHE          (TRUE | FALSE) "FALSE"
        NUM_CACHE_VALUES     CDATA "1"
>
<!--
    ValidIf contains a group of category properties which must be meet all together.
    It can be used at different levels like metric, QueryDescriptor,
    ExecutionDescriptor, InstanceProperty, DynamicProperty, etc..
-->
<!ELEMENT ValidIf (CategoryProp+)>
<!--
    CategoryProp describes all choices of one category property.
    CHOICES contains values seperated by ";".
-->
<!ELEMENT CategoryProp EMPTY>
<!ATTLIST CategoryProp
        NAME CDATA #REQUIRED
        CHOICES CDATA #REQUIRED
>

<!--
  The ValidMidTierVersions element is used in the mid tier based versioning
  support in the agent (starting from version 10.2).

  This tag can be used either under a Metric or within a CustomTableMapper
  element (see below). When present, it indicates to the agent that a Metric
  definition or a CustomTableMapper definition only applies for a certain set
  of mid tier versions.

  The attributes are :
    PLUG_IN : Optional attribute that allows a particular mid tier plug in to 
    be referenced. If not specified, this tag applies to the core oms version.

    START_VER : Starting version (inclusive, optional) the element is applied 
     from.
     Say, a value of 10.1.0.1 implies that any version equal to or higer than
     10.1.0.1 is acceptable
   
    END_VER : Ending version (exclusion, optional) that the element is 
     applicable to.
     Say, a value of 10.2 implies that the element is applicable to any version
     less than ( not including ) 10.2

  Every ValidMidTierVersions element needs to have at least one of START_VER or  END_VER specified.
-->
<!ELEMENT ValidMidTierVersions EMPTY>
<!ATTLIST  ValidMidTierVersions
           PLUG_IN   CDATA #IMPLIED
           START_VER CDATA #IMPLIED
           END_VER CDATA #IMPLIED
>

<!--
     TableDescriptor describes the details of the table that represents
     a metric of type TABLE. 

     Only RAW metric can define TABLE_NAME.  The collected data will
     be loaded to that repostory database table.
     See CustomTableMapper definitions below. If a TableDescriptor contains
     CustomTableMapper elements, it should not contain a TABLE_NAME attribute.

     The SKIP* attributes only apply to raw metrics. The EMD will automatically
     generate the TARGET_GUID, METRIC_NAME and COLLECTION_TIMESTAMP columns for
     a raw metric unless if asked not to by setting these attributes to TRUE.

     SKIP_COLLTIME_PK attribute is deprecated. Since this can now be done by 
     altering the table definition in the repository, SKIP_COLLTIME_PK is not 
     useful any more.  Please refer to the DTD documentation for a detailed
     explanation.
-->
<!ELEMENT TableDescriptor (ColumnDescriptor*, CustomTableMapper*)>
<!ATTLIST TableDescriptor
        TABLE_NAME CDATA #IMPLIED
        SKIP_TARGET_COLUMN (TRUE | FALSE) "FALSE"
        SKIP_METRIC_COLUMN (TRUE | FALSE) "FALSE"
        SKIP_COLLTIME_PK (TRUE | FALSE) "FALSE"
        SKIP_COLLTIME_COLUMN (TRUE | FALSE) "FALSE"
>

<!--
     The ColumnDescriptor elements describe each column in a table. 

     NAME is the metric column name.
     TYPE is the data type. NUMBER or STRING.  For nested table support, 
          a column may define as RAW to indicate it is a nested-table. 
          ( we only allow 1 level of nested table)

          (since 10.2) TYPE can also be CLOB or BLOB. CLOB holds large character
          data such as a log file while BLOB holds binary data (.zip files, .tar
          files, etc.). CLOB/BLOB is only valid inside RAW metrics.
          When TYPE is set to CLOB or BLOB, the ColumnDescriptor can also have 
          IS_FILENAME attribute set to TRUE, in which case, the column value
          is the name of the file whose content should be sent rather than
          the column value itself. For CLOB/BLOB columns, the destination 
          columns in the repository table should also be of CLOB/BLOB type.

     IS_FILENAME (since 10.2)
          When set to TRUE, it indicates that the column value is a file name 
          which contains the real content that needs to be sent. IS_FILENAME
          attribute is valid only for CLOB/BLOB column types.

     IS_KEY: is set to true if this column is the primary key( uniquely identify
          the row in the returned rows).  For any two row returned, the value of
          key column can't be the same, otherwise, there will be primary key violation.
    

          Upto 5 columns can be marked with IS_KEY=TRUE.   If no column is defined as 
          key, we default the key to null(therefore should only return 1 row at a time)

    COLUMN_NAME:  will be used if the metric type is RAW to identify the database column.

    IS_DATE:  will only be used when the metric is RAW and the column is date type.


    IS_LONG_TEXT:  will only be used when the metric is RAW and the column will be in digested form.

    COMPUTE_EXPR: Expression used to compute the value of the column based on
     metric inputs, or the values of other columns. 
    Prior to 11g, columns with COMPUTE_EXPR attributes could only be present
    after all the fetchlet returned columns. As part of bug 4869048, special
    compute expr columns will be allowed to be mixed in columns that get values
    from fetchlets.

    REPLACE_FETCHED_VALUE (since 11g) : This attribute is only applicable if
    COMPUTE_EXPR is set, and for inner compute expressions (see above).
    If set, this tells the agent to use the compute expression value in place 
    of the corresponding column returned by the fetchlet. If not set, the 
    metric engine will right shift all existing fetchlet returned values to 
    make place for the computed value.

    TRANSIENT: will not be uploaded to repository.  Only used to caculate Rate data,
          
    STATELESS_ALERTS ( since 4.1 ) : This attribute if set to TRUE indicates
      to EM that alerts on this column will not have corresponding clears. This
      allows the UI to decide to allow users to manually clear alerts on this
      column.

    IS_TIMESTAMP :  (since 4.1 ) : the value in this column will be used as the
      collection time for this row.
      If set to true, the values for this column should be specified in the 
               yyyy-MM-dd HH:mm:ss z
      format (for example, "2003-07-30 08:41:05 PST" )
      The list of valid timezones is listed in the 
        $ORACLE_HOME/sysman/emd/supportedtzs.lst file.

      It is invalid for a ColumnDescriptor to both be a key and a timestamp
      column.

    NON_THRESHOLDED_ALERTS: (since 10.2): This attribute is used to indicate 
      that there might be alerts for the metric column without there being a 
      thresholded condition for it (eg: through server generated alerts).  

    KEYONLY_THRESHOLDS: (since 10.2): If this attribute is set to TRUE, 
      conditions cannot apply to all metric rows and all Condition elements for 
      the column need a KeyColumn element.

    RENDERABLE: (since 10.2): A FALSE value for this attribute indicates that
      the value for this column may be generated by the engine and is cryptic
      or random enough to be of any use to the user.
-->

<!ELEMENT ColumnDescriptor (Display?, CategoryValue*, TableDescriptor?)>
<!ATTLIST ColumnDescriptor
  NAME CDATA #REQUIRED
  TYPE (NUMBER | STRING | RAW | CLOB | BLOB) "NUMBER"
  IS_FILENAME (TRUE | FALSE) "FALSE"
  IS_KEY (TRUE | FALSE)  "FALSE" 
  TRANSIENT (TRUE | FALSE) "FALSE"
  COMPUTE_EXPR CDATA #IMPLIED
  REPLACE_FETCHED_VALUE (TRUE | FALSE) "FALSE"
  COLUMN_NAME CDATA #IMPLIED
  IS_LONG_TEXT (TRUE | FALSE) "FALSE"
  IS_DATE (TRUE | FALSE) "FALSE"
  STATELESS_ALERTS (TRUE|FALSE) "FALSE"
  IS_TIMESTAMP (TRUE | FALSE) "FALSE"
  NON_THRESHOLDED_ALERTS (TRUE | FALSE) "FALSE"
  KEYONLY_THRESHOLDS (TRUE | FALSE) "FALSE"
  RENDERABLE (TRUE | FALSE) "TRUE"
  HELP CDATA #IMPLIED
>

<!--
  The CustomTableMapper element (new in 10.2) is part of the mid tier based
  versioning project and allows custom (RAW) metrics to change their 
  destination tables based on the version of the mid tier.

  The TableDescriptor for a RAW metric can have multiple CustomTableMapper
  elements - one per set of mid tier versions - with each CustomTableMapper
  providing repository table and column mappings for the TableDescriptor's
  Columns.

  The attributes of the CustomTableMapper element are
    REP_TABLE_NAME (required) : Indicates the table name that the content
    of the metric should be uploaded to.

-->
<!ELEMENT CustomTableMapper (ValidMidTierVersions*, ColumnMapper*)>
<!ATTLIST CustomTableMapper
          REP_TABLE_NAME CDATA #REQUIRED
>

<!--
  The ColumnMapper element is part of a CustomTableMapper element and describes
  the mapping between the ColumnDescriptor and the repository column its data
  should end up in.

  The presence of a ColumnMapper both provides the mapping for the column in a
  particular repository table, and indicates that the column is required in the
  table. To indicate that a column should not be uploaded to a particular 
  version of the repository, there should not be a ColumnMapper for that column

  The attributes are
    METRIC_COLUMN : Name of the ColumnDescriptor this applies to
    REP_TABLE_COLUMN : The database table column name this data should end up
     in.
-->
<!ELEMENT ColumnMapper EMPTY>
<!ATTLIST ColumnMapper
          METRIC_COLUMN CDATA #REQUIRED
          REP_TABLE_COLUMN CDATA #REQUIRED
>

<!-- The query descriptor allows the framework to find the
     fetchlet as well as pass on the query information for
     obtaining performance data values from the target.
     The fetchlet can be identified by a well known id
     that is known to the EMD.

     It may also contain properties which will be passed to
     the fetchlet.

     The QueryDescriptor has an attribute which refers to the
     Address.

     FETCHLET_ID: Specifies the ID of the fetchlet to use that 
     is known to the EMAgent.  This attribute must point to an 
     element from the $ORACLE_HOME/lib/fetchlets.reg file.

     NEED_CHARSET_CONVERT:
     If the metric result is in correct "UTF8" encoding, and this flag
     should be set to "FALSE" so EMAgent will not do any character convert.

     STREAM_SUPPORT (New in 10.2.0.5): Default is FALSE.  A value of TRUE indicates 
     that a single evaluation of the metric can return a stream of data

     REMOTE (Not supported in 10.2.0.5): Added for validating metadata 

     ON_TARGET (Not supported in 10.2.0.5): Added for validating metadata
-->
<!ELEMENT QueryDescriptor (ValidIf*, Property*) >
<!ATTLIST QueryDescriptor
        FETCHLET_ID CDATA #REQUIRED
        NEED_CHARSET_CONVERT (TRUE | FALSE) "TRUE"
        REMOTE (TRUE | FALSE) "FALSE"
        ON_TARGET (TRUE | FALSE) "FALSE"
        STREAM_SUPPORT (TRUE | FALSE) "FALSE"
>
<!-- The Attribute SCOPE defines how the value of the property is
     to be resolved.

     GLOBAL means that it needs to be resolved in the Target Type
     Definition XML file

     INSTANCE means it will be resolved by discovery. The PCDATA
     in that case should be the NAME of the property set in the
     discovery XML file.

     USER means it will be resolved by the caller (collector or
     the interactive end-user). The PCDATA in that case should be
     the name of the Property to be used when prompting the caller
     (in the case of interactive user).

     ENV means use environment varible to resolve 

     SYSTEMGLOBAL means use emd.properties to resolve 

     HOST means that the property must be resolved as an instance variable of
     the 'host' target on that EMD. For example, the OS property

     CACHE means that the value must be obtained from the previous evaluation
     of the metric. Any column returned in the previous evaluation can be 
     specified, and this is only applicable to single row OR non-key metrics.

     ASSOCTGT means that the value must be obtained from an associated target.
     The ASSOCIATION_NAME property specifies the associated target that is 
     reference   

     The ASSOCIATION_NAME attribute references the target that the property
     should be fetched from if the scope is ASSOCTGT

     The OPTIONAL attribute is meant to call out those properties that need
     NOT be available when provided to the fetchlet. The EMD will validate that
     it can find valid values for all non-optional properties before calling
     through to a fetchlet.
-->
<!ELEMENT Property (#PCDATA)>
<!ATTLIST Property
        NAME CDATA #REQUIRED
        SCOPE (GLOBAL | INSTANCE | USER | SYSTEMGLOBAL | ENV | HOST | CACHE | ASSOCTGT) "GLOBAL"
        ASSOCIATION_NAME CDATA #IMPLIED
        OPTIONAL (TRUE | FALSE) "FALSE"
>
<!-- These tags below will be used by Console UI. 

    Label and Icon will be used by UI's for display purposes

    If FOR_SUMMARY_UI set to be true, this column will be visible
    in a condensed UI( when not all column can fit into one page, 
    condensed UI can be shown which contains only selected columns
    whose FOR_SUMMARY_UI = "TRUE"
-->
<!ELEMENT Display (ValidIf*, Label, ShortName?, Icon?, Description?, Unit?)>
<!ATTLIST Display
        FOR_SUMMARY_UI (TRUE | FALSE) "FALSE"
>
<!--  the Lable that will be displayed in UI 
    the NLSID will contain the id using which the corresponding
    string can be looked up in to the resource bundle        
-->
<!ELEMENT Label (#PCDATA)>
<!ATTLIST Label
        NLSID CDATA #REQUIRED
>
<!--  ShortName is the short representation of the Metric Display name
      it should be less 12 characters long.
-->
<!ELEMENT ShortName (#PCDATA)>
<!ATTLIST ShortName
        NLSID CDATA #REQUIRED
>
<!ELEMENT Icon (#PCDATA)>
<!ATTLIST Icon
        GIF CDATA #IMPLIED
>
<!ELEMENT Description (#PCDATA)>
<!ATTLIST Description
        NLSID CDATA #IMPLIED
>
<!-- we support some standard units and unit nls ids. If you wish to use
     one of these units, please use the nls ids and display names mentioned
     below. The translation for these system supported units 
     (these nls ids that start with "em__sys__"), is done at the system level
     and does not need to be translated on a per target type basis.

     Supported Units:
     Standard Percent: used for metrics who values are between 0 and 100%
     NLSID: "em__sys__standard_percent"
     Display: "%"
     Usage: <Unit NLSID="em__sys__standard_percent">%</Unit>
     
     Generic Percent: used for metrics who values can be in +ve and -ve 
         percentages as well - like -50% or 200%
     NLSID: "em__sys__generic_percent"
     Display: "%"
     Usage: <Unit NLSID="em__sys__generic_percent">%</Unit>
     
-->
<!ELEMENT Unit (#PCDATA)>
<!ATTLIST Unit
        NLSID CDATA #IMPLIED
>

<!-- Cluster targets  can be monitored using OMS mediation or Agent mediated.
     so MonitoringMode is introduced to say whether this target type is
     of cluster type and who is going to mediate for collection of data.
     Presence of this element in the Metadata of a target type indicates that
     this target type is of a cluster type and its attribute MEDIATOR indicates
     who is going to monitor this cluster type. There is also a 
     ClusterDescriptor attribute that says about the type of the cluster.
     This cluster type is used to identify the shared library that implements
     the cluster interfaces that Agent expects. This is useful only when the
     monitoring is Agent mediated. These cluster interfaces are standard
     interfaces that agent uses to talk to the cluster target. Absence of 
     MonitoringMode Element in the metadata definition makes it a ordinary 
     target type. ValidIf is attached to determine if for any version of 
     cluster target, whether it can be OMS mediated or Agent mediated. if
     no ValidIf is provided all targets of this target type of all versions will
     be monitored using the mediator provided in the "MEDIATOR" attribute. if 
     ValidIf  is present only those versions provided there, would be monitored
     using the "MEDIATOR" mediator. rest of the versions would be monitored by
     all agents. 
-->
<!ELEMENT MonitoringMode (ValidIf*)>
<!ATTLIST MonitoringMode
       MEDIATOR  (AgentMediated|OMSMediated)  #REQUIRED
       CLUSTERDESCRIPTOR  CDATA #IMPLIED
>

<!-- AltSkipCondition allows the user to specify an alternate condition that
     indicates when metric collections should be skipped for the target. The 
     default behavior is that target collections are skipped when there is a 
     severity on the Status column of the Response metric. 
     Using AltSkipCondition element, a user to define one additional 
     condition.
     ASSOC_TARGET can be used to point to the conditions in an associated
     target. 
     
     -->
     
<!ELEMENT AltSkipCondition EMPTY >
<!ATTLIST AltSkipCondition
          METRIC CDATA #REQUIRED
          COLUMN CDATA #REQUIRED
          ASSOC_TARGET CDATA #IMPLIED
>

<!--
  The CredentialInfo element and its contents are supported starting from the
  4.1 release of EM.

  Credential types are metadata for sets of credentials. It describes the 
  components of the credential (CredentialTypeColumn s), which is the key etc.
  In some cases, CredentialTypes may be composed of existing CredentialTypes
  (in this or other target types)

  CredentialSets are the instances of CredentialTypes that apply to a 
  particular target. Of particular importance are the monitoring credential 
  sets whose values are mapped to the instance properties of the target.

-->
<!ELEMENT CredentialInfo (CredentialType*, CredentialSet*)>

<!--
  CredentialType elements contain the description of a type as composed of 
  component columns (one of which may be the key) or as a composite of 
  other predefined credential types.

  NAME Unique Name of the CredentialType
-->
<!ELEMENT CredentialType (Display?, (CredentialTypeColumn|CredentialTypeRef)+)>
<!ATTLIST CredentialType
          NAME                      CDATA #REQUIRED
>

<!--
 CredentialType is defined as a set of Credential Columns. Each 
 CredentialTypeColumn may provide a list of values that are the only allowed
 values for this column.
 
 NAME     Name of the column
 IS_KEY   If multiple sets are created of this credential type, is this the
          column by which one set is differentiated from another.
          The username column is the key in a (username,password) credential.
-->
<!ELEMENT CredentialTypeColumn (Display?, CredentialTypeColumnValue*)>
<!ATTLIST CredentialTypeColumn
          NAME            CDATA #REQUIRED
          IS_KEY          (TRUE|FALSE) "FALSE"
>

<!--
 Allowed values for a CredentialTypeColumn.

 IS_DEFAULT Set to true if this is the default value in the list
-->
<!ELEMENT CredentialTypeColumnValue (#PCDATA)>
<!ATTLIST CredentialTypeColumnValue
          IS_DEFAULT (TRUE|FALSE) "FALSE"
>

<!--
 This element allows a credential type to refer other precanned credential 
 types. It contains mapping of the columns in the original credential type to
 columns of the credential type being defined.

 REF_TYPE Credential type this refers to
 REF_TARGETTYPE The target type that contains the original credential type. 
                Null if this is the same target type
 ASSOCIATION Refers to the association of this target with the other target
             to whom credentials are maintained here. Note that this value 
             needs to be one of the AssocTarget elements above.
-->
<!ELEMENT CredentialTypeRef (CredentialTypeRefColumn*)>
<!ATTLIST CredentialTypeRef
          REF_NAME        CDATA #REQUIRED 
          REF_TYPE        CDATA #REQUIRED 
          REF_TARGETTYPE  CDATA #IMPLIED 
          ASSOCIATION     CDATA #IMPLIED 
>

<!--
  This element maps the columns in the referred credential type to this 
  credential type's columns.

  NAME Name of column in this credential type
  REF_TYPECOLUMN Name of the column in the referred credential type
-->
<!ELEMENT CredentialTypeRefColumn EMPTY>
<!ATTLIST CredentialTypeRefColumn
          NAME            CDATA #REQUIRED
          REF_TYPECOLUMN  CDATA #REQUIRED
>

<!--
  This element defines a set of elements that form a named credential set for
  this target type.

  A credential set provides values for one of the credential types defined for
  this target type. The credential set may contain credentials for one 3 
  usages : monitoring, preferred credentials or app specific functionality.

  NAME Name of the credential set
  CREDENTIAL_TYPE The credential type that this set provides values for
  DESCRIPTION User visible description for this set.
  USAGE Is this credential set used for monitoring, as preferred credentials or
        for app specific stuff ?
-->
<!ELEMENT CredentialSet (Display?, CredentialSetColumn+)>
<!ATTLIST CredentialSet
          NAME             CDATA  #REQUIRED
          CREDENTIAL_TYPE  CDATA  #REQUIRED
          USAGE            (MONITORING|PREFERRED_CRED|SYSTEM) "MONITORING"
          CONTEXT_TYPE     (TARGET|CONTAINER|COLLECTION) "TARGET"
          CONTEXT          CDATA  #IMPLIED
>

<!-- 
  Credential set columns map the columns of a credential type to the source of
  their values. In the case of monitoring credential sets, the source is 
  instance properties of the target.

  TYPE_COLUMN Name of the column in the CredentialType
  SOURCE      Where does this value come from (for monitoring credential sets,
              this is the name of the instance property.
-->
<!ELEMENT CredentialSetColumn (Display?, CredentialSetColumnValue*) >
<!ATTLIST CredentialSetColumn
          TYPE_COLUMN CDATA #REQUIRED
          SET_COLUMN  CDATA #REQUIRED
>
          
<!--
 Allowed values for a CredentialSetColumn.

 IS_DEFAULT Set to true if this is the default value in the list

 (available starting with 10.2)
-->
<!ELEMENT CredentialSetColumnValue (#PCDATA)>
<!ATTLIST CredentialSetColumnValue
          IS_DEFAULT (TRUE|FALSE) "FALSE"
>

<!-- InstanceProperties was introduced to make administration of 
     targets easier.  InstanceProperties holds target
     InstanceProperty and DynamicProperties elements
-->
<!ELEMENT InstanceProperties ((InstanceProperty | DynamicProperties)*)>

<!-- An InstanceProperty element contains the definition of an instance 
     property. 

     Example: for an oracle_database target
     one InstanceProperty has the NAME "password", which is not OPTIONAL
     and which is a "CREDENTIAL".

     NAME                        : Name of the property
     OPTIONAL                    : Is a value for the property required
     CREDENTIAL                  : Is the property sensitive in nature. Such
                                   properties are usually saved obfuscated in
                                   targets.xml
     READONLY                    : See ER 2755560
 
     The next 3 attributes are related to the emctl set credentials command :
     NEED_REENTER   (start 4.0.1): if TRUE, will require user enter it twice at
                                   command line.
     HIDE_ENTRY     (start 4.0.1): if TRUE, will show the character user typed 
                                   as '*' 
     CHECK_ORIGINAL (start 4.0.1): if TRUE, before modify, user need to type 
                                   the original value.

     IS_COMPUTED    (from 10.2) : if TRUE, indicates this describes a dynamic
                                  property
     WAS_REQUIRED   (from 10.2) : This was an instance property that was 
                                  required prior to 10.2. But now a dyn
                                  property. Send this to 10.1 OMS if 
                                  set to TRUE.
                                  Default value is FALSE. 
                                  See bug/ER 4631553
-->
<!ELEMENT InstanceProperty (#PCDATA|ValidIf|Display)*>
<!ATTLIST InstanceProperty
        NAME CDATA #REQUIRED
        OPTIONAL (TRUE | FALSE) "FALSE"
        CREDENTIAL (TRUE | FALSE) "FALSE"
        READONLY (TRUE | FALSE) "FALSE"
        NEED_REENTER ( TRUE | FALSE) "FALSE"
        HIDE_ENTRY ( TRUE | FALSE) "TRUE"
        CHECK_ORIGINAL ( TRUE | FALSE) "FALSE"
        IS_COMPUTED (TRUE|FALSE) "FALSE"
        WAS_REQUIRED (TRUE|FALSE) "FALSE"
>
<!-- DynamicProperties elements allow a target to specify a query that will
     return a set of values corresponding to the instance properties of the
     target.

 
     The values are turned into target properties and are accessible to 
     other query descriptors from the INSTANCE scope. 
 
     The NAME attribute simply identifies the property collector, for error
     tracing etc.

     The PROP_LIST and the OPT_PROP_LIST contain ';' separated lists of 
     names of properties that can be returned by the query descriptor. 
     The result *must* contain properties listed in the PROP_LIST arg. The
     result *may* contain properties listed in the OPT_PROP_LIST arg.

     The property names in the *PROP_LIST args are used in conjunction with
     InstanceProperty declarations while validating target type metadata.

     The data can be returned in one of two "formats" denoted by the FORMAT
     attribute. 
       If the FORMAT is "TABLE" (the default), the return value must
     be a table of instance property values. The table returned must be
     a two column (NAME, VALUE) table.
       If the FORMAT is "ROW", the contents of the one row are taken as the
     values of the properties in the same order they are listed in the 
     PROP_LIST, and then in the OPT_PROP_LIST lists.

     To denote that a dynamic property is cirtical for the target one can specify
     the IS_CRITICAL flag attribute. The default value of this flag is FALSE and 
     is assumed if this attribute is not present. When the value of this attribute
     is specified as TRUE, then on failure / timeout during computation of that
     dynamic property, we reschedule the computation of all dynamic / instance properties
     of that target as per the values of parameters given in the emd.properties file.

     Note that if a query descriptor returns a property value that is already
     available, the property is ignored. If multiple DynamicProperties queries
     return a property, the value from the first one is used.
-->
<!ELEMENT DynamicProperties (ValidIf*, (ReevalCondition*), (QueryDescriptor | ExecutionDescriptor)+) >
<!ATTLIST DynamicProperties
        NAME CDATA #REQUIRED
        PROP_LIST CDATA #IMPLIED
        OPT_PROP_LIST CDATA #IMPLIED
        FORMAT (TABLE | ROW) "TABLE"
        IS_CRITICAL (TRUE | FALSE) "FALSE"
>

<!-- ReevalCondition allows the user to specify a condition that will trigger
     the recomputation of a dynamic property.
-->
     
<!ELEMENT ReevalCondition EMPTY >
<!ATTLIST ReevalCondition
          METRIC CDATA #REQUIRED
          COLUMN CDATA #REQUIRED
>

<!ELEMENT ExecutionDescriptor (ValidIf*, (GetTable | GetView | GroupBy | Union | JoinTables)*)>
<!ELEMENT GetTable EMPTY>
<!ATTLIST GetTable
        NAME CDATA #REQUIRED
        ASSOC_TARGET CDATA #IMPLIED
        METRIC_NAME CDATA #IMPLIED
        USE_CACHE (TRUE | FALSE | TRUE_IF_COLLECT) "FALSE"
>
<!ELEMENT GetView ((ComputeColumn | Column)*, (Filter | In)*)>
<!ATTLIST GetView
        NAME CDATA #REQUIRED
        FROM_TABLE CDATA #REQUIRED
>
<!ELEMENT Filter (#PCDATA)>
<!ATTLIST Filter
        COLUMN_NAME CDATA #REQUIRED
        SCOPE (GLOBAL | INSTANCE | SYSTEMGLOBAL) "GLOBAL"
        OPERATOR (EQ | LT | GT | LE | GE | NE | CONTAINS | MATCH | ISNULL | ISNOTNULL) "EQ"
>
<!ELEMENT Column EMPTY>
<!ATTLIST Column
        NAME CDATA #REQUIRED
        COLUMN_NAME CDATA #IMPLIED
        TABLE_NAME CDATA #IMPLIED
>
<!ELEMENT ComputeColumn EMPTY>
<!ATTLIST ComputeColumn
        NAME               CDATA #REQUIRED
        EXPR               CDATA #REQUIRED
        IS_VALUE           (TRUE | FALSE) "FALSE"
        DEFAULT_WHEN_EMPTY (TRUE | FALSE) "FALSE"
        DEFAULT_VALUE      CDATA #IMPLIED
>
<!ELEMENT In EMPTY>
<!ATTLIST In
        COLUMN_NAME CDATA #REQUIRED
        IN_TABLE_NAME CDATA #REQUIRED
        IN_COLUMN_NAME CDATA #REQUIRED
>
<!ELEMENT GroupBy (By*, (AggregateColumn | ComputeColumn)*)>
<!ATTLIST GroupBy
        NAME CDATA #REQUIRED
        FROM_TABLE CDATA #REQUIRED
>
<!ELEMENT By EMPTY>
<!ATTLIST By
        NAME CDATA #REQUIRED
        COLUMN_NAME CDATA #IMPLIED
>
<!ELEMENT AggregateColumn EMPTY>
<!ATTLIST AggregateColumn
        NAME CDATA #REQUIRED
        COLUMN_NAME CDATA #REQUIRED
        OPERATOR (MAX | MIN | SUM | AVG | COUNT) "SUM"
>
<!ELEMENT Union (Table+)>
<!ATTLIST Union
        NAME CDATA #REQUIRED
        DISTINCT (TRUE | FALSE) "FALSE"
>
<!ELEMENT Table EMPTY>
<!ATTLIST Table
        NAME CDATA #REQUIRED
>
<!ELEMENT JoinTables (Table, Table+, (Column | ComputeColumn)*, Where*)>
<!ATTLIST JoinTables
        NAME CDATA #REQUIRED
        OUTER (TRUE | FALSE) "FALSE"
        BOTH_SIDE (TRUE | FALSE) "FALSE"
>
<!ELEMENT Where EMPTY>
<!ATTLIST Where
        FROM_TABLE CDATA #REQUIRED
        FROM_KEY CDATA #REQUIRED
        OPERATOR (EQ | GT | GE | LE | LT | NE | CONTAINS | MATCH) "EQ"
        JOIN_TABLE CDATA #REQUIRED
        JOIN_KEY CDATA #REQUIRED
>

<!-- The push descriptor identifies a recvlet which is
     responsible for supplying data and/or events for
     a metric, and specifies data to be passed to that
     recvlet for each target.  The name used for the 
     recvlet here should match the recvlet name used 
     in recvlets.reg file that is present in 
     $ORACLE_HOME/lib directory.
-->
<!ELEMENT PushDescriptor (ValidIf*, Property*) >
<!ATTLIST PushDescriptor
        RECVLET_ID CDATA #REQUIRED
>

<!--
     The DiscoveryHelper helps the agent in its process of discovering this target type

     CATEGORYNAME      : name of the category in discover.lst which discovers targets of this type
     OUI_BASED         : boolean value to indicate if this discovery used OUI inventory info
-->

<!ELEMENT DiscoveryHelper (DiscoveryHint*) >
<!ATTLIST DiscoveryHelper
        CATEGORYNAME  CDATA  #REQUIRED
        OUI_BASED (TRUE | FALSE) "TRUE"
>

<!--
     The DiscoveryHint allows users to specify any hint which can be a guide to discovery

     NAME      : name of the hint to guide discovery process
-->

<!ELEMENT DiscoveryHint (Display?) >
<!ATTLIST DiscoveryHint
        NAME  CDATA  #REQUIRED
>
