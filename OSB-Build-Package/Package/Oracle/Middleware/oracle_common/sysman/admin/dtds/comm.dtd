<!--
 Copyright (c) 2008, Oracle and/or its affiliates. All rights reserved.

  This file contains the dtd for describing request and response packets
  EMDRequest and EMDResponse contain the request and response respectively

     Version 1.0

   MODIFIED    (MM/DD/YY)  
      qding     09/07/08 - XbranchMerge qding_bug-6487708 from main
      danili    09/04/08 - Xbranchmerge jaysmith_26388_emctl_dumpstate from main
      njagathe  08/15/08 - Backport qding_bug-2673204 from main
      njagathe  07/10/08 - Backport njagathe_bug-7151947 from main
      njagathe  06/17/08 - Add in APIs from MAIN
      njagathe  06/23/08 - XbranchMerge njagathe_cutover_to_new_parse from main
      njagathe  04/22/08 - Backport njagathe_bug-6970757 from main
      sunagarw  07/30/06 - Configuration Mgmt update
      rzkrishn  08/26/05 - CONVERT_INPUT for remote ops
      rzkrishn  08/24/05 - preserveCR for NVProperty 
      aaitghez  07/28/05 - 
      njagathe  07/20/05 - Check if a collection change upload has been 
                           requested 
      rzkrishn  07/07/05 - COLLECTION_NAME
      njagathe  06/15/05 - Adding ENCRYPTED attribute to NVProperty 
      njagathe  05/03/05 - Adding pingOMS 
      sksaha    04/26/05 - Add UpdateDiscoveryListRes 
      sksaha    04/13/05 - Added UpdateDiscoveryListReq 
      sksaha    04/04/05 - Add username and password to DiscoverNowReq 
      sksaha    04/18/05 - Added credentail support for SetCentAgentRegReq 
      rzkrishn  10/20/04 - adding ID to EMDRequest 
      sksaha    08/31/04 - Enhancement to return all targets (ER-3719115) 
      aaitghez  08/03/04 - SetBlacoutReq noq takes vector of blackouts 
      njagathe  08/05/04 - Store forProxy in blackout xml 
      njagathe  07/30/04 - Adding forProxy support to discardState and 
                           setBlackout 
      sksaha    07/12/04 - added new discovery APIs - discoverTargetsNow 
      aaitghez  12/15/03 - add PRODUCT_ID to SetCentAgentRegReq 
      aaitghez  12/02/03 - rename attribute 
      aaitghez  11/24/03 - add SetCentAgentRegReq 
      jaysmith  11/12/03 - add CONVERT_OUTPUT flag to RemoteOperationReq 
      jaysmith  10/27/03 - add job output-length limit 
      itarashc  08/21/03 - fix case 
      njagathe  07/23/03 - NLS changes
      rzkrishn  07/16/03 - adding a API to set/reset master agent status
      jaysmith  06/10/03 - add FILE_OPERATION attr to RemoteOperationCommand
      njagathe  05/12/03 - Pass subcmds for reload
      aaitghez  01/09/03 - remove CollectDefinedColls objects
      aaitghez  01/03/03 - add CollectDefinedCollsReq
      gachen    05/04/03 - delete PostMetric
      rzkrishn  03/06/03 - adding timeout in MetricQuery 
      kduvvuri  12/10/02 - update dtd for RemoveBlackoutReq
      aaitghez  11/01/02 - adding UploadManagerStats 
      njagathe  09/23/02 - Variant of discardState
      njagathe  09/18/02 - Adding discardState API
      jaysmith  08/30/02 - make source operation (in PipedRemoteOps) opaque
      gachen    08/07/02 - add pid to  PostMetricData
      gachen    07/30/02 - add post metric data request
      njagathe  07/15/02 - Add composite members request
      aaitghez  06/08/02 - add CommString..
      lyang     05/09/02 - lyang_move_emsdk_common
      aaitghez  04/05/02 - remov duplicate OperationError entry..
      aaitghez  03/27/02 - add DO_UPLOAD to GetMDReq element ..
      gachen    03/22/02 - api change of saveTargets
      gachen    03/13/02 - add allow_broken to get Target
      gachen    02/28/02 - implement blackout
      gachen    02/26/02 - change action to SET
      gachen    02/22/02 - SetCollectionRes
      gachen    02/18/02 - add batch operation response
      njagathe  02/19/02 - Change TAGNAME from NVProperty to Property
      gachen    02/18/02 - add batch operation response
      gachen    02/13/02 - last error
      gachen    02/08/02 - pass display name in type
      gachen    01/29/02 - remove GetTargetsResp
      gachen    01/24/02 - get target metadata does not require target name
      gachen    01/14/02 - add support for target/collector
      gachen    12/17/01 - TargetInstance should be target
      jaysmith  11/13/01 - add emd-to-emd remoteOp pipeline
      jaysmith  11/11/01 - add getFileFromRemoteEMD
      njagathe  08/15/01 - Adding getTarget
      njagathe  07/30/01 - Adding saveTarget API
      jaysmith  07/23/01 - pass RemoteOperationResult output as element, not at
      rzkrishn  07/26/01 - review changes
      rzkrishn  07/25/01 - code review changes
      rzkrishn  07/23/01 - Adding dtd's for cli commands
      jaysmith  06/12/01 - add input, separate args to RemoteOpRequest
      jaysmith  05/23/01 - remove stderr from RemoteOperationResult
      njagathe  05/24/01 - Adding cache flag to batch requests
      njagathe  05/22/01 - Adding the batched query request
      jaysmith  05/01/01 - make RemoteOperation tags consistent
      jaysmith  03/29/01 - add Remote Operation
      mbhoopat  03/20/01 - Metric cache support
      njagathe  02/27/01 - New exception
      njagathe  02/13/01 - Update dtd to add APIs
      njagathe  02/05/01 - Adding error response
      njagathe  01/08/01 - Updating for multiple target versions
      njagathe  12/06/00 - Initial version

-->
<!-- The EMDRequest tag contains the different kinds of requests -->
<!ELEMENT EMDRequest (GetTTReq
                      | GetTIReq
                      | GetTgReq
                      | GetTMReq
                      | GetMDReq
                      | GetBatchMDReq
                      | GetMDHistoryReq
                      | RefreshReq
                      | BatchReq
                      | RemoteOperationReq
                      | UploadReq
                      | SaveTargetReq
                      | FileFromRemoteEMDReq
                      | PipedRemoteOpsReq                      
                      | GetTargetsReq 
                      | GetTargetXMLErrorReq
                      | AgentResyncReq 
                      | DiscoverNowReq 
                      | RemoveTargetReq
                      | MonitorTestReq
                      | GetEmdStatisticsReq
                      | SaveTargetsReq
                      | GetCollectionLevelsReq
                      | GetActiveCollectionReq
                      | GetDefaultCollectionReq
                      | SetTargetCollectionReq
                      | GetBlackoutReq
                      | GetBlackoutsReq
                      | GetConfigMetadataReq
                      | GetConfigPropertiesReq
                      | SetConfigPropertiesReq
                      | IsBlackedoutReq
                      | RemoveBlackoutReq
                      | SetBlackoutReq
                      | GetCompositeMembersReq
                      | DiscardStateReq
                      | UploadManagerStatusReq
                      | RecomputeDynPropsReq
                      | SetMasterAgentStatusForTgtReq
                      | SetMasterAgentStatusForTgtsReq
		      | SetCentAgentRegReq
		      | AbortEMDClientOpReq
                      | PingOMSReq
                      | UpdateDiscoveryListReq
                      | GetLastTargetErrorReq 
                      | GetSevStateReq
                      | ModifySevStateReq
                      | MetricStreamReq
                      | DumpStateReq
		      ) >
<!ATTLIST EMDRequest
          ID          CDATA    #IMPLIED
          TIMEOUT     CDATA    #IMPLIED 
>

<!-- 
register or unregister a central agent from a product home
-->

<!ELEMENT SetCentAgentRegReq EMPTY>
<!ATTLIST SetCentAgentRegReq
          PRODUCT_HOME        CDATA   #REQUIRED 
          PRODUCT_ORACLE_HOME CDATA   #REQUIRED
          USERNAME            CDATA   #IMPLIED
          PASSWORD            CDATA   #IMPLIED
          REGISTER_AGENT (TRUE|FALSE) "TRUE"
	  REG904         (TRUE|FALSE) "FALSE"
	  PRODUCT_ID     CDATA        #IMPLIED
>

<!ELEMENT BatchReq (RemoveTargetReq*) | (SetBlackoutReq*) | (SetTargetCollectionReq*) | (DiscardStateReq*) >
 
<!--
Get upload manager status statistics
-->

<!ELEMENT UploadManagerStatusReq EMPTY>
<!ATTLIST UploadManagerStatusReq
          TIMEOUT CDATA #IMPLIED
>

<!--

The GetTTReq tag describes a "target types" request
-->
<!ELEMENT GetTTReq EMPTY>

<!-- The GetTIReq tag describes a "target instances" request 
  
     The target type for which instances are REQUIRED is specified
-->
<!ELEMENT GetTIReq EMPTY>
<!ATTLIST GetTIReq 
          TARGET_TYPE CDATA #REQUIRED >

<!-- The GetTgReq tag describes a "get target instance" request 
  
     The target type and name of the instance is specified

-->
<!ELEMENT GetTgReq EMPTY>
<!ATTLIST GetTgReq 
          TARGET_TYPE CDATA #REQUIRED 
          TARGET_NAME CDATA #REQUIRED
          ALLOW_BROKEN (TRUE|FALSE) FALSE
>

<!-- The GetTMReq tag describes a "target metadata" request 
  
     The target type for which the metadata is REQUIRED is specified
-->
<!ELEMENT GetTMReq EMPTY>
<!ATTLIST GetTMReq 
          TARGET_TYPE CDATA #REQUIRED
          TARGET_NAME CDATA #IMPLIED
>

<!-- The GetMDReq tag describes a "metric data" request 
  
     The request contains the metric query information
     DO_UPLOAD is a flag that says that the metric should be collected
     AND uploaded.  Note that if DO_UPLOAD is TRUE, CACHE will always
     be set to false.  It doesn't make sense to collect and upload
     cached data because presumably it has already been uplaoded!
   
  
-->
<!ELEMENT GetMDReq (MetricQuery) >
<!ATTLIST GetMDReq
          CACHE ( TRUE | FALSE ) "TRUE"
          DO_UPLOAD ( TRUE | FALSE ) "FALSE">

<!-- The GetBatchMDReq tag describes a "batched metric data" request 
  
     The request contains the metric query information 
-->
<!ELEMENT GetBatchMDReq (MetricQuery*) >
<!ATTLIST GetBatchMDReq
          RUN_COLLECTTION ( TRUE | FALSE ) "FALSE"
          CACHE ( TRUE | FALSE ) "TRUE"
          DO_UPLOAD (TRUE | FALSE ) "FALSE" >

<!-- The GetMDHistoryReq tag describes a "metric data history" request 
  
     The request contains the metric query information 

     CUTOFF_DATE : This optional attribute  tells the agent to only send
                   results that are newer than this timestamp
     CUTOFF_SECS : This attribute indicates the cutoff in the number of 
                   seconds in the recent past.

     If both CUTOFF_DATE and CUTOFF_SECS are provided, the former takes 
     precedence
-->
<!ELEMENT GetMDHistoryReq (MetricQuery) >
<!ATTLIST GetMDHistoryReq
          CUTOFF_DATE  CDATA #IMPLIED
          CUTOFF_SECS  CDATA #IMPLIED
>

<!-- The MetricQuery tag describes a "metric query"
  
     The query is described in terms of the type and name of the target 
     instance, and the metric REQUIRED from that instance.

     A set of properties may also be supplied with the query to use if 
     necessary. 

     Note : These properties are the ones with a SCOPE of "user" in the 
     metric's metadata
-->
<!ELEMENT MetricQuery (Property*) >
<!ATTLIST MetricQuery
          TARGET_TYPE CDATA #REQUIRED
          TARGET_NAME CDATA #REQUIRED
          METRIC_NAME CDATA #REQUIRED 
          METRIC_TIMEOUT     CDATA #IMPLIED >

<!-- The Property specifies a property and its value

     The value of the property may be specified either as contained PCDATA or
     as a VALUE attribute

     ENCRYPTED (optional) : Should the property be encrypted, and is it 
                           currently in an encrypted state.
                           Valid values are
                             NA - should not encrypt, not encrypted, 
                             FALSE - should be encrypted, not encrypted
                             TRUE -  should be encrypted, encrypted

     PRESERVECR (optional) : specifies if CR in PCData to be preserved.
                             The value has to be PCData if CR has to be 
                             preserved. it does not protect CR in value if
                             it is set as attribute.
-->
<!ELEMENT Property (#PCDATA)>
<!ATTLIST Property
          NAME CDATA #REQUIRED
          VALUE CDATA #IMPLIED 
          ENCRYPTED (NA | FALSE | TRUE ) "NA"
          PRESERVECR ( FALSE | TRUE ) "FALSE"
>

<!-- The RefreshReq tag describes a "refresh" request 
  
     The request indicates which subsystems to refresh
     This value is a number that is composed of the ORing of one or more of
        1 - Collections
        2 - Targets
        4 - Target Metadata
-->
<!ELEMENT RefreshReq EMPTY >

<!-- The RemoteOperationReq tag describes a "remote operation" request 

     The command to be executed is specified, as are the username  
     and password under which the command will be executed.
-->
<!ELEMENT RemoteOperationReq (RemoteOperationCommand, PDPRuntime?)>
<!ATTLIST RemoteOperationReq 
          USERNAME CDATA #REQUIRED
          PASSWORD CDATA #REQUIRED
          CONVERT_INPUT (TRUE | FALSE) "FALSE"
          CONVERT_OUTPUT (TRUE | FALSE) "FALSE" >

<!-- The RemoteOperationCommand tag describes a single command to be
     executed as part of a remote operation request 

     The command to be executed is specified, as are the arguments
     the command will be called with, and the input to be passed to
     the command.

     A RemoteOperationCommand must specify either a COMMAND or a 
     FILE_OPERATION, but not both.
-->
<!ELEMENT RemoteOperationCommand (RemoteOperationArgument* RemoteOperationInput?)>
<!ATTLIST RemoteOperationCommand
          COMMAND CDATA
	  FILE_OPERATION CDATA  >

<!-- The RemoteOperationArgument tag describes a single argument to be
     passed to a command in a remote operation request
-->
<!ELEMENT RemoteOperationArgument EMPTY>
<!ATTLIST RemoteOperationArgument
          ARG CDATA #REQUIRED >

<!-- The RemoteOperationInput tag encloses a block of text to be passed
     as inputto a command in a remote operation request
-->
<!ELEMENT RemoteOperationInput (#PCDATA)>

<!-- The RemoteStreamOperationReq tag describes a streaming remote
     operation request .  Its command will be specified just as a
     non-streaming RemoteOperationReq would be, but no
     RemoteOperationInput will ever be included.  Instead, the input
     to the command follows the XML specification of the command on
     the HTTP stream.
-->
<!ELEMENT RemoteStreamOperationReq (RemoteOperationCommand, PDPRuntime?)>
<!ATTLIST RemoteStreamOperationReq 
          USERNAME CDATA #REQUIRED
          PASSWORD CDATA #REQUIRED
          NOTIFICATION_ID CDATA #REQUIRED
          MAX_OUTPUT_LEN CDATA #IMPLIED
          CONVERT_INPUT (TRUE | FALSE) "FALSE"
          CONVERT_OUTPUT (TRUE | FALSE) "FALSE"  >


<!-- The FileFromRemoteEMDReq tag describes a request for an EMD to get 
     a file from another EMD.

     Usernames and passwords for both nodes are REQUIRED, as are the
     pathnames for the file to be transfered on both nodes, and the
     URL for the EMD on the node from which the file should be 
     retrieved. 
-->
<!ELEMENT FileFromRemoteEMDReq (SourceRemoteOperation, PDPRuntime?)>
<!ATTLIST FileFromRemoteEMDReq
          DEST_USERNAME CDATA #REQUIRED
          DEST_PASSWORD CDATA #REQUIRED
          DEST_PATH CDATA #REQUIRED
          SOURCE_URL CDATA #REQUIRED
	  NOTIFICATION_ID CDATA #REQUIRED >

<!-- The PipedRemoteOpsReq tag describes a request for an EMD to
     (a) send a RemoteOp request to a second EMD, (b) receive the
     output stream from that Op, and (c) pass that output stream
     as input to an Op of its own, running locally.

     All the information for both Remote Ops are REQUIRED, as is the
     URL for the second EMD, and a numerical notification-id, used
     for reporting the second op's output to the repository (as with
     an asynchronous RemoteOp).
-->
<!ELEMENT PipedRemoteOpsReq SourceRemoteOperation DestinationRemoteOperation>
<!ATTLIST PipedRemoteOpsReq
          SOURCE_URL CDATA #REQUIRED
	  NOTIFICATION_ID CDATA #REQUIRED >

<!-- Formerly, the SourceRemoteOperation contained a RemoteOperationReq,
     just like the DestinationRemoteOperation.  Now, so that the
     destination EMD does not need to have a certificate valid for the
     source EMD, we're making the contents of the SourceRemoteOperation
     an opaque string that will be passed on, unread, to the source EMD.
-->
<!ELEMENT SourceRemoteOperation (#PCDATA)>
<!ELEMENT DestinationRemoteOperation RemoteOperationReq>



<!-- The Upload Tag contains the upload Request to EMD

     The Request is for EMD to upload all the collected 
     data now. 

     WAIT_TIME: (starting from 11.0) Number of seconds to wait for 
                upload to finish, if you want to override the upload 
                wait interval (either the default value of 60 seconds
                or the value set by UploadWaitTime in emd.properties
                for this particular upload request
-->

<!ELEMENT UploadReq EMPTY>
<!ATTLIST UploadReq
          WAIT_TIME  CDATA #IMPLIED
>

<!-- The SaveTargetReq tag describes a "save target" request

     This request contains the description of a target that is to be saved to
     the target system, and a flag indicating if default collections need to
     be started for the target
-->
<!ELEMENT SaveTargetReq (Target)>
<!ATTLIST SaveTargetReq
          START_COLL (TRUE | FALSE) "TRUE"
          >


<!-- The SetMasterAgentStatusForTgtReq tag describes the "set master agent 
     status for a cluster target" request.

     The OMS needs a way to let the agent know if it can be the master agent
     for a particular cluster target in OMS mediated monitoring. This API 
     takes cluster target name, cluster target type and a boolean flag to 
     indicate if the agent needs to be master or not. The agent maintains this 
     state in targets.xml. This state will not be sent back to OMS when agent
     sends back targets.xml contents to OMS. SaveTarget API does not change 
     this state on the agent side.

     The TARGET_NAME and TARGET_TYPE parameters reference the target that is
     being acted on.
     The INSTANCE_NAME and INSTANCE_TYPE parameters are used in situations 
     where the same agent might be monitoring multiple instances that are used
     to monitor the composite target. It points out the specific instance to
     use for monitoring the target.
--> 
<!ELEMENT SetMasterAgentStatusForTgtReq  EMPTY>
<!ATTLIST SetmasterAgentStatusForTgtReq
          TARGET_TYPE   CDATA #REQUIRED
          TARGET_NAME   CDATA #REQUIRED
          INSTANCE_TYPE   CDATA #IMPLIED
          INSTANCE_NAME   CDATA #IMPLIED
          IS_MASTER    (TRUE|FALSE) #REQUIRED
>


<!-- The SetMasterAgentStatusForTgtsReq tag allows the master agent status
     to be set for multiple targets at an agent at once
--> 
<!ELEMENT SetMasterAgentStatusForTgtsReq (MasterAgentStatus*)>

<!ELEMENT MasterAgentStatus  EMPTY>
<!ATTLIST MasterAgentStatus 
                     TARGET_NAME CDATA #REQUIRED
                     TARGET_TYPE CDATA #REQUIRED
                     INSTANCE_NAME CDATA #IMPLIED
                     INSTANCE_TYPE CDATA #IMPLIED
                     IS_MASTER (TRUE|FALSE) #REQUIRED
>

<!-- The AbortEMDClientOpReq tag is used to kill a EMDClient request that was 
     already sent to the agent.

     It takes a ID that helps identify the agent to abort a request. This is
     the execution ID for sysnchronous requests and a notification ID in
     case of Asynchronous requests.
-->
<!ELEMENT AbortEMDClientOpReq (PDPRuntime?)>
<!ATTLIST AbortEMDClientOpReq
          ID         CDATA     #Required
          USERNAME   CDATA     #Implied 
          PASSWORD   CDATA     #Implied
>

<!-- The PingOMS Tag contains the upload Request to EMD

    @API:      void pingOMS()
    @Desc:     The Request is for EMD to ping the OMS
    @return:   OperationRes
     
-->

<!ELEMENT PingOMSReq EMPTY>

<!--
    @API:      TargetInstance[] getAllTargets(boolean allowBroken)
    @Desc:     get all target instance in targets.xml regardless target type.  
    @param:    specify allow broken or not.
    @return:   GetTargetsRes
-->

<!ELEMENT GetTargetsReq EMPTY>
<!ATTLIST GetTargetsReq 
          ALLOW_BROKEN (TRUE|FALSE) FALSE
          HOST_TZ_REQUIRED (TRUE|FALSE) FALSE>


<!-- 
    @API:      String getLastTgtsXmlError()  
    @desc:     Error message when encountering bad xml syntax in targets.xml 
    @return:   OperationRes
-->

<!ELEMENT GetTargetXMLErrorReq EMPTY >

<!--
    @API:      ResyncAgentStateResp ResyncAgentState(ResyncAgentStateReq)  
    @desc:     Resync the agent with OMS 
    @return:   ResyncAgentStateResp consisting of job steps 
-->

<!ELEMENT AgentResyncReq (MasterAgentStatus*)>
<!ATTLIST AgentResyncReq
                REPOS_OUT_OF_SYNC_TIME CDATA #REQUIRED
>


<!ELEMENT AgentResyncResp (JobStepStatus*)>

<!ELEMENT JobStepStatus  EMPTY>
<!ATTLIST JobStepStatus 
		NOTIF_ID CDATA #REQUIRED
                STATUS CDATA #REQUIRED
>

<!-- 
  @API:     TargetInstance[] discoverTargetsNow ()
  @desc:    List of all discovered target instances that are not already existed in targets.xml
  @return:  DiscoverTargetsNowResp
-->
<!-- 
  @API:     void discoverTargetsNow (Vector targets, Vector warns)
  @desc:    List of all discovered target instances that are not already existed in targets.xml along with the warnings generated
  @param targets  a vector to hold the target instances.
  @param warns    a vector to hold the discovery warnings.
-->
<!-- 
  @API:     void discoverTargetsNow (Vector foundTargets, Vector warns, Vector categories)
  @desc:    List of only discovered target instances found by running categories of scripts (not already existed in targets.xml) with the warnings generated
  @param foundTargets  a vector to hold the target instances.
  @param warns         a vector to hold the discovery warnings.
  @param categories    a vector to hold the categories of scripts to be run.
-->
<!-- 
  @API:     void discoverTargetsNow(Vector foundTargets, Vector warns, Vector categories, boolean discoverExact)
  @desc:    List of only discovered target instances found by running categories of scripts (not already existed in targets.xml) with the warnings generated
  @param foundTargets  a vector to hold the target instances.
  @param warns         a vector to hold the discovery warnings.
  @param categories    a vector to hold the categories of scripts to be run.
  @param discoverExact a boolean value to specify manner of discovery
-->

<!ELEMENT DiscoverNowReq (DiscoveryCategory*, PDPSettings?, PDPRuntime?) >
<!ATTLIST DiscoverNowReq
          DISCOVER_EXISTING (TRUE|FALSE) FALSE>
          DISCOVER_EXACT (TRUE|FALSE) FALSE> 
          USERNAME CDATA #IMPLIED
          PASSWORD CDATA #IMPLIED
          INV_LOC CDATA #IMPLIED
          ORACLE_HOME CDATA #IMPLIED
>

<!-- The Category Tag contains the top level category 
     of scripts that are to be run by the Agent.
-->
<!ELEMENT DiscoveryCategory (EnvVar*) >
<!ATTLIST DiscoveryCategory
	  NAME CDATA #REQUIRED
>

<!-- The EnvVar Tag contains the environment variable in the form of 
     name, value pair which is to be passed to the script category that is to be run.
     The STDIN attribute controls whether the variable is passed on the stdin 
or via the environment
-->
<!ELEMENT EnvVar EMPTY>
<!ATTLIST EnvVar
          NAME  CDATA  #REQUIRED
          VALUE CDATA  #REQUIRED
          STDIN (TRUE|FALSE) "FALSE"
>

<! ELEMENT PDPSettings   (NVProperty +)
<! ATTLIST  PDPSettings
            NAME  CDATA  #IMPLIED
>

<! ELEMENT PDPRuntime   (NVProperty +)
<! ATTLIST  PDPRuntime
            NAME  CDATA  #IMPLIED
>

<!-- 
  @API:     void addNewDiscoveryScript (String category, String scriptName, boolean retStdErr)
  @desc:    Perform programmatic addition of discovery script to the discover.lst file
  @param category    a string to hold the name of category of the script to be added.
  @param scriptName  a string to hold the name of script to be added
  @param retStdErr   a boolean value to specify if discovery warning should be returned or not
-->
<!-- 
  @API:     void deleteDiscoveryScript (String category, String scriptName)
  @desc:    Perform programmatic deletion of discovery script to the discover.lst file
  @param category    a string to hold the name of category of the script to be deleted
  @param scriptName  a string to hold the name of script to be deleted
-->
<!-- 
  @API:     void deleteDiscoveryCategory (String category)
  @desc:    Perform programmatic addition of discovery scripts to the discover.lst file
  @param category    a string to hold the name of category of the scripts to be deleted
-->

<!ELEMENT UpdateDiscoveryListReq (DiscoveryScript*) >
<!ATTLIST UpdateDiscoveryListReq
          DISCOVERY_UPDATE_MODE CDATA #REQUIRED>
>


<!-- 
   @API :   void removeTarget(String targetName, String targetType)
   @desc:   Remove of a target instance from targets.xml
   @return: OperationRes
-->

<!ELEMENT RemoveTargetReq EMPTY>
<!ATTLIST RemoveTargetReq 
          TARGET_TYPE   CDATA #REQUIRED
          TARGET_NAME   CDATA #REQUIRED
>


<!-- 
  @API: boolean[] saveTargets(TargetInstance[] tgtList, String[] collectionLevel)
  @desc : Save multiple target instances to targets.xml at one time.  
          return result.
  @return: BatchOperationRes which contains a list of OperationResponse, 
-->

<!ELEMENT SaveTargetsReq (SaveTargetReq*)>


<!-- 
  @API:  String[][] MonitorTest(TargetInstance[] tgtList) 
  @desc  Monitor test for a bunch of target. Return result: Array of any error messages per instance
  @return:  MonitorTestRes
-->
<!ELEMENT MonitorTestReq (Target*)>

<!--
  @API Properties GetEmdStatistics()
  @desc Properties GetEmdStatistics()
  @return  GetEmdStatisticsRes which contains 0-N PropNV
-->
<!ELEMENT GetEmdStatisticsReq EMPTY>

<!-- 
  @API: Level[] getCollectionLevels (String targetType)
  @desc levels of  default collections available for a given target type (Essential/full/.. etc).
  @return: GetCollectionLevelsRes which is a list of CollectionLevel
 -->

<!ELEMENT GetCollectionLevelsReq EMPTY>
<!ATTLIST GetCollectionLevelsReq 
  TARGET_TYPE CDATA #REQUIRED
>

<!-- 
  @API: TargetCollection getDefaultTargetCollection(String targetType, String collectionLevel)
  @desc: List of default collection items for a given target type, collection level
  @return:  GetCollectionRes which contain either TargetCollection or NoSuchTargetError
-->

<!ELEMENT GetDefaultCollectionReq EMPTY>
<!ATTLIST GetDefaultCollectionReq 
    TARGET_TYPE       CDATA  #REQUIRED
    COLLECTION_LEVEL  CDATA  #REQUIRED
>


<!-- 
  @API: CollectionItem getCollectionItem(String targetName, String targetType, String CollectionName);
  @desc: API to get a collectioitem detail 


  @API:   TargetCollection getActiveTargetCollection(String targetName, String targetType)
  @desc:  TargetCollection for a given target name and target type.
  @return: GetCollectionRes which contain either TargetCollection or NoSuchTargetError
-->

<!ELEMENT GetActiveCollectionReq EMPTY>
<!ATTLIST GetActiveCollectionReq 
    TARGET_TYPE  CDATA #REQUIRED
    TARGET_NAME  CDATA #REQUIRED
    COLLECTION_NAME CDATA  #IMPLIED
>

<!--
  @API:   void setTargetCollection(TargetCollection targetCol)
  @desc:  Save target collection for given target collection

  @API: boolean saveMetricThresholds(String targetName, String targetType, TargetCollection targetColection);
  @desc: API to save the metric thresholds of target 

 -->

<!ELEMENT SetTargetCollectionReq (TargetCollection)>
<!ATTLIST SetTargetCollectionReq 
  ACTION  ( SET_ITEMS | REPLACE_ALL | UPDATE_THRESHOLD)  "ADD"
  UPDATE_REPOS (TRUE | FALSE) "FALSE"
>

<!--  API 

   public Blackout getBlackout(String blackoutName)
    throws CommException

-->

<!ELEMENT GetBlackoutReq EMPTY>
<!ATTLIST GetBlackoutReq
      NAME  CDATA #REQUIRED
>


<!-- API

  public Blackout[] getBlackouts(String targetType, String targetName)
    throws NoSuchTargetException, CommException

-->

<!ELEMENT GetBlackoutsReq EMPTY>
<!ATTLIST GetBlackoutsReq
      TARGET_NAME  CDATA #REQUIRED
      TARGET_TYPE  CDATA #REQUIRED
>

<!-- API

  public boolean isBlackedout(String targetType, String targetName)
    throws NoSuchTargetException, CommException  

-->

<!ELEMENT IsBlackedoutReq >
<!ATTLIST IsBlackedoutReq
      TARGET_NAME  CDATA #REQUIRED
      TARGET_TYPE  CDATA #REQUIRED
>


<!-- API
   public String removeBlackout(String blackoutGuid)
    throws CommException

   public void removeBlackoutIfNoAgentClockSkew(String blackoutGuid,
                                                Date RequestTime)
    throws CommException,OperationException,AgentClockSkewException
-->    

<!ELEMENT RemoveBlackoutReq >
<!ATTLIST RemoveBlackoutReq
      GUID          CDATA #REQUIRED
      REQUEST_TIME  CDATA #IMPLIED
>

<!-- API
   public String setBlackout(Blackout blackout)
    throws CommException   
-->

<!ELEMENT SetBlackoutReq ( Blackout ) >

<!--  API 

   public AgentConfigProperty[] getConfigMetadata()
    throws CommException

-->

<!ELEMENT GetConfigMetadataReq EMPTY >

<!--  APIs

  public String getConfigProperty(String propertyName)
    throws CommException, IllegalArgumentException

  public Properties getConfigProperties(Vector propertyNames)
    throws CommException, IllegalArgumentException

  public Properties getConfigPropertiesUsingCategory(String category)
    throws CommException, IllegalArgumentException

-->

<!ELEMENT GetConfigPropertiesReq EMPTY>
<!ATTLIST GetConfigProperties
          PROP_NAMES CDATA ""
          CATEGORY CDATA "">

<!--  APIs

  public String setConfigProperty(String propertyName, String propertyValue)
    throws CommException, IllegalArgumentException

  public Properties setConfigProperties(Properties properties)
    throws CommException, IllegalArgumentException

  public Properties setConfigProperties(Properties properties, 
                                        boolean allowNewProps)
    throws CommException, IllegalArgumentException

-->

<!ELEMENT SetConfigPropertiesReq ( AgentConfigProperty* )>
<!ATTLIST SetConfigPropertiesReq
          ALLOW_NEW_PROPS (TRUE|FALSE) "FALSE"
>

<!-- API
   public Vector getCompositeMembers(String compTargetName, 
                                     String compTargetType,
                                     String association)
    throws CommException   
-->

<!ELEMENT GetCompositeMembersReq >
<!ATTLIST GetCompositeMembersReq 
      TARGET_NAME  CDATA #REQUIRED
      TARGET_TYPE  CDATA #REQUIRED
      ASSOCIATION  CDATA #IMPLIED
>

<!-- API
   public void discardAllState(Date requestTime)
    throws OperationException, CommException ,AgentClockSkewException  

   public void discardState(String targetType, 
                            String targetName,
                            boolean reeval,
                            Date requestTime)
    throws OperationException, CommException,AgentClockSkewException   

   public void discardState(String targetType, 
                            String targetName,
                            boolean reeval,
                            Date requestTime,
                            boolean forProxy)
    throws OperationException, CommException,AgentClockSkewException   
-->
<!ELEMENT DiscardStateReq >
<!ATTLIST DiscardStateReqReq
      TARGET_NAME  CDATA #IMPLIED
      TARGET_TYPE  CDATA #IMPLIED
      ALL_TARGETS  (TRUE | FALSE) "FALSE"
      REEVAL       (TRUE | FALSE) "FALSE"
      REQUEST_TIME CDATA #IMPLIED
      FOR_PROXY    (TRUE | FALSE) "FALSE"
>

<!-- API
   public void recomputeDynProps(String targetType, String targetName)
     throws OperationException, CommException

   public void recomputeDynProps(Vector targets)
     throws OperationException, CommException
-->
<!ELEMENT RecomputeDynPropsReq (Target+) >


<!-- API
   public List<CondState> getSevState(String targetType, String targetName)
     throws OperationException, NoSuchTargetException, CommException

   public List<CondState> getSevState(String targetType, String targetName,
                                      String collName, String metricName)
     throws OperationException, NoSuchTargetException, CommException
-->
<!ELEMENT GetSevStateReq EMPTY>
<!ATTLIST GetSevStateReq
          TARGET_NAME CDATA #REQUIRED
          TARGET_TYPE CDATA #REQUIRED
          COLL_NAME CDATA #IMPLIED
          METRIC_NAME CDATA #IMPLIED
>

<!-- API
   public void discardSevState(String targetType, String targetName,
                               List<CondState>)
     throws OperationException, CommException

   public void ignoreOccsForClearState(String targetType, String targetName,
                                       List<CondState>)
     throws OperationException, CommException

-->
<!ELEMENT ModifySevStateReq (CondState*)>
<!ATTLIST ModifySevStateReq
          TARGET_NAME CDATA #REQUIRED
          TARGET_TYPE CDATA #REQUIRED
          ACTION (DISCARD_STATE|IGNORE_OCCS_FOR_CLEAR) #REQUIRED
>

<!-- The MetricStreamReq tag describes a "metric data stream" request 
  
     The request contains the metric query information 

     STREAM_INTERVAL : This attribute indicates the requested number of 
                   seconds between each data point in the stream
-->
<!ELEMENT MetricStreamReq (MetricQuery) >
<!ATTLIST MetricStreamReq
          STREAM_INTERVAL  CDATA #IMPLIED
>


<!-- DumpState is a synchronous API which requests the agent to generate
     a diagnostic dump file, and return that file's location on the
     agent's filesystem.

   API:
     public String dumpState(String components[])
-->
<!ELEMENT DumpStateReq (DumpStateComponent*) >

<!-- The DumpStateComponent tag cites a single component for
      which the agent's state should be dumped.
-->
<!ELEMENT DumpStateComponent EMPTY>
<!ATTLIST DumpStateComponent
          COMPONENT CDATA #REQUIRED >
          
<!--
###########################################################################################
###########################################################################################


  The EMDResponse tag contains the responses to the different kinds of
     requests

###########################################################################################
###########################################################################################
-->

<!ELEMENT EMDResponse (GetTTRes
                       | GetTIRes
                       | GetTgRes
                       | GetTMRes
                       | GetMDRes
                       | GetBatchMDRes
                       | MetricStreamRes
                       | BatchResp
                       | RefreshRes
                       | RemoteOperationRes
                       | RemoteStreamOperationRes
                       | OperationRes
                       | EMDError
                       | BatchOperationRes
                       | DiscoverNowRes
                       | MonitorTestRes
                       | GetEmdStatisticsRes
                       | GetCollectionLevelsRes
                       | GetTargetCollectionRes
                       | SetTargetCollectionRes
                       | GetBlackoutRes
                       | GetBlackoutsRes
                       | GetConfigMetadataRes
                       | GetConfigPropertiesRes
                       | SetConfigPropertiesRes
                       | GetCompositeMembersRes
                       | UploadManagerStatusRes
                       | UpdateDiscoveryListRes
                       | AgentResyncRes
                       | HTTPRecvletResp
                       | GetSevStateRes
                       | DumpStateRes
		       ) >

<!--
Response object for UploadManager status statistics
-->

<!ELEMENT UploadManagerStatusRes (Property*)>


<!ELEMENT BatchResp (SetTargetCollectionRes*)>


<!-- The GetTTRes tag contains the response for the "target types" request

     The response is a list of TargetType tags
-->
<!ELEMENT GetTTRes (TargetType*) >

<!-- The TargetType tag contains the information about a known type

     Currently, this information is solely the name of the type
-->
<!ELEMENT TargetType EMPTY >
<!ATTLIST TargetType
          TYPE_NAME CDATA #REQUIRED
          DISPLAY_NAME CDATA #IMPLIED
          META_VER CDATA #IMPLIED
>

<!-- The GetTIRes tag contains the response for the "target instances" request

     The response is a list of Target tags OR an error from the EMD
-->
<!ELEMENT GetTIRes (Target* ) >


<!-- The GetTgRes tag contains the response for the "get target" request

     The response is a Target tag OR an error from the EMD
-->
<!ELEMENT GetTgRes (Target | NoSuchTargetError ) >

<!-- Target is defined in discovery.dtd -->

<!-- The GetTMRes tag contains the response for the "target metadata" request

     The response is a TargetMetadata tag OR an error from the EMD
-->
<!ELEMENT GetTMRes (TargetMetadata | NoSuchTargetError ) >

<!-- TargetMetadata is defined in target.dtd -->

<!ELEMENT NoSuchTargetError EMPTY>
<!ATTLIST NoSuchTargetError
          ERRMSG  CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>



<!-- The GetMDRes tag contains the response for the "metric data" request

     The response is a MetricResult tag OR an error from the EMD
-->
<!ELEMENT GetMDRes (MetricResult | MetricGetError | NoSuchTargetError |
                    NoSuchMetricError | OperationError) >

<!-- MetricResult is defined in the fetchlet result dtd -->

<!ELEMENT MetricGetError MetricResult>
<!ATTLIST MetricGetError
          ERRCODE CDATA #REQUIRED
          ERRMSG CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>

<!ELEMENT NoSuchMetricError EMPTY>
<!ATTLIST NoSuchMetricError
          ERRMSG CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>

<!-- The GetBatchMDRes tag contains the response for the "batched metric data" 
     request

     The response is an ordered list of ( MetricResult tag OR error ) s
     from the EMD.

     It is a requirement that the number of result/errors match the number of
     requests
-->
<!ELEMENT GetBatchMDRes ((MetricResult | MetricGetError | NoSuchTargetError |
                          NoSuchMetricError | OperationError)*) >

<!-- The MetricStreamRes tag contains the response for the "metric stream" 
     request

     The response is an ordered list of ( MetricResult tag OR error ) s
     from the EMD.
-->
<!ELEMENT MetricStreamRes ((MetricResult | MetricGetError | NoSuchTargetError |
                            NoSuchMetricError | OperationError)*) >

<!-- The RefreshRes tag describes the response to a "refresh" request 
     
     The response may contain 0 or more error elements : 0 implies success
-->
<!ELEMENT RefreshRes (RefreshError*) >

<!-- The RefreshError tag describes an error that occurred during the 
     processing of a refresh request
     
     It contains an error message that describes the error that occurred.
-->
<!ELEMENT RefreshError EMPTY >
<!ATTLIST RefreshError
          ERRMSG CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>

<!-- The RemoteOperationRes tag contains the response for the 
     "remote operation" request

     The response is a RemoteOperationResult tag OR an error from the EMD
-->
<!ELEMENT RemoteOperationRes (RemoteOperationResult | RemoteOperationError) >

<!-- The RemoteStreamOperationRes tag contains the response for the 
     "remote operation" request

     The response is a RemoteStreamOperationResult tag OR an error from the EMD
-->
<!ELEMENT RemoteStreamOperationRes (RemoteStreamOperationResult | RemoteOperationError) >

<!-- MetricResult is defined in the fetchlet result dtd -->

<!ELEMENT RemoteOperationResult (#PCDATA)>
<!ATTLIST RemoteOperationResult
          EXITVAL CDATA #REQUIRED>

<!ELEMENT RemoteStreamOperationResult (#PCDATA)>
<!ATTLIST RemoteStreamOperationResult
          EXITVAL CDATA #REQUIRED>

<!ELEMENT RemoteOperationError EMPTY>
<!ATTLIST RemoteOperationError
          ERRMSG CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>

<!-- The FileFromRemoteEMDRes tag describes the response to a
     request for an EMD to get a file from another EMD.

     This request always succeeds; any errors (from either the
     source or destination EMD) will be reported to the calling
     repository via the asynchronous job-reporting interface.
-->
<!ELEMENT FileFromRemoteEMDRes (RemoteOperationError?) >

<!-- The OperationRes tag is a generic tag that contains the response for the 
     "operation" request

     The response is empty unless if the operation failed at the EMD
-->
<!ELEMENT OperationRes (OperationError?) >
<!ATTLIST OperationRes
          OPTYPE CDATA #REQUIRED>

<!-- The OperationError tag contains information about an "operation error" at 
     the EMD
-->

<!ELEMENT OperationError EMPTY >
<!ATTLIST OperationError
          ERRCODE CDATA #REQUIRED
          ERRMSG CDATA #REQUIRED
          ERRID   CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>


<!-- 
    BatchOperationRes is the container for more than 1 OperationRes 
-->

<!ELEMENT BatchOperationRes (OperationRes*) >


<!-- The EMDError tag contains information about an "unexpected error" at the
     EMD
-->
<!ELEMENT EMDError EMPTY >
<!ATTLIST EMDError
          ERRMSG CDATA #REQUIRED
          ERRCODE CDATA #IMPLIED
          ERRCTXT CDATA #IMPLIED>


<!ELEMENT DiscoverNowRes (Target* | DiscoveryWarning* | RemoteOpError?)>

<!ELEMENT UpdateDiscoveryListRes (DiscoveryScript* | OperationError?)>

<!-- On success, a DumpStateRes contains the pathname of the newly-
     generated dump file; on failure, an OperationError
-->
<!ELEMENT DumpStateRes (OperationError?) >
<!ATTLIST DumpStateRes
          PATH CDATA #IMPLIED>
          
<!ELEMENT DiscoveryScript EMPTY >
<!ATTLIST DiscoveryScript
          SCRIPT CDATA #IMPLIED
          CATEGORY CDATA #IMPLIED
          RET_STD_ERR (TRUE | FALSE) "FALSE">

<!ELEMENT MonitorTestRes (TargetError*)>


<!ELEMENT TargetError ( CommString *)>

<!-- format is "<Metric>;<Metric Error>"  for each CommString-->
<!ELEMENT CommString #PCDATA>

<!ELEMENT GetEmdStatisticsRes (PropNV*) >

<!ELEMENT PropNV  #PCDATA>
<!ATTLIST PropVal  
    NAME  CDATA  #REQUIRED
>

<!ELEMENT GetCollectionLevelsRes ( CollectionLevel *) >

<!ELEMENT GetTargetCollectionRes ( TargetCollection | NoSuchTargetError ) >

<!ELEMENT SetTargetCollectionRes ( NoSuchTargetError | (OperationError*))? >

<!ELEMENT GetBlackoutRes  ( Blackout ) >

<!ELEMENT GetBlackoutsRes ( NoSuchTargetError | (Blackout*) ) >

<!ELEMENT GetConfigMetadataRes  ( AgentConfigProperty* ) >

<!ELEMENT GetConfigPropertiesRes ( AgentConfigProperty* )>

<!ELEMENT SetConfigPropertiesRes ( AgentConfigProperty* )>

<!ELEMENT GetCompositeMembersRes ( Target*) >


<!-- The HTTPRecvletRes tag contains the response for the push event and push
     data requests

     The response is empty OR an error from the EMD
-->
<!ELEMENT HTTPRecvletRes (NoSuchTargetError |
                    NoSuchMetricError | OperationError) >


<!--
-->
<!ELEMENT GetSevStateRes (CondState * | OperationError | NoSuchTargetError)

<!ELEMENT CondState (CondKeyState*)>
<!ATTLIST CondState
          COLL_NAME CDATA #REQUIRED
          METRIC_NAME     CDATA #REQUIRED
          COLUMN_NAME     CDATA #REQUIRED
          COLLECTION_TIMESTAMP CDATA #IMPLIED
          STATE           (UNDEFINED|CLEAR|INFO|WARNING|CRITICAL) #IMPLIED
>

<!ELEMENT CondKeyState EMPTY>
<!ATTLIST CondKeyState
          KEY_VALUE       CDATA #IMPLIED
          KEY_PARTS       CDATA #IMPLIED
          STATE           (UNDEFINED|CLEAR|WARNING|CRITICAL) #REQUIRED
>
